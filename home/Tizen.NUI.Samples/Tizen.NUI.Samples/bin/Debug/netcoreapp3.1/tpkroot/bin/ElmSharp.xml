<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElmSharp</name>
    </assembly>
    <members>
        <member name="T:ElmSharp.Accessible.AccessibleInfoProvider">
            <summary>
            The delegate to define how to provide information for <see cref="P:ElmSharp.Accessible.IAccessibleObject.Name"/> or <see cref="P:ElmSharp.Accessible.IAccessibleObject.Description"/>.
            </summary>
            <param name="obj">The sender obj.</param>
            <returns>Return information for name or description.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.AccessibleObject">
            <summary>
            It's a base abstract class for <see cref="T:ElmSharp.Widget"/>.
            It provides the available definitions for the screen reader, such as <see cref="P:ElmSharp.Accessible.IAccessibleObject.Name"/>, <see cref="P:ElmSharp.Accessible.IAccessibleObject.Description"/>, <see cref="P:ElmSharp.Accessible.IAccessibleObject.ReadingInfoType"/>, etc.
            There are many relationships between two accessible objects, like <see cref="T:ElmSharp.Accessible.ChildOf"/>, <see cref="T:ElmSharp.Accessible.ParentOf"/>, <see cref="T:ElmSharp.Accessible.FlowsTo"/>, <see cref="T:ElmSharp.Accessible.FlowsFrom"/>, etc.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#ReadingInfoType">
            <summary>
            Gets or sets the reading information types of an accessible object.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#Role">
            <summary>
            Gets or sets the role of the object in an accessibility domain.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#CanHighlight">
            <summary>
            Gets or sets the highlightable of a given widget.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#TranslationDomain">
            <summary>
            Gets or sets the translation domain of the "name" and "description" properties.
            The translation domain should be set if the application wants to support i18n for accessing the "name" and "description" properties.
            When the translation domain is set, values of the "name" and "description" properties will be translated with dgettext function using the current translation domain as "domainname" parameter.
            It is the application developers responsibility to ensure that translation files are loaded and binded to the translation domain when accessibility is enabled.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#Name">
            <summary>
            Gets or sets an accessible name of the object.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#Description">
            <summary>
            Gets or sets the contextual information about an object.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#NameProvider">
            <summary>
            Gets or sets the delegate for <see cref="P:ElmSharp.Accessible.IAccessibleObject.Name"/>.
            </summary>
        </member>
        <member name="P:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#DescriptionProvider">
            <summary>
            Gets or sets the delegate for <see cref = "P:ElmSharp.Accessible.IAccessibleObject.Description"/>.
            </summary>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleObject.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the AccessibleObject class with the parent EvasObject class parameter.
            </summary>
            <param name="parent">Parent EvasObject class.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleObject.#ctor">
            <summary>
            Creates and initializes a new instance of the AccessibleObject class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#AppendRelation(ElmSharp.Accessible.IAccessibleRelation)">
            <summary>
            Defines the relationship between two accessible objects.
            Relationships can be queried by the Assistive Technology clients to provide customized feedback, and improving overall user experience.
            AppendRelation API is asymmetric, which means that appending, for example, relation <see cref="T:ElmSharp.Accessible.FlowsTo"/> from object A to B, does not append the relation <see cref="T:ElmSharp.Accessible.FlowsFrom"/> from object B to object A.
            </summary>
            <param name="relation">The relationship between the source object and target object of a given type.</param>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleObject.ElmSharp#Accessible#IAccessibleObject#RemoveRelation(ElmSharp.Accessible.IAccessibleRelation)">
            <summary>
            Removes the relationship between two accessible objects.
            </summary>
            <param name="relation">The relationship between the source object and target object of a given type.</param>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleObject.Highlight">
            <summary>
            Highlights the accessible widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleObject.Unhighlight">
            <summary>
            Clears the highlight of the accessible widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.IAccessibleRelation">
            <summary>
            IAccessibleRelation is an interface, which defines the relationship between two accessible objects.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleRelation.Target">
            <summary>
            Gets or sets the target object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleRelation.Type">
            <summary>
            Gets the type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.LabelledBy">
            <summary>
            To define the label info for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.LabelledBy.Target">
            <summary>
            Gets or sets the target object, which is LabelledBy.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.LabelledBy.Type">
            <summary>
            Gets the LabelledBy type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.LabelFor">
            <summary>
            To define the label info for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.LabelFor.Target">
            <summary>
            Gets or sets the target object which is LabelFor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.LabelFor.Type">
            <summary>
            Gets the LabelFor type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ControllerFor">
            <summary>
            To define the control relationship for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ControllerFor.Target">
            <summary>
            Gets or sets the target object, which is ControllerFor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ControllerFor.Type">
            <summary>
            Gets the ControllerFor type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ControlledBy">
            <summary>
            To define the control relationship for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ControlledBy.Target">
            <summary>
            Gets or sets the target object, which is ControlledBy.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ControlledBy.Type">
            <summary>
            Gets the ControlledBy type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.MemberOf">
            <summary>
            To define the member relationship for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.MemberOf.Target">
            <summary>
            Gets or sets the target object, which is MemberOf.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.MemberOf.Type">
            <summary>
            Gets the MemberOf type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.TooltipFor">
            <summary>
            To define the tooltip for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.TooltipFor.Target">
            <summary>
            Gets or sets the target object, which is TooltipFor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.TooltipFor.Type">
            <summary>
            Gets the TooltipFor type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ChildOf">
            <summary>
            To define the child for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ChildOf.Target">
            <summary>
            Gets or sets the target object, which is ChildOf.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ChildOf.Type">
            <summary>
            Gets the ChildOf type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ParentOf">
            <summary>
            To define the parent for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ParentOf.Target">
            <summary>
            Gets or sets the target object, which is ParentOf.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ParentOf.Type">
            <summary>
            Gets the ParentOf type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.Extended">
            <summary>
            To define the extend for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.Extended.Target">
            <summary>
            Gets or sets the target object, which is Extended.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.Extended.Type">
            <summary>
            Gets the extended type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.FlowsTo">
            <summary>
            To define the custom reading order.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.FlowsTo.Target">
            <summary>
            Gets or sets the target object, which is FlowsTo.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.FlowsTo.Type">
            <summary>
            Gets the FlowsTo type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.FlowsFrom">
            <summary>
            To define the custom reading order.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.FlowsFrom.Target">
            <summary>
            Gets or sets the target object, which is FlowsFrom.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.FlowsFrom.Type">
            <summary>
            Gets the FlowsFrom type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.SubwindowOf">
            <summary>
            To define the subwindow for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.SubwindowOf.Target">
            <summary>
            Gets or sets the target object, which is SubwindowOf.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.SubwindowOf.Type">
            <summary>
            Gets the SubwindowOf type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.Embeds">
            <summary>
            To define the embed for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.Embeds.Target">
            <summary>
            Gets or sets the target object ,which is Embeds.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.Embeds.Type">
            <summary>
            Gets the Embeds type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.EmbeddedBy">
            <summary>
            To define the embed for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.EmbeddedBy.Target">
            <summary>
            Gets or sets the target object, which is EmbeddedBy.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.EmbeddedBy.Type">
            <summary>
            Gets the EmbeddedBy type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.PopupFor">
            <summary>
            To define the popup for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.PopupFor.Target">
            <summary>
            Gets or sets the target object, which is PopupFor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.PopupFor.Type">
            <summary>
            Gets the PopupFor type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ParentWindowOf">
            <summary>
            To define the parent window for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ParentWindowOf.Target">
            <summary>
            Gets or sets the target object, which is ParentWindowOf.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.ParentWindowOf.Type">
            <summary>
            Gets the ParentWindowOf type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.DescriptionFor">
            <summary>
            To define the description for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.DescriptionFor.Target">
            <summary>
            Gets or sets the target object, which is DescriptionFor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.DescriptionFor.Type">
            <summary>
            Gets the DescriptionFor type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.DescribedBy">
            <summary>
            To define the description for an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.DescribedBy.Target">
            <summary>
            Gets or sets the target object, which is DescribedBy.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.DescribedBy.Type">
            <summary>
            Gets the DescribedBy type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ReadingStatus">
            <summary>
            Enumeration for the ReadingStatus.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingStatus.Unknown">
            <summary>
            Unknown status.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingStatus.Cancelled">
            <summary>
            Cancelled status.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingStatus.Stoppped">
            <summary>
            Stopped status.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingStatus.Skipped">
            <summary>
            Skipped status.
            </summary>
        </member>
        <member name="T:ElmSharp.Accessible.AccessibleUtil">
            <summary>
            AccessibleUtil provides a method to set the reading information.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.AccessibleUtil.Say(System.String,System.Boolean)">
            <summary>
            Reads the given text by a screen reader.
            </summary>
            <param name="text">The reading text.</param>
            <param name="discardable">If true, reading can be discarded by subsequent reading requests. If false, reading must be finished before the next reading request can be started.</param>
            <returns>Return a task with the reading status.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.AccessRole">
            <summary>
            Enumeration for the AccessRole.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.AcceleratorLabel">
            <summary>
            AcceleratorLabel role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Alert">
            <summary>
            Alert role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Animation">
            <summary>
            Animation role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Arrow">
            <summary>
            Arrow role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Calendar">
            <summary>
            Calendar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Canvas">
            <summary>
            Canvas role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.CheckBox">
            <summary>
            CheckBox role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.CheckMenuItem">
            <summary>
            CheckMenuItem role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ColorChooser">
            <summary>
            ColorChooser role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ColumnHeader">
            <summary>
            ColumnHeader role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ComboBox">
            <summary>
            ComboBox role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DateEditor">
            <summary>
            DateEditor role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DesktopIcon">
            <summary>
            DesktopIcon role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DesktopFrame">
            <summary>
            DesktopFrame role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Dial">
            <summary>
            Dial role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Dialog">
            <summary>
            Dialog role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DirectoryPane">
            <summary>
            DirectoryPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DrawingArea">
            <summary>
            DrawingArea role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.FileChooser">
            <summary>
            FileChooser role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Filler">
            <summary>
            Filler role
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.FocusTraversable">
            <summary>
            FocusTraversable role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.FontChooser">
            <summary>
            FontChooser role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Frame">
            <summary>
            Frame role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.GlassPane">
            <summary>
            GlassPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.HtmlContainer">
            <summary>
            HtmlContainer role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Icon">
            <summary>
            Icon role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Image">
            <summary>
            Image role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.InternalFrame">
            <summary>
            InternalFrame role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Label">
            <summary>
            Label role
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.LayeredPane">
            <summary>
            LayeredPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.List">
            <summary>
            List role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ListItem">
            <summary>
            ListItem role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Menu">
            <summary>
            Menu role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.MenuBar">
            <summary>
            MenuBar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.MenuItem">
            <summary>
            MenuItem role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.OptionPane">
            <summary>
            OptionPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.PageTab">
            <summary>
            PageTab role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.PageTabList">
            <summary>
            PageTabList role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Panel">
            <summary>
            Panel role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.PasswordText">
            <summary>
            PasswordText role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.PopupMenu">
            <summary>
            PopupMenu role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ProgressBar">
            <summary>
            ProgressBar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.PushButton">
            <summary>
            PushButton role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.RadioButton">
            <summary>
            RadioButton role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.RadioMenuItem">
            <summary>
            RadioMenuItem role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.RootPane">
            <summary>
            RootPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.RowHeader">
            <summary>
            RowHeader role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ScrollBar">
            <summary>
            ScrollBar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ScrollPane">
            <summary>
            ScrollPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Separator">
            <summary>
            Separator role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Slider">
            <summary>
            Slider role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.SpinButton">
            <summary>
            SpinButton role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.SplitPane">
            <summary>
            SplitPane role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.StatusBar">
            <summary>
            StatusBar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Table">
            <summary>
            Table role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TableCell">
            <summary>
            TableCell role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TableColumnHeader">
            <summary>
            TableColumnHeader role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TableRowHeader">
            <summary>
            TableRowHeader role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TearoffMenuItem">
            <summary>
            TearoffMenuItem role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Terminal">
            <summary>
            Terminal role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Text">
            <summary>
            Text role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ToggleButton">
            <summary>
            ToggleButton role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ToolBar">
            <summary>
            ToolBar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ToolTip">
            <summary>
            ToolTip role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Tree">
            <summary>
            Tree role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TreeTable">
            <summary>
            TreeTable role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Unknown">
            <summary>
            Unknown role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Viewport">
            <summary>
            Viewport role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Window">
            <summary>
            Window role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Extended">
            <summary>
            Extended role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Header">
            <summary>
            Header role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Footer">
            <summary>
            Footer role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Paragraph">
            <summary>
            Paragraph role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Ruler">
            <summary>
            Ruler role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Application">
            <summary>
            Application role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Autocomplete">
            <summary>
            Autocomplete role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Editbar">
            <summary>
            Editbar role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Embedded">
            <summary>
            Embedded role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Entry">
            <summary>
            Entry role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Chart">
            <summary>
            Chart role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Caption">
            <summary>
            Caption role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DocumentFrame">
            <summary>
            DocumentFrame role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Heading">
            <summary>
            Heading role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Page">
            <summary>
            Page role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Section">
            <summary>
            Section role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.RedundantObject">
            <summary>
            RedundantObject role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Form">
            <summary>
            Form role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Link">
            <summary>
            Link role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.InputMethodWindow">
            <summary>
            InputMethodWindow role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TableRow">
            <summary>
            TableRow role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.TreeItem">
            <summary>
            TreeItem role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DocumentSpreadsheet">
            <summary>
            DocumentSpreadsheet role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DocumentPresentation">
            <summary>
            DocumentPresentation role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DocumentText">
            <summary>
            DocumentText role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DocumentWeb">
            <summary>
            DocumentWeb role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.DocumentEmail">
            <summary>
            DocumentEmail role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Comment">
            <summary>
            Comment role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ListBox">
            <summary>
            ListBox role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Grouping">
            <summary>
            Grouping role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.ImageMap">
            <summary>
            ImageMap role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.Notification">
            <summary>
            Notification role.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.AccessRole.InfoBar">
            <summary>
            InfoBar role.
            </summary>
        </member>
        <member name="T:ElmSharp.Accessible.IAccessibleObject">
            <summary>
            IAccessibleObject is an interface, which defines the properties and methods of an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.ReadingInfoType">
            <summary>
            Gets or sets the reading information types of an accessible object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.Role">
            <summary>
            Gets or sets the role of the object in an accessibility domain.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.CanHighlight">
            <summary>
            Gets or sets the highlightable of the given widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.TranslationDomain">
            <summary>
            Gets or sets the translation domain of the "name" and "description" properties.
            Translation domain should be set if the application wants to support i18n for accessing the "name" and "description" properties.
            When the translation domain is set, values of the "name" and "description" properties will be translated with dgettext function using the current translation domain as "domainname" parameter.
            It is the application developer's responsibility to ensure that translation files are loaded and binded to the translation domain when accessibility is enabled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.Name">
            <summary>
            Gets or sets an accessible name of the object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.Description">
            <summary>
            Gets or sets contextual information about the object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.NameProvider">
            <summary>
            Gets or sets the delegate for <see cref="P:ElmSharp.Accessible.IAccessibleObject.Name"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Accessible.IAccessibleObject.DescriptionProvider">
            <summary>
            Gets or sets the delegate for <see cref="P:ElmSharp.Accessible.IAccessibleObject.Description"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.IAccessibleObject.AppendRelation(ElmSharp.Accessible.IAccessibleRelation)">
            <summary>
            Defines the relationship between two accessible objects.
            Relationships can be queried by Assistive Technology clients to provide customized feedback, improving overall user experience.
            AppendRelation API is asymmetric, which means that appending (For example, relation <see cref="T:ElmSharp.Accessible.FlowsTo"/> from object A to B) do not append relation <see cref="T:ElmSharp.Accessible.FlowsFrom"/> from object B to object A.
            </summary>
            <param name="relation">The relationship between the source object and target object of a given type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.IAccessibleObject.RemoveRelation(ElmSharp.Accessible.IAccessibleRelation)">
            <summary>
            Removes the relationship between two accessible objects.
            </summary>
            <param name="relation">The relationship between the source object and target object of a given type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.IAccessibleObject.Highlight">
            <summary>
            Highlights the accessible widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Accessible.IAccessibleObject.Unhighlight">
            <summary>
            Clears the highlight of the accessible widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Accessible.ReadingInfoType">
            <summary>
            Enumeration for ReadingInfoType.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingInfoType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingInfoType.Name">
            <summary>
            Name for reading info type.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingInfoType.Role">
            <summary>
            Role for reading info type.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingInfoType.Description">
            <summary>
            Description for reading info type.
            </summary>
        </member>
        <member name="F:ElmSharp.Accessible.ReadingInfoType.State">
            <summary>
            State for reading info type.
            </summary>
        </member>
        <member name="T:ElmSharp.AnimationViewState">
            <summary>
            Enumeration for the AnimationView state
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.AnimationViewState.NotReady">
            <summary>
            Animation is not ready to play.
            </summary>
        </member>
        <member name="F:ElmSharp.AnimationViewState.Play">
            <summary>
            Animation is on playing.
            </summary>
        </member>
        <member name="F:ElmSharp.AnimationViewState.ReversedPlay">
            <summary>
            Animation is on reverse playing.
            </summary>
        </member>
        <member name="F:ElmSharp.AnimationViewState.Pause">
            <summary>
            Animation has been paused.
            </summary>
        </member>
        <member name="F:ElmSharp.AnimationViewState.Stop">
            <summary>
            AnimationView successfully loaded a file then readied for playing. Otherwise after finished animation or stopped forcely by request.
            </summary>
        </member>
        <member name="T:ElmSharp.AnimationView">
            <summary>
            The AnimationView is designed to show and play animation of vector graphics based content.
            Currently ElmSharp AnimationView is supporting only json format (known for Lottie file as well).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the AnimationView class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by AnimationView as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Started">
            <summary>
            It occurs when the animation is just started.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Repeated">
            <summary>
            It occurs when the animation is just repeated.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Finished">
            <summary>
            It occurs when the animation is just finished.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Paused">
            <summary>
            It occurs when the animation is just paused.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Resumed">
            <summary>
            It occurs when the animation is just resumed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Stopped">
            <summary>
            It occurs when the animation is just stopped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.AnimationView.Updated">
            <summary>
            It occurs when the animation is updated to the next frame.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.AutoPlay">
            <summary>
            Sets or gets whether to play animation automatically.
            <remarks>
            If AutoPlay is true, animation will be started when it's readied.
            The condition of AutoPlay is when AnimationView opened file successfully, yet to play it plus when the object is visible.
            If AnimationView is disabled, invisible, it turns to pause state then resume animation when it's visible again.
            This AutoPlay will be only affected to the next animation source. So must be called before SetAnimation()
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.AutoRepeat">
            <summary>
            Sets or gets whether to turn on/off animation looping.
            <remarks>
            If AutoRepeat is true, it repeats animation when animation frame is reached to end.
            This AutoRepeat mode is valid to both Play and ReversePlay cases.
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.Speed">
            <summary>
            Sets or gets the animation speed.
            <remarks>
            Control animation speed by multiplying Speed value.
            If you want to play animation double-time faster, you can give Speed 2.
            If you want to play animation double-time slower, you can give Speed 0.5.
            Speed must be greater than zero.
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.DurationTime">
            <summary>
            Get the duration of animation in seconds.
            </summary>
            <remarks>
            Returns total duration time of current animation in the seconds.
            If current animation source isn't animatable, it returns zero.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.Progress">
            <summary>
            Sets or gets current progress position of animation view.
            <remarks>
            When you required to jump on a certain progress instantly,
            you can change current position by using this property
            The range of progress is 0 ~ 1.
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.Frame">
            <summary>
            Sets or gets current frame position of animation view.
            <remarks>
            The range of frame is from 0 to FrameCount - 1
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.DefaultSize">
            <summary>
            Get the default view size that specified from vector resource.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.State">
            <summary>
            Get current animation view state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.IsReversedPlaying">
            <summary>
            Get the status whether current animation is on playing forward or backward.
            </summary>
            <remarks>
            If AnimationView is not on playing, it will return False.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.FrameCount">
            <summary>
            Get the index of end frame of the AnimationView, if it's animated.
            </summary>
            <remarks>
            Frame number starts with 0.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.MinProgress">
            <summary>
            Sets or Gets the start progress of the play
            </summary>
            <remarks>
            Default value is 0.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.MaxProgress">
            <summary>
            Sets or Gets the last progress of the play
            </summary>
            <remarks>
            Default value is 1.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.MinFrame">
            <summary>
            Sets or Gets the start frame of the play
            </summary>
            <remarks>
            Default value is 0.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AnimationView.MaxFrame">
            <summary>
            Sets or Gets the last frame of the play
            </summary>
            <remarks>
            Default value is FrameCount -1.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.SetAnimation(System.String)">
            <summary>
            Sets the animation source file.
            </summary>
            <param name="file">The animation file path.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.Play">
            <summary>
            Play animation one time instantly when it's available.
            <remarks>
            If current keyframe is on a certain position by playing reverse, this will play forward from there.
            Play request will be ignored if animation source is not set yet or animation is paused state or it's already on playing.
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.Play(System.Boolean)">
            <summary>
            Play animation one time instantly when it's available.
            <remarks>
            If current keyframe is on a certain position by playing reverse and isReverse is ture, this will play forward from there.
            And if current keyframe is on a certain position by playing and isReverse is false, this will play backward from there.
            Play request will be ignored if animation source is not set yet or animation is paused state or it's already on playing.
            </remarks>
            </summary>
            <param name="isReverse">Whether the animation play or reverse play.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.Pause">
            <summary>
            Pause current animation instantly.
            <remarks>
            Once animation is paused, animation view must get resume to play continue again.
            Animation must be on playing or playing back status.
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.Resume">
            <summary>
            Resume paused animation to continue animation.
            </summary>
            <remarks>
            This resume must be called on animation paused status.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.Stop">
            <summary>
            Stop playing animation.
            <remarks>
            Stop animation instatly regardless of it's status and reset to
            show first frame of animation.Even though current animation is paused,
            the animation status will be stopped.
            </remarks>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AnimationView.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a AnimationView handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Background">
            <summary>
            The Background is a widget that use for setting (solid) background decorations to a window (unless it has transparency enabled)
            or to any container object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Background.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Background class.
            </summary>
            <param name="parent">The EvasObject to which the new background will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Background.Color">
            <summary>
            Sets or gets the color to the background.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Background.File">
            <summary>
            Sets or gets the image to the background.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Background.BackgroundOption">
            <summary>
            Sets or gets the mode of display for a given background widget's image.
            </summary>
            <remarks>
            This sets how the background widget will display its image.
            This will only work if the file was previously set with an image file on object.
            The image can be display tiled, scaled, centered, or stretched. Scaled by default.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Background.SetFileLoadSize(System.Int32,System.Int32)">
            <summary>
            Sets the size of the pixmap representation of the image set on a given background widget.
            This method just makes sense if an image file was set.
            This is just a hint for the underlying system.
            The real size of the pixmap may differ depending on the type of image being loaded, being bigger than requested.
            </summary>
            <param name="w">The new width of the image pixmap representation.</param>
            <param name="h">The new height of the image pixmap representation.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Background.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.BackgroundOptions">
            <summary>
            Enumeration for the background types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.BackgroundOptions.Center">
            <summary>
            Centers the background image.
            </summary>
        </member>
        <member name="F:ElmSharp.BackgroundOptions.Scale">
            <summary>
            Scales the background image, retaining the aspect ratio.
            </summary>
        </member>
        <member name="F:ElmSharp.BackgroundOptions.Stretch">
            <summary>
            Stretches the background image to fill the UI component's area.
            </summary>
        </member>
        <member name="F:ElmSharp.BackgroundOptions.Tile">
            <summary>
            Tiles the background image at its original size.
            </summary>
        </member>
        <member name="T:ElmSharp.Box">
            <summary>
            The Box is a container that is used to arrange UI components in a linear order.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Box class.
            </summary>
            <param name="parent">The EvasObject to which the new Box will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Box.IsHorizontal">
            <summary>
            Sets or gets the IsHorizontal value, which describe the pack direction. Vertical is default.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Box.IsHomogeneous">
            <summary>
            Sets or gets whether the box has to arrange its children homogeneously.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.PackEnd(ElmSharp.EvasObject)">
            <summary>
            Adds an object at the end of the pack list.
            </summary>
            <remarks>
            Packs the "content" object into the Box, placing it last in the list of children objects.
            The actual position of the object will get on the screen depending on the layout used.
            If no custom layout is set, it will be at the bottom or right,
            depending if the Box is vertical or horizontal, respectively.
            </remarks>
            <param name="content">The oject to be packed.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.PackStart(ElmSharp.EvasObject)">
            <summary>
            Adds a "content" object to the beginning of the pack list.
            </summary>
            <remarks>
            Packs the "content" object into the box object, placing it first in the list of children objects.
            The actual position of the object will get on the screen depending on the layout used.
            If no custom layout is set, it will be at the top or left,
            depending if the Box is vertical or horizontal, respectively.
            </remarks>
            <param name="content">The object to be packed.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.PackAfter(ElmSharp.EvasObject,ElmSharp.EvasObject)">
            <summary>
            Adds a "content" object to the box after the "after" object.
            </summary>
            <remarks>
            This will add the "content" to the box indicated after the object indicated with "after".
            If "after" is not already in the box, the results are undefined.
            After means either to the right of the "after" object or below it, depending on orientation.
            </remarks>
            <param name="content">The object will be added in the box.</param>
            <param name="after">The object has been added in the box.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.PackBefore(ElmSharp.EvasObject,ElmSharp.EvasObject)">
            <summary>
            Adds a "content" object to the box before the "before" object.
            </summary>
            <remarks>
            This will add the "content" to the box indicated before the object indicated with "before".
            If "before" is not already in the box, the results are undefined.
            Before means either to the left of the "before" object or below it, depending on orientation.
            </remarks>
            <param name="content">The object will be added in the box.</param>
            <param name="before">The object has been added in the box.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.UnPack(ElmSharp.EvasObject)">
            <summary>
            Removes the "content" object from the box without deleting it.
            </summary>
            <param name="content">The object to unpack.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.UnPackAll">
            <summary>
            Removes all the objects from the Box container.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.SetLayoutCallback(System.Action)">
            <summary>
            Whenever any changes that requires the box in object to recalculate the size and position of its elements,
            the function cb will be called to determine what the layout of the children will be.
            </summary>
            <param name="action">The callback function used for layout.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.SetPartColor(System.String,ElmSharp.Color)">
            <summary>
            Sets the color of the exact part to the box's layout parent.
            </summary>
            <param name="part">The name of part class, it could be 'bg', 'elm.swllow.content'.</param>
            <param name="color">The color value.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.GetPartColor(System.String)">
            <summary>
            Gets the color of the exact part of the box's layout parent.
            </summary>
            <param name="part">The name of part class, it could be 'bg', 'elm.swllow.content'.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.Recalculate">
            <summary>
            Forces the box to recalculate its children packing.
            If any children were added or removed, the box will not calculate the values immediately, rather leaving it to the next main loop iteration.
            While this is great as it would save lots of recalculation, whenever you need to get the position of a just added item, you must force recalculate before doing so.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.Clear">
            <summary>
            Clears the box's of all the children.
            Remove all the elements contained by the box, deleting the respective objects.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.SetBoxAlignment(System.Double,System.Double)">
            <summary>
            Sets or gets the alignment of the whole bounding box of contents.
            </summary>
            <param name="horizontal">Horizontal alignment.</param>
            <param name="vertical">Vertical alignment.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.SetPadding(System.Int32,System.Int32)">
            <summary>
            Sets or gets the space (padding) between the box's elements.
            </summary>
            <param name="horizontal">Horizontal padding.</param>
            <param name="vertical">Vertical padding.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Box.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Button">
            <summary>
            The Button is a widget that works as a clickable input element to trigger events.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Button.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Button class.
            </summary>
            <param name="parent">
            The EvasObject to which the new Button will be attached as a child.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Button.Clicked">
            <summary>
            Clicked will be triggered when the button is clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Button.Repeated">
            <summary>
            Repeated will be triggered when the button is pressed without releasing it.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Button.Pressed">
            <summary>
            Pressed will be triggered when the button is pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Button.Released">
            <summary>
            Released will be triggered when the button is released after being pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Button.AutoRepeat">
            <summary>
            Sets or gets the autorepeat feature of a given Bbutton.
            </summary>
            <remarks>
            Autorepeat feature means the autorepeat event is generated when the button is kept pressed.
            When set to false, no autorepeat is performed and the buttons will trigger the Clicked event when they are clicked.
            When set to true, keeping a button pressed continuously will trigger the Repeated event until the button is released.
            The time it takes until it starts triggering, repeated is given by AutoRepeatInitialTime,
            and the time between each new emission is given by AutoRepeatGapTimeout.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Button.AutoRepeatInitialTime">
            <summary>
            Sets or gets the initial timeout before the Repeat event is generated.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Button.AutoRepeatGapTimeout">
            <summary>
            Sets or gets the interval between each generated Repeat event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Button.DeleteColorClass(System.String)">
            <summary>
            Deletes the object Color class.
            </summary>
            <param name="part">The Color class to be deleted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Button.BackgroundColor">
            <summary>
            Sets or gets the BackgroundColor of a given button in the normal and pressed status.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Button.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.CalendarMarkRepeatType">
            <summary>
            Enumeration for event periodicity, used to define if a mark should be repeated beyond the event's day. It's set when a mark is added.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CalendarMarkRepeatType.Unique">
            <summary>
            Default value. Marks will be displayed only on the event day.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarMarkRepeatType.Daily">
            <summary>
            Marks will be displayed every day after the event day.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarMarkRepeatType.Weekly">
            <summary>
            Marks will be displayed every week after the event day.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarMarkRepeatType.Monthly">
            <summary>
            Marks will be displayed every month that coincides to the event day.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarMarkRepeatType.Annually">
            <summary>
            Marks will be displayed every year that coincides to the event day.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarMarkRepeatType.LastDayOfMonth">
            <summary>
            Marks will be displayed every last day of month after the event day.
            </summary>
        </member>
        <member name="T:ElmSharp.CalendarSelectMode">
            <summary>
            Enumeration for the mode, which determines how a user could select a day.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CalendarSelectMode.Default">
            <summary>
            Default value. A day is always selected.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarSelectMode.Always">
            <summary>
            A day is always selected.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarSelectMode.None">
            <summary>
            None of the days can be selected.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarSelectMode.OnDemand">
            <summary>
            User may have selected a day.
            </summary>
        </member>
        <member name="T:ElmSharp.CalendarSelectable">
            <summary>
            Enumeration for defining which fields of a tm struct will be taken into account.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CalendarSelectable.None">
            <summary>
            None will be taken into account.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarSelectable.Year">
            <summary>
            Year will be taken into account.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarSelectable.Month">
            <summary>
            Month will be taken into account.
            </summary>
        </member>
        <member name="F:ElmSharp.CalendarSelectable.Day">
            <summary>
            Day will be taken into account.
            </summary>
        </member>
        <member name="T:ElmSharp.CalendarMark">
            <summary>
            The CalendarMark is an item for marking a Calendar's type, date, and repeat type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CalendarMark.Type">
            <summary>
            A string used to define the type of mark.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CalendarMark.Date">
            <summary>
            A time struct to represent the date of inclusion of the mark.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CalendarMark.Repeat">
            <summary>
            Repeats the event following this periodicity.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.CalendarMark.#ctor(System.String,System.DateTime,ElmSharp.CalendarMarkRepeatType)">
            <summary>
            Creates and initializes a new instance of the CalendarMark class.
            </summary>
            <param name="type">Type of mark.</param>
            <param name="date">Date of inclusion of the mark.</param>
            <param name="repeat">Repeat type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Calendar">
            <summary>
            The Calendar is a widget that helps applications to flexibly display a calender with day of the week, date, year, and month.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Calendar.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Calendar class.
            </summary>
            <param name="parent">
            The EvasObject to which the new calendar will be attached as a child.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Calendar.DateChanged">
            <summary>
            DateChanged will be triggered when the date in the calendar is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Calendar.DisplayedMonthChanged">
            <summary>
            DisplayedMonthChanged will be triggered when the current month displayed in the calendar is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Calendar.DateFormatDelegate">
            <summary>
            This delegate type is used to format the string that will be used to display month and year.
            </summary>
            <param name="time">DateTime</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.MinimumYear">
            <summary>
            Sets or gets the minimum for year.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.MaximumYear">
            <summary>
            Sets or gets the maximum for the year.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.DisplayedTime">
            <summary>
            Sets or gets the first day of the week, which is used on the calendar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.FirstDayOfWeek">
            <summary>
            Sets or gets the first day of the week, which is used on the calendar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.WeekDayNames">
            <summary>
            Sets or gets the weekdays name to be displayed by the calendar.
            </summary>
            <remarks>
            The usage should be like this:
            <![CDATA[List<string> weekDayNames = new List<string>() { "S", "M", "T", "W", "T", "F", "S" };]]>
            Calendar.WeekDayNames = weekDayNames;
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.SelectedDate">
            <summary>
            Sets or gets the selected date.
            </summary>
            <remarks>
            The selected date changes when the user goes to the next/previous month or selects a day pressing over it on the calendar.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.Interval">
            <summary>
            Sets or gets the interval on time updates for a user mouse button
            hold, on the calendar widgets' month/year selection.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.SelectMode">
            <summary>
            Gets or sets the select day mode used.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.Selectable">
            <summary>
            Gets or sets the fields of a datetime that will be taken into account, when SelectedDate set is invoked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Calendar.DateFormat">
            <summary>
            Gets or sets the date format of the string that will be used to display month and year.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Calendar.AddMark(System.String,System.DateTime,ElmSharp.CalendarMarkRepeatType)">
            <summary>
            Adds a new mark to the calendar.
            </summary>
            <param name="type">A string used to define the type of mark. It will be emitted to the theme that should display a related modification on these day's representation.</param>
            <param name="date">A time struct to represent the date of inclusion of the mark. For marks that repeat, it will just be displayed after the inclusion date in the calendar.</param>
            <param name="repeat">Repeat the event following this periodicity. Can be a unique mark (that doesn't repeat), daily, weekly, monthly, or annually.</param>
            <returns>Item for a calendar mark.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Calendar.DeleteMark(ElmSharp.CalendarMark)">
            <summary>
            Deletes a mark from the calendar.
            </summary>
            <param name="mark">Item for a calendar mark.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Calendar.DrawMarks">
            <summary>
            Draws the calendar marks.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Calendar.ClearMarks">
            <summary>
            Removes all the calendar's marks.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Calendar.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Check">
            <summary>
            The Check is a widget that allows for toggling a value between true and false.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Check.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Check class.
            </summary>
            <param name="parent">
            The EvasObject to which the new check will be attached as a child.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Check.StateChanged">
            <summary>
            StateChanged will be triggered when the IsChecked in the check is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Check.IsChecked">
            <summary>
            Sets or gets whether the given check is checked or not.
            </summary>
            <remarks>
            When an object is checked, the value will be set to true. Conversely, will be set to false.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Check.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.CheckStateChangedEventArgs">
            <summary>
            It inherits System.EventArgs.
            The CheckStateChangedEventArgs is an EventArgs to record the check's state.
            Include the old state and the new state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.CheckStateChangedEventArgs.OldState">
            <summary>
            Gets the OldState property. The return type is bool.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.CheckStateChangedEventArgs.NewState">
            <summary>
            Gets the NewState property. The return type is bool.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.CheckStateChangedEventArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates and initializes a new instance of the CheckStateChangedEventArgs class.
            </summary>
            <param name="oldState">Old state of check to use this CheckStateChangedEventArgs.</param>
            <param name="newState">New state of check to use this CheckStateChangedEventArgs.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Color">
            <summary>
            The Color is a struct to record the check's state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Color.Default">
            <summary>
            Gets a default Color instance.
            </summary>
            <remarks>
            In the default Color instance, the mode type is default with RGBA all set as -1.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Color.IsDefault">
            <summary>
            Gets whether the Color instance's mode is default or not.
            The return type is bool.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Color.A">
            <summary>
            Gets the A value of RGBA.
            A means the Alpha in color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Color.R">
            <summary>
            Gets the R value of RGBA.
            R means the Red in color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Color.G">
            <summary>
            Gets the G value of RGBA.
            G means the Green in color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Color.B">
            <summary>
            Gets the B value of RGBA.
            B means the Blue in color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new instance of the Color class
            with RGB parameters.
            </summary>
            <param name="r">Red of RGB.</param>
            <param name="g">Green of RGB.</param>
            <param name="b">Blue of RGB.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new instance of the Color class
            with RGBA parameters.
            </summary>
            <param name="r">Red of RGBA.</param>
            <param name="g">Green of RGBA.</param>
            <param name="b">Blue of RGBA.</param>
            <param name="a">Alpha of RGBA.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value.
            otherwise, false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.op_Equality(ElmSharp.Color,ElmSharp.Color)">
            <summary>
            Compares whether the two Color instances are same or not.
            </summary>
            <param name="a">A Color instance.</param>
            <param name="b">A Color instance.</param>
            <returns>The result whether the two instances are the same or not.
            Return type is bool. If they are same, return true.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.op_Inequality(ElmSharp.Color,ElmSharp.Color)">
            <summary>
            Compares whether the two Color instances are different or not.
            </summary>
            <param name="a">A Color instance.</param>
            <param name="b">A Color instance.</param>
            <returns>The result whether the two instances are different or not.
            Return type is bool. If they are different, return true.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>The fully qualified type name.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.FromHex(System.String)">
            <summary>
            Gets a Color instance with a hexadecimal string parameter.
            </summary>
            <param name="hex">Hexadecimal string.</param>
            <returns>New instance of the Color struct.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.FromUint(System.UInt32)">
            <summary>
            Gets a Color instance with an unsigned integer parameter.
            </summary>
            <param name="argb">Unsigned integer indicates RGBA.</param>
            <returns>New instance of the Color struct.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.FromRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a Color instance with R,G,B,A parameters.
            </summary>
            <param name="r">Red of RGBA.</param>
            <param name="g">Green of RGBA.</param>
            <param name="b">Blue of RGBA.</param>
            <param name="a">Alpha of RGBA.</param>
            <returns>New instance of the Color struct.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Color.FromRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a Color instance with R,G,B parameters.
            </summary>
            <param name="r">Red of RGB.</param>
            <param name="g">Green of RGB.</param>
            <param name="b">Blue of RGB.</param>
            <returns>New instance of the Color struct.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Transparent">
            <summary>
            The Tansparent is a predefined Color instance. It's RGBA value is (0, 0, 0, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Aqua">
            <summary>
            The Aqua is a predefined Color instance. It's RGB value is (0, 255, 255).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Black">
            <summary>
            The Black is a predefined Color instance. It's RGB value is (0, 0, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Blue">
            <summary>
            The Blue is a predefined Color instance. It's RGB value is (0, 0, 255).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Fuchsia">
            <summary>
            The Fuchsia is a predefined Color instance. It's RGB value is (255, 0, 255).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Gray">
            <summary>
            The Gray is a predefined Color instance. It's RGB value is (128, 128, 128).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Green">
            <summary>
            The Green is a predefined Color instance. It's RGB value is (0, 128, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Lime">
            <summary>
            The Lime is a predefined Color instance. It's RGB value is (0, 255, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Maroon">
            <summary>
            The Maroon is a predefined Color instance. It's RGB value is (128, 0, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Navy">
            <summary>
            The Navy is a predefined Color instance. It's RGB value is (0, 0, 128).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Olive">
            <summary>
            The Olive is a predefined Color instance. It's RGB value is (128, 128, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Orange">
            <summary>
            The Orange is a predefined Color instance. It's RGB value is (255, 165, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Purple">
            <summary>
            The Purple is a predefined Color instance. It's RGB value is (128, 0, 128).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Pink">
            <summary>
            The Pink is a predefined Color instance. It's RGB value is (255, 102, 255).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Red">
            <summary>
            The Red is a predefined Color instance. It's RGB value is (255, 0, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Silver">
            <summary>
            The Silver is a predefined Color instance. It's RGB value is (192, 192, 192).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Teal">
            <summary>
            The Teal is a predefined Color instance. It's RGB value is (0, 128, 128).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.White">
            <summary>
            The White is a predefined Color instance. It's RGB value is (255, 255, 255).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Color.Yellow">
            <summary>
            The Yellow is a predefined Color instance. It's RGB value is (255, 255, 0).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ColorChangedEventArgs">
            <summary>
            It inherits System.EventArgs.
            Event ColorChanged of the ColorSelector contains ColorChangedEventArgs as a parameter.
            Refer to <see cref="T:ElmSharp.ColorSelector"/>type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorChangedEventArgs.OldColor">
            <summary>
            Gets an old color in the color changed event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorChangedEventArgs.NewColor">
            <summary>
            Gets a new color in the color changed event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ColorChangedEventArgs.#ctor(ElmSharp.Color,ElmSharp.Color)">
            <summary>
            Creates and initializes a new instance of the ColorChangedEventArgs class.
            </summary>
            <param name="oldColor">Old color.</param>
            <param name="newColor">New color.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ColorSelectorMode">
            <summary>
            Enumeration for the modes of ColorSelector.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.Palette">
            <summary>
            Only the color palette is displayed, by default.
            </summary>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.Components">
            <summary>
            Only the color selector is displayed.
            </summary>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.Both">
            <summary>
            Both the palette and the selector is displayed.
            </summary>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.Picker">
            <summary>
            Only the color picker is displayed.
            </summary>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.Plane">
            <summary>
            This mode is not supported. If you use this, nothing will be shown.
            </summary>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.PallettePlane">
            <summary>
            This mode is not supported. If you use this, it will be shown same with the Palette mode.
            </summary>
        </member>
        <member name="F:ElmSharp.ColorSelectorMode.All">
            <summary>
            This mode is not supported. If you use this, it will be shown same with the Palette mode.
            </summary>
        </member>
        <member name="T:ElmSharp.ColorSelector">
            <summary>
            The ColorSelector is a widget to set a series of colors.
            It also allows to load/save colors from/to the configuration with a unique identifier.
            </summary>
            <remarks>
            By default, the colors are loaded/saved from/to configuration using the "default" identifier.
            The colors can be picked by the user from the color set by clicking on individual
            color items on the palette, or by selecting it from the selector.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ColorSelector.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the ColorSelector class.
            </summary>
            <param name="parent"></param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ColorSelector.ColorChanged">
            <summary>
            ColorChanged will be triggered when the SelectedColor is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorSelector.SelectedColor">
            <summary>
            Gets or sets the color of colorselector.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorSelector.Opacity">
            <summary>
            Gets the Alpha of a default Color class (value is -1).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorSelector.Mode">
            <summary>
            Gets or sets the Colorselector's mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorSelector.PaletteName">
            <summary>
            Gets or sets the current palette's name.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ColorSelector.AddPaletteColor(ElmSharp.Color)">
            <summary>
            Adds a new color item to the palette.
            </summary>
            <param name="color">The color item to add.</param>
            <returns>A new color palette Item.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ColorSelector.ClearPalette">
            <summary>
            Clears the palette items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ColorSelector.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ColorSelectorItem">
            <summary>
            An instance to the ColorSelector item gets added.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorSelectorItem.Color">
            <summary>
            Gets or sets the palette item's color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Conformant">
            <summary>
            The Conformant is a widget that can be used in elementary applications
            to account for space taken up by the indicator,
            virtual keypad &amp; softkey windows when running the illume2 module of E17.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Conformant.#ctor(ElmSharp.Window)">
            <summary>
            Creates and initializes a new instance of the Conformant class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by Conformant
            as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Conformant.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Container">
            <summary>
            It inherits <see cref="T:ElmSharp.Widget"/>.
            The Container is an abstract class.
            The other class inherits it to elementary, which is about displaying
            its widgets in a nice layout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Container.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the class, which inherit from the Container.
            </summary>
            <param name="parent">The parent is a given object, which will be attached by the Container
            as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Container.#ctor">
            <summary>
            Creates and initializes a new instance of the Container class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Container.BackgroundColor">
            <summary>
            Sets the background color of a given Container.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Container.Children">
            <summary>
            Gets the collection of a child EvasObject of the Container.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Container.AddChild(ElmSharp.EvasObject)">
            <summary>
            Add the EvasObject object as a child of the Container.
            </summary>
            <param name="obj">The EvasObject object to be added.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Container.RemoveChild(ElmSharp.EvasObject)">
            <summary>
            Removes the EvasObject object as a child of the Container.
            </summary>
            <param name="obj">The EvasObject object to be removed.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Container.ClearChildren">
            <summary>
            Clears all the children of the Container.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Container.OnChildDeleted(System.Object,System.EventArgs)">
            <summary>
            The Container callback that is invoked when a child is removed.
            </summary>
            <param name="sender">The called Container.</param>
            <param name="a"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:ElmSharp.ContextPopupDirection">
            <summary>
            Enumeration for the ContextPopup direction types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ContextPopupDirection.Down">
            <summary>
            The ContextPopup appears below the clicked area.
            /// </summary>
        </member>
        <member name="F:ElmSharp.ContextPopupDirection.Right">
            <summary>
            The ContextPopup appears to the right of the clicked area.
            </summary>
        </member>
        <member name="F:ElmSharp.ContextPopupDirection.Left">
            <summary>
            The ContextPopup appears to the left of the clicked area.
            </summary>
        </member>
        <member name="F:ElmSharp.ContextPopupDirection.Up">
            <summary>
            The ContextPopup appears above the clicked area.
            </summary>
        </member>
        <member name="F:ElmSharp.ContextPopupDirection.Unknown">
            <summary>
            The ContextPopup does not determine it's direction yet.
            </summary>
        </member>
        <member name="T:ElmSharp.ContextPopup">
            <summary>
            It inherits <see cref="T:ElmSharp.Layout"/>.
            The ContextPopup is a widget that when shown, pops up a list of items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the ContextPopup class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by ContextPopup
            as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ContextPopup.Dismissed">
            <summary>
            Dismissed is raised when the ContextPopup item is dismissed.
            </summary>
            <remarks>
            Outside of ContextPopup is clicked or it's parent area is changed or the language is changed, and then ContextPopup is dismissed.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ContextPopup.Direction">
            <summary>
            Gets the current direction of a ContextPopup.
            </summary>
            <remarks>
            Once the ContextPopup shows up, the direction would be determined.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ContextPopup.IsHorizontal">
            <summary>
            Gets or sets the value of the current ContextPopup object's orientation.
            True for horizontal mode, False for vertical mode (or errors).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ContextPopup.AutoHide">
            <summary>
            Gets or sets whether the ContextPopup hides automatically
            or not when the parent of the ContextPopup is resized.
            </summary>
            <remarks>
            Default value of AutoHide is False.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.Clear">
            <summary>
            Clears all the items in a given ContextPopup object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.SetDirectionPriorty(ElmSharp.ContextPopupDirection,ElmSharp.ContextPopupDirection,ElmSharp.ContextPopupDirection,ElmSharp.ContextPopupDirection)">
            <summary>
            Sets the direction priority of a ContextPopup.
            </summary>
            <param name="first">1st priority of the direction.</param>
            <param name="second">2nd priority of the direction.</param>
            <param name="third">3th priority of the direction.</param>
            <param name="fourth">4th priority of the direction.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.GetDirectionPriority(ElmSharp.ContextPopupDirection@,ElmSharp.ContextPopupDirection@,ElmSharp.ContextPopupDirection@,ElmSharp.ContextPopupDirection@)">
            <summary>
            Gets the direction priority of a ContextPopup.
            </summary>
            <param name="first">1st priority of the direction to be returned.</param>
            <param name="second">2nd priority of the direction to be returned.</param>
            <param name="third">2nd priority of the direction to be returned.</param>
            <param name="fourth">4th priority of the direction to be returned.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.Append(System.String)">
            <summary>
            Adds a new item to a ContextPopup object with the label.
            </summary>
            <param name="label">Label of the new item.</param>
            <returns>
            A ContextPopupItem added, or null on errors.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.Append(System.String,ElmSharp.EvasObject)">
            <summary>
            Adds a new item to a ContextPopup object with the label and icon.
            </summary>
            <param name="label">Label of the new item.</param>
            <param name="icon">Icon to be set on the new item.</param>
            <returns>A ContextPopupItem added, or null on errors.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.Dismiss">
            <summary>
            Dismisses a ContextPopup object. The ContextPopup will be hidden and the "clicked" signal will be emitted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.IsAvailableDirection(ElmSharp.ContextPopupDirection)">
            <summary>
            Gets the possibility that the direction would be available.
            </summary>
            <param name="direction">A direction that the user wants to check.</param>
            <returns>
            Get false if you cannot put it in the direction. Get true if it's possible.
            </returns>
            <since_tizen> preview </since_tizen>
            [Obsolete("IsAvailableDirection is obsolete as of API6 and is no longer supported.")]
        </member>
        <member name="P:ElmSharp.ContextPopup.Opacity">
            <summary>
            Gets the Alpha of a default Color class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ContextPopup.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ContextPopupItem">
            <summary>
            It inherits <see cref="T:ElmSharp.ItemObject"/>.
            An instance to the ContextPopup item is added.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ContextPopupItem.Text">
            <summary>
            Gets the Text property of the given ContextPopupItem.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ContextPopupItem.Icon">
            <summary>
            Gets the Icon (type is <see cref="T:ElmSharp.EvasObject"/>) property of the given ContextPopupItem.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ContextPopupItem.Selected">
            <summary>
            Selected will be triggered when the ContextPopupItem is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DateChangedEventArgs">
            <summary>
            It inherits System.EventArgs.
            The DateChanged event in the Calendar and the DateTimeChanged event in DateTimeSelector
            contain the DateChangedEventArgs as a parameter.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DateChangedEventArgs.OldDate">
            <summary>
            Gets the OldDate property of the given DateChangedEventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DateChangedEventArgs.NewDate">
            <summary>
            Gets the NewDate property of the given DateChangedEventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateChangedEventArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates and initializes a new instance of the DateChangedEventArgs class.
            </summary>
            <param name="oldDate">
            Old date when the DateChanged event or DateTimeChanged event triggered.
            </param>
            <param name="newDate">
            New date when the DateChanged event or DateTimeChanged event triggered.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DateTimeFieldType">
            <summary>
            Enumeration for the datetime field types for DateTimeSelector.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.DateTimeFieldType.Year">
            <summary>
            Indicates the Year field.
            </summary>
        </member>
        <member name="F:ElmSharp.DateTimeFieldType.Month">
            <summary>
            Indicates the Month field.
            </summary>
        </member>
        <member name="F:ElmSharp.DateTimeFieldType.Date">
            <summary>
            Indicates the Date field.
            </summary>
        </member>
        <member name="F:ElmSharp.DateTimeFieldType.Hour">
            <summary>
            Indicates the Hour field.
            </summary>
        </member>
        <member name="F:ElmSharp.DateTimeFieldType.Minute">
            <summary>
            Indicates the Minute field.
            </summary>
        </member>
        <member name="F:ElmSharp.DateTimeFieldType.AmPm">
            <summary>
            Indicates the AM/PM field.
            </summary>
        </member>
        <member name="T:ElmSharp.DateTimeSelector">
            <summary>
            It inherits <see cref="T:ElmSharp.Layout"/>.
            The DateTimeSelector is a widget to display and input the date &amp; time values.
            This widget displays the date and time as per the system's locale settings
            (Date includes Day, Month &amp; Year) along with the defined separators and time including hour, minute &amp; AM/PM fields. Separator for the AM/PM field is ignored.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the DateTimeSelector class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the DateTimeSelector
             as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.#ctor">
            <summary>
            Creates and initializes a new instance of the DateTimeSelector class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.DateTimeSelector.DateTimeChanged">
            <summary>
            ItemSelected is raised when the DateTime field value is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DateTimeSelector.Format">
            <summary>
            Gets or sets the datetime format.
            </summary>
            <remarks>
            Format is a combination of the allowed LIBC date format specifiers like: "%b %d, %Y %I : %M %p".
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DateTimeSelector.MaximumDateTime">
            <summary>
            Gets or sets the upper boundary of the DateTime field.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DateTimeSelector.MinimumDateTime">
            <summary>
            Gets or sets the lower boundary of the DateTime field.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DateTimeSelector.DateTime">
            <summary>
            Gets or sets the current value of the DateTime field.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.IsFieldVisible(ElmSharp.DateTimeFieldType)">
            <summary>
            Gets whether a field can be visible.
            </summary>
            <param name="type">Enumeration for <see cref="T:ElmSharp.DateTimeFieldType"/>.</param>
            <returns>
            The field is visible or not.
            Type is bool. If visible, return true.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.SetFieldLimit(ElmSharp.DateTimeFieldType,System.Int32,System.Int32)">
            <summary>
            Sets the field limits of a field.
            </summary>
            <param name="type">Enumeration for <see cref="T:ElmSharp.DateTimeFieldType"/>.</param>
            <param name="minimum">The minimum limit.</param>
            <param name="maximum">The maximum limit.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.SetFieldVisible(ElmSharp.DateTimeFieldType,System.Boolean)">
            <summary>
            Gets whether a field can be visible.
            </summary>
            <param name="type">Enumeration for <see cref="T:ElmSharp.DateTimeFieldType"/>.</param>
            <param name="visible">When set as true, the field type is visible.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.OnRealized">
            <summary>
            The callback of the Realized event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DateTimeSelector.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DisplayedMonthChangedEventArgs">
            <summary>
            It inherits System.EventArgs.
            The DisplayedMonthChangedEvent in a calendar contains the
            DisplayedMonthChangedEventArgs as a parameter.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DisplayedMonthChangedEventArgs.OldMonth">
            <summary>
            Gets the OldMonth property of the given DisplayedMonthChangedEventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DisplayedMonthChangedEventArgs.NewMonth">
            <summary>
            Gets the NewMonth property of the given DisplayedMonthChangedEventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DisplayedMonthChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new instance of the DisplayedMonthChangedEventArgs class.
            </summary>
            <param name="oldMonth">
            Old month of the date when the DisplayedMonthChangedEvent triggered.
            </param>
            <param name="newMonth">
            New month of the date when the DisplayedMonthChangedEvent triggered.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreAnimator">
            <summary>
            EcoreAnimator is a helper class. It provides the functions to manage animations.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreAnimator.GetCurrentTime">
            <summary>
            Gets the current system time as a floating point value in seconds.
            </summary>
            <returns>Current system time</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreAnimator.AddAnimator(System.Func{System.Boolean})">
            <summary>
            Adds an animator to call <paramref name="handler"/> at every animation tick during the main loop execution.
            </summary>
            <param name="handler">The function to call when it ticks off.</param>
            <returns>A handle to the new animator.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreAnimator.RemoveAnimator(System.IntPtr)">
            <summary>
            Removes the specified animator from the animator list.
            </summary>
            <param name="anim">The specified animator handle.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreEventType">
            <summary>
            The EcoreEventType is a type of EcoreEvent.
            It includes some predefined instance.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.KeyDown">
            <summary>
            Key down Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.KeyUp">
            <summary>
            Key Up Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseButtonDown">
            <summary>
            Mouse Button Down Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseButtonUp">
            <summary>
            Mouse Button Up Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseButtonCancel">
            <summary>
            Mouse Button Cancel Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseMove">
            <summary>
            Mouse Move Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseWheel">
            <summary>
            Mouse Wheel Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseIn">
            <summary>
            Mouse In Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EcoreEventType.MouseOut">
            <summary>
            Mouse Out Ecore event type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEventType.GetValue">
            <summary>
            Gets the value associated with the specified type.
            </summary>
            <returns>The value of type.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreEvent`1">
            <summary>
            The EcoreEvent is a class to help create events that are being notified of events.
            </summary>
            <typeparam name="TEventArgs">Kinds of EventArgs.</typeparam>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreEvent`1.EventInfoParser">
            <summary>
            EventInfoParser delegate of the EcoreEvent class.
            </summary>
            <param name="data">IntPtr</param>
            <param name="type">EcoreEventType</param>
            <param name="info">IntPtr</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEvent`1.#ctor(ElmSharp.EcoreEventType)">
            <summary>
            Creates and initializes a new instance of the EcoreEvent class.
            </summary>
            <param name="type">EcoreEventType</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEvent`1.#ctor(ElmSharp.EcoreEventType,ElmSharp.EcoreEvent{`0}.EventInfoParser)">
            <summary>
            Creates and initializes a new instance of the EcoreEvent class.
            </summary>
            <param name="type">EcoreEventType</param>
            <param name="parser">EventInfoParser</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEvent`1.Finalize">
            <summary>
            Destructor for the EcoreEvent class.
            </summary>
        </member>
        <member name="E:ElmSharp.EcoreEvent`1.On">
            <summary>
            On Event Handler of the EcoreEvent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEvent`1.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed,
            otherwise false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEvent`1.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreEvent">
            <summary>
            The event class for EcoreEvent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreEvent.#ctor(ElmSharp.EcoreEventType)">
            <summary>
            Creates and initializes a new instance of the EcoreEvent class.
            </summary>
            <param name="type">EcoreEventType</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreKeyEventArgs">
            <summary>
            It inherits System.EventArgs.
            The EcoreKeyEventArgs is an EventArgs to record the Ecore event's key name and key code.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EcoreKeyEventArgs.KeyName">
            <summary>
            Gets the KeyName property. The return type is string.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EcoreKeyEventArgs.KeyCode">
            <summary>
            Gets the KeyCode property. The return type is int.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreKeyEventArgs.Create(System.IntPtr,ElmSharp.EcoreEventType,System.IntPtr)">
            <summary>
            Creates and initializes a new instance of the EcoreKeyEventArgs class.
            </summary>
            <param name="data">data</param>
            <param name="type">type</param>
            <param name="info">information</param>
            <returns>New instance of the EcoreKeyEventArgs class.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreMainloop">
            <summary>
            EcoreMainloop is a helper class, which provides the functions relative to Ecore's main loop.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EcoreMainloop.IsMainThread">
            <summary>
            Checks if you are calling this function from the main thread.
            </summary>
            <remarks>True if the calling function is the same thread, false otherwise.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.Begin">
            <summary>
            Runs the application main loop.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.Quit">
            <summary>
            Quits the main loop, once all the events currently on the queue have been processed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.Post(System.Action)">
            <summary>
            Adds an idler handler.
            </summary>
            <param name="task">The action to call when idle.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.PostAndWakeUp(System.Action)">
            <summary>
            Calls the callback asynchronously in the main loop.
            </summary>
            <param name="task">The action wanted to be called.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.Send(System.Action)">
            <summary>
            Calls the callback synchronously in the main loop.
            </summary>
            <param name="task">The action wanted to be called.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.AddTimer(System.Double,System.Func{System.Boolean})">
            <summary>
            Creates a timer to call the given function in the given period of time.
            </summary>
            <param name="interval">The interval in seconds.</param>
            <param name="handler">The given function.</param>
            <returns>A timer object handler on success, or null on failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreMainloop.RemoveTimer(System.IntPtr)">
            <summary>
            Removes the specified timer from the timer list.
            </summary>
            <param name="id">The specified timer handler</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreSynchronizationContext">
            <summary>
            Provides a synchronization context for the EFL application.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreSynchronizationContext.#ctor">
            <summary>
            Initializes a new instance of the EcoreSynchronizationContext class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreSynchronizationContext.Initialize">
            <summary>
            Initilizes a new EcoreSynchronizationContext and installs into the current thread.
            </summary>
            <remarks>
            It is equivalent
            <code>
            SetSynchronizationContext(new EcoreSynchronizationContext());
            </code>
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an asynchronous message to a Ecore main loop.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <remarks>The Post method starts an asynchronous request to post a message.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Dispatches an synchronous message to a Ecore main loop.
            </summary>
            <param name="d">The <see cref="T:System.Threading.SendOrPostCallback"/> delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
            <remarks>
            The Send method starts a synchronous request to send a message.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EcoreTimelineAnimator">
            <summary>
            EcoreTimelineAnimator is a helper class, which provides the functions to manage animations.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EcoreTimelineAnimator.Finished">
            <summary>
            It occurs when the animator is complete.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreTimelineAnimator.#ctor(System.Double,System.Action)">
            <summary>
            Creates and initializes a new instance of the EcoreTimelineAnimator class.
            </summary>
            <param name="runtime">The time to run in seconds.</param>
            <param name="timelineCallback">Functions called at each time line.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EcoreTimelineAnimator.IsRunning">
            <summary>
            Gets whether the animation is running.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EcoreTimelineAnimator.Position">
            <summary>
            Gets the current position of the animation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreTimelineAnimator.Start">
            <summary>
            Starts an animator that runs for a limited time.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreTimelineAnimator.Stop">
            <summary>
            Stops an animator that is running.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreTimelineAnimator.Freeze">
            <summary>
            Suspends the specified animator.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreTimelineAnimator.Thaw">
            <summary>
            Restores execution of the specified animator.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EcoreTimelineAnimator.OnTimeline">
            <summary>
            Callback is called when it ticks off.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EdjeObject">
            <summary>
            The EdjeObject is a class that the evas object exists in.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeObject.Item(System.String)">
            <summary>
            Checks whether an edje part exists in a given edje object's group definition.
            This function returns if a given part exists in the edje group bound to object obj
            </summary>
            <remarks>This call is useful, for example, when one could expect a given GUI element, depending on the theme applied to object.</remarks>
            <param name="part">The part's name to check for existence in object's group.</param>
            <returns>TRUE, if the edje part exists in the object's group, otherwise FALSE.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.EmitSignal(System.String,System.String)">
            <summary>
            Sends or emits an edje signal to a given edje object.
            </summary>
            <param name="emission">The signal's "emission" string</param>
            <param name="source">The signal's "source" string</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.DeleteColorClass(System.String)">
            <summary>
            Deletes the object Color class.
            This function deletes any values at the object level for the specified object and Color class.
            </summary>
            <remarks>Deleting the Color class defined in the theme file.</remarks>
            <param name="part">The Color class to be deleted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.SetColorClass(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the object Color class.
            </summary>
            <param name="colorClass">The Color class name.</param>
            <param name="red">The object red value.</param>
            <param name="green">The object green value.</param>
            <param name="blue">The object blue value.</param>
            <param name="alpha">The object alpha value.</param>
            <param name="outlineRed">The outline red value.</param>
            <param name="outlineGreen">The outline green value.</param>
            <param name="outlineBlue">The outline blue value.</param>
            <param name="outlineAlpha">The outline alpha value.</param>
            <param name="shadowRed">The shadow red value.</param>
            <param name="shadowGreen">The shadow green value.</param>
            <param name="shadowBlue">The shadow blue value.</param>
            <param name="shadowAlpha">The shadow alpha value.</param>
            <returns>True if succeeds, otherwise False.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.GetColorClass(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the object Color class.
            </summary>
            <param name="colorClass">The Color class name.</param>
            <param name="red">The object red value.</param>
            <param name="green">The object green value.</param>
            <param name="blue">The object blue value.</param>
            <param name="alpha">The object alpha value.</param>
            <param name="outlineRed">The outline red value.</param>
            <param name="outlineGreen">The outline green value.</param>
            <param name="outlineBlue">The outline blue value.</param>
            <param name="outlineAlpha">The outline alpha value.</param>
            <param name="shadowRed">The shadow red value.</param>
            <param name="shadowGreen">The shadow green value.</param>
            <param name="shadowBlue">The shadow blue value.</param>
            <param name="shadowAlpha">The shadow alpha value.</param>
            <returns>True if succeeds, otherwise False.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.SetTextClass(System.String,System.String,System.Int32)">
            <summary>
            Sets the Edje text class.
            </summary>
            <param name="textClass">The text class name.</param>
            <param name="font">Font name.</param>
            <param name="fontSize">Font size.</param>
            <returns>True if succeeds, otherwise False.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.GetTextClass(System.String,System.String@,System.Int32@)">
            <summary>
            Gets the Edje text class.
            </summary>
            <param name="textClass">The text class name.</param>
            <param name="font">Font name.</param>
            <param name="fontSize">Font size.</param>
            <returns>True if succeeds, otherwise False.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.AddSignalAction(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
            Adds Action for an arriving edje signal, emitted by a given Ejde object.
            </summary>
            <param name="emission">The signal's "emission" string.</param>
            <param name="source">The signal's "source" string.</param>
            <param name="action">The action to be executed when the signal is emitted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EdjeObject.DeleteSignalAction(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
            Deletes a signal-triggered action from an object.
            </summary>
            <param name="emission">The signal's "emission" string.</param>
            <param name="source">The signal's "source" string.</param>
            <param name="action">The action to be executed when the signal is emitted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EdjeTextPartObject">
            <summary>
            The EdjeTextPartObject is a class dealing with parts of type text.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeTextPartObject.Name">
            <summary>
            Gets the name of the EdjeTextPartObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeTextPartObject.Text">
            <summary>
            Gets or sets the text for an object part.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeTextPartObject.TextStyle">
            <summary>
            Sets or gets the style of the object part.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeTextPartObject.Geometry">
            <summary>
            Gets the geometry of a given edje part, in a given edje object's group definition, relative to the object's area.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeTextPartObject.TextBlockNativeSize">
            <summary>
            Gets the native width and height.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EdjeTextPartObject.TextBlockFormattedSize">
            <summary>
            Gets the formatted width and height.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EffectBase">
            <summary>
            The EffectBase class for TransitEffect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EffectBase.EffectEnded">
            <summary>
            EffectEnded event will be triggered when the effect has ended.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FocusAutoScrollMode">
            <summary>
            Focus Autoscroll mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.FocusAutoScrollMode.Show">
            <summary>
            Directly show the focused region or item automatically.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusAutoScrollMode.None">
            <summary>
            Do not show the focused region or item automatically.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusAutoScrollMode.BringIn">
            <summary>
            Bring in the focused region or item automatically, which might involve the scrolling.
            </summary>
        </member>
        <member name="T:ElmSharp.Elementary">
            <summary>
            The Elementary is a general elementary, a VERY SIMPLE toolkit.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Elementary.EvasObjectRealized">
            <summary>
            EvasObjectRealized will be triggered when the EvasObject is realized.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Elementary.ItemObjectRealized">
            <summary>
            ItemObjectRealized will be triggered when the ItemObject is realized.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.FingerSize">
            <summary>
            Gets or sets the configured finger size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.IsFocusHighlightAnimation">
            <summary>
            Gets or sets the enable status of the focus highlight animation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.IsMirrored">
            <summary>
            Gets or sets the system mirrored mode.
            This determines the default mirrored mode of widgets.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.CanFocusHighlight">
            <summary>
            Gets or sets the enable status of the focus highlight.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.AppBaseScale">
            <summary>
            Gets or sets the base scale of the application.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.Scale">
            <summary>
            Gets or sets the global scaling factor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.BringInScrollFriction">
            <summary>
            Gets or sets the amount of inertia, a scroller imposes during a region to bring animations.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Elementary.FocusAutoScrollMode">
            <summary>
            Gets or sets the focus on autoscroll mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.Initialize">
            <summary>
            Initializes Elementary.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.Shutdown">
            <summary>
            Shuts down Elementary.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.Run">
            <summary>
            Runs the elementary's main loop.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.ThemeOverlay">
            <summary>
            Prepends a theme overlay to the list of overlays.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.AddThemeOverlay(System.String)">
            <summary>
            Prepends a theme overlay to the list of overlays.
            </summary>
            <param name="filePath">The edje file path to be used.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.DeleteThemeOverlay(System.String)">
            <summary>
            Deletes a theme overlay from the list of overlays.
            </summary>
            <param name="filePath">The name of the theme overlay.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.FreeTheme">
            <summary>
            Frees a theme.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.SetTheme(System.String)">
            <summary>
            Sets the theme search order for the given theme.
            </summary>
            <param name="theme">Theme search string.</param>
            <remarks>This sets the search string for the theme in path-notation from the first theme to search, to last, delimited by the : character. For example, "shiny:/path/to/file.edj:default".</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.FlushTheme">
            <summary>
            Flushes the current theme.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.FlushAllThemes">
            <summary>
            This flushes all the themes (default and specific ones).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.DeleteThemeExtention(System.String)">
            <summary>
            Deletes a theme extension from the list of extensions.
            </summary>
            <param name="item">The name of the theme extension.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.GetSystemScrollFriction">
            <summary>
            Gets the amount of inertia that a scroller imposes during region to bring animations.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.SetSystemScrollFriction(System.Double)">
            <summary>
            Sets the amount of inertia that a scroller imposes during the region bring animations.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.GetProfile">
            <summary>
            Gets the elementary's profile in use.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.SetScale(System.Double)">
            <summary>
            Sets the global scaling factor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.GetScale">
            <summary>
            Gets the global scaling factor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.FlushAllCashe">
            <summary>
            Use FlushAllCache instead.
            </summary>
        </member>
        <member name="M:ElmSharp.Elementary.FlushAllCache">
            <summary>
            Flushes all the cache.
            Frees all data that was in cache and is not currently being used, to reduce memory usage. This frees Edje's, Evas', and Eet's cache.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.SetLanguage(System.String)">
            <summary>
            Changes the language of the current application.
            </summary>
            <param name="language">The language to set must be the full name of the locale.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.SetPolicy(System.UInt32,System.Int32)">
            <summary>
            Sets a new policy's value (for a given policy group/identifier).
            </summary>
            <param name="policy">The policy identifier.</param>
            <param name="value">The policy value, which depends on the identifier.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.ReloadConfig">
            <summary>
            Reloads the elementary's configuration, bounded to the current selected profile.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Elementary.FlushAllConfig">
            <summary>
            Flushes all the configuration settings, and then applies those settings to all applications using elementary on the current display.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ElmScrollConfig">
            <summary>
            The ElmScrollConfig is a scrollable views's configuration.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ElmScrollConfig.BringInScrollFriction">
            <summary>
            Gets or sets the amount of inertia that a scroller imposes during the region to bring animations.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.InputPanelLayout">
            <summary>
            Enumeration for describing the InputPanel layout types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Normal">
            <summary>
            The InputPanel layout type default.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Number">
            <summary>
            The InputPanel layout type number.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Email">
            <summary>
            The InputPanel layout type email.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Url">
            <summary>
            The InputPanel layout type URL.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.PhoneNumber">
            <summary>
            The InputPanel layout type phone.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Ip">
            <summary>
            The InputPanel layout type IP.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Month">
            <summary>
            The InputPanel layout type month.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.NumberOnly">
            <summary>
            The InputPanel layout type number.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Invalid">
            <summary>
            The InputPanel layout type error type. Do not use it directly!
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Hex">
            <summary>
            The InputPanel layout type hexadecimal.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Terminal">
            <summary>
            The InputPanel layout type terminal type: Esc, Alt, Ctrl, etc.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Password">
            <summary>
            The InputPanel layout type password.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.DateTime">
            <summary>
            The keyboard layout type date and time.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLayout.Emoticon">
            <summary>
            The InputPanel layout type emoticons.
            </summary>
        </member>
        <member name="T:ElmSharp.InputPanelReturnKeyType">
            <summary>
            Enumeration for defining the "Return" key types on the input panel (virtual keyboard).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Default">
            <summary>
            The Default key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Done">
            <summary>
            The Done key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Go">
            <summary>
            The Go key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Join">
            <summary>
            The Join key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Login">
            <summary>
            The Login key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Next">
            <summary>
            The Next key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Search">
            <summary>
            The Search string or magnifier icon key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Send">
            <summary>
            The Send key type.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelReturnKeyType.Signin">
            <summary>
            The Sign-in key type.
            </summary>
        </member>
        <member name="T:ElmSharp.AutoCapital">
            <summary>
            Enumeration for defining the autocapitalization types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.AutoCapital.None">
            <summary>
            No autocapitalization when typing.
            </summary>
        </member>
        <member name="F:ElmSharp.AutoCapital.Word">
            <summary>
            Autocapitalize each of the typed word.
            </summary>
        </member>
        <member name="F:ElmSharp.AutoCapital.Sentence">
            <summary>
            Autocapitalize the start of each sentence.
            </summary>
        </member>
        <member name="F:ElmSharp.AutoCapital.All">
            <summary>
            Autocapitalize all the letters.
            </summary>
        </member>
        <member name="T:ElmSharp.CopyAndPasteMode">
            <summary>
            Enumeration for defining the entry's copy and paste policy.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.CopyAndPasteMode.Markup">
            <summary>
            Copy and paste text with a markup tag.
            </summary>
        </member>
        <member name="F:ElmSharp.CopyAndPasteMode.NoImage">
            <summary>
            Copy and paste text without an item (image) tag.
            </summary>
        </member>
        <member name="F:ElmSharp.CopyAndPasteMode.PlainText">
            <summary>
            Copy and paste text without a markup tag.
            </summary>
        </member>
        <member name="T:ElmSharp.TextFormat">
            <summary>
            Enumeration for the text format types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.TextFormat.Plain">
            <summary>
            Plain type.
            </summary>
        </member>
        <member name="F:ElmSharp.TextFormat.Markup">
            <summary>
            Markup type.
            </summary>
        </member>
        <member name="T:ElmSharp.InputHints">
            <summary>
            Enumeration that defines the types of Input Hints.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputHints.None">
            <summary>
            No active hints.
            </summary>
        </member>
        <member name="F:ElmSharp.InputHints.AutoComplete">
            <summary>
            Suggest word auto-completion.
            </summary>
        </member>
        <member name="F:ElmSharp.InputHints.SensitiveData">
            <summary>
            The typed text should not be stored.
            </summary>
        </member>
        <member name="T:ElmSharp.InputPanelLanguage">
            <summary>
            Enumeration for defining the input panel (virtual keyboard) language modes.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputPanelLanguage.Automatic">
            <summary>
            Automatic language mode.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPanelLanguage.Alphabet">
            <summary>
            Alphabet language mode.
            </summary>
        </member>
        <member name="T:ElmSharp.Entry">
            <summary>
            The Entry is a convenience widget that shows a box in which the user can enter text.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Entry class.
            </summary>
            <param name="parent">The EvasObject to which the new Entry will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Entry.Activated">
            <summary>
            Activated will be triggered when the entry is activated.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Entry.Clicked">
            <summary>
            Clicked will be triggered when the entry is clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Entry.ChangedByUser">
            <summary>
            ChangedByUser will be triggered when the entry is changed by user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Entry.CursorChanged">
            <summary>
            CursorChanged will be triggered when the cursor in the entry is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsSingleLine">
            <summary>
            Sets or gets the entry to the single line mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsPassword">
            <summary>
            Sets or gets the entry to the password mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsEditable">
            <summary>
            Sets or gets whether the entry is editable.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsEmpty">
            <summary>
            Sets or gets whether the entry is empty.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.Text">
            <summary>
            Sets or gets the text currently shown in the object entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.TextStyle">
            <summary>
            Sets or gets the style on top of the user style stack.
            </summary>
            <remarks>If there are styles in the user style stack, the properties in the top style of the user style stack will replace the properties in current theme. The input style is specified in the format, tag='property=value' (i.e., DEFAULT='font=Sans font_size=60'hilight=' + font_weight=Bold').</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.CursorPosition">
            <summary>
            Sets or gets the current position of the cursor in the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.Scrollable">
            <summary>
            Sets or gets the scrollable state of the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.AutoCapital">
            <summary>
            Sets or gets the autocapitalization type on the immodule.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsAutoSave">
            <summary>
            Sets or gets the entry object's 'autosave' status.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.CopyAndPasteMode">
            <summary>
            Sets or gets the entry text paste/drop mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.CursorGeometry">
            <summary>
            Gets the geometry of the cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsCursorFormat">
            <summary>
            Gets whether a format node exists at the current cursor position.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.IsCursorVisibelFormat">
            <summary>
            Gets if the current cursor position holds a visible format node.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.InputHint">
            <summary>
            Sets or gets the value of the input hint.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.InputPanelLanguage">
            <summary>
             Sets or gets the language mode of the input panel.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.InputPanelVariation">
            <summary>
            Sets or gets the input panel layout variation of the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.LineWrapType">
            <summary>
            Sets or gets the line wrap type to use on multiline entries.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.PredictionAllowed">
            <summary>
            Sets or gets whether the entry should allow to use the text prediction.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.InputPanelReturnKeyDisabled">
            <summary>
            Sets or gets whether the return key on the input panel should be disabled or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.InputPanelShowByOnDemand">
            <summary>
            Sets or gets the attribute to show the input panel, in case of only an user's explicit Mouse Up event.
            It doesn't request to show the input panel even though it has focus.
            If true, the input panel will be shown only in case of the Mouse up event (Focus event will be ignored).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetFile(System.String,ElmSharp.TextFormat)">
            <summary>
            Sets the file (and implicitly loads it) for the text to display and then edit.
            </summary>
            <param name="file">The path to the file to load and save.</param>
            <param name="textFormat">The file format.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.ConvertMarkupToUtf8(System.String)">
            <summary>
            Converts a markup (HTML-like) string into UTF-8.
            </summary>
            <param name="markup">The string (in markup) to be converted.</param>
            <returns>The converted string (in UTF-8).</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorNext">
            <summary>
            Moves the cursor by one position to the right within the entry.
            </summary>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorPrev">
            <summary>
            Moves the cursor one place to the left within the entry.
            </summary>
            <returns>TRUE on success, otherwise FALSE on failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorUp">
            <summary>
            Moves the cursor one line up within the entry.
            </summary>
            <returns>TRUE on success, otherwise FALSE on failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorDown">
            <summary>
            Moves the cursor one line down within the entry.
            </summary>
            <returns>TRUE on success, otherwise FALSE on failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorBegin">
            <summary>
            Moves the cursor to the beginning of the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorEnd">
            <summary>
            Moves the cursor to the end of the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorLineBegin">
            <summary>
            Moves the cursor to the beginning of the current line.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.MoveCursorLineEnd">
            <summary>
            Moves the cursor to the end of the current line.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetInputPanelLayout(ElmSharp.InputPanelLayout)">
            <summary>
            Sets the input panel layout of the entry.
            </summary>
            <param name="layout">The layout type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetInputPanelEnabled(System.Boolean)">
            <summary>
            Sets the attribute to show the input panel automatically.
            </summary>
            <param name="enabled">If true, the input panel appears when the entry is clicked or has focus, otherwise false.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetInputPanelReturnKeyType(ElmSharp.InputPanelReturnKeyType)">
            <summary>
            Sets the "return" key type. This type is used to set the string or icon on the "return" key of the input panel.
            </summary>
            <param name="keyType">The type of "return" key on the input panel.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.HideInputPanel">
            <summary>
            Hides the input panel (virtual keyboard).
            </summary>
            <remarks>
            Note that the input panel is shown or hidden automatically according to the focus state of the entry widget.
            This API can be used in case of manually controlling by using SetInputPanelEnabled(false).
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SelectAll">
            <summary>
            Selects all the text within the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SelectNone">
            <summary>
            Drops any existing text selection within the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.ForceCalculation">
            <summary>
            Forces calculation of the entry size and text layout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.GetCursorContent">
            <summary>
            Gets the string by the cursor at its current position.
            </summary>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.BeginCursorSelection">
            <summary>
            Begins a selection within the entry, as though the user was holding down the mouse button to make a selection.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.AppendText(System.String)">
            <summary>
            Appends the text of the entry.
            </summary>
            <param name="text">The text to be displayed.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.HorizontalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of the HorizontalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means that the horizontal scrollbar is made visible if it is needed, or otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.VerticalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of VerticalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means that the vertical scrollbar is made visible if it is needed, or otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.VerticalBounce">
            <summary>
            Sets or gets the vertical bounce behavior.
            When scrolling, the scroller may "bounce" when reaching an edge of the content object.
            This is a visual way to indicate that the end has reached.
            This is enabled by default for both the axis.
            This API will be set if it is enabled for the given axis with boolean parameters for each axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Entry.HorizontalBounce">
            <summary>
            Sets or gets the horizontal bounce behavior.
            When scrolling, the scroller may "bounce" when reaching an edge of the content object.
            This is a visual way to indicate that the end has reached.
            This is enabled by default for both the axis.
            This API will be set if it is enabled for the given axis with boolean parameters for each axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.InsertTextToCursor(System.String)">
            <summary>
            Inserts the given text into the entry at the current cursor position.
            </summary>
            <param name="text">The text to be inserted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.EndCursorSelection">
            <summary>
            Ends a selection within the entry as though the user had just released the mouse button while making a selection.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SaveFile">
            <summary>
            Writes any changes made to the file that is set by a file.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.ShowInputPanel">
            <summary>
            Show the input panel (virtual keyboard) based on the input panel property of the entry such as layout, autocapital types, and so on.
            </summary>
            <remarks>
            Note that the input panel is shown or hidden automatically according to the focus state of the entry widget.
            This API can be used in the case of manual control by using the SetInputPanelEnabled(false).
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.AppendItemProvider(System.Func{System.String,ElmSharp.EvasObject})">
            <summary>
            This appends a custom item provider to the list for that entry.
            </summary>
            <param name="func">This function is used to provide items.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.PrependItemProvider(System.Func{System.String,ElmSharp.EvasObject})">
            <summary>
            This prepends a custom item provider to the list for that entry.
            </summary>
            <param name="func">This function is used to provide items.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.RemoveItemProvider(System.Func{System.String,ElmSharp.EvasObject})">
            <summary>
            This removes a custom item provider to the list for that entry.
            </summary>
            <param name="func">This function is used to provide items.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.AppendMarkUpFilter(System.Func{ElmSharp.Entry,System.String,System.String})">
            <summary>
            Appends a markup filter function for text inserted in the entry.
            </summary>
            <param name="filter">This function type is used by entry filters to modify text.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.PrependMarkUpFilter(System.Func{ElmSharp.Entry,System.String,System.String})">
            <summary>
            Prepends a markup filter function for text inserted in the entry.
            </summary>
            <param name="filter">This function type is used by entry filters to modify text.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.RemoveMarkUpFilter(System.Func{ElmSharp.Entry,System.String,System.String})">
            <summary>
            Removes a markup filter.
            </summary>
            <param name="filter">This function type is used by entry filters to modify text.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.CopySelection">
            <summary>
            This executes a "copy" action on the selected text in the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.CutSelection">
            <summary>
            This executes a "cut" action on the selected text in the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.PasteSelection">
            <summary>
            This executes a "paste" action in the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.DisableSelection(System.Boolean)">
            <summary>
            This disables the entry's selection handlers.
            This works properly on the profile that provides selection handlers.
            </summary>
            <param name="disable">If true, the selection handlers are disabled.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.GetSelection">
            <summary>
            Gets any selected text within the entry.
            </summary>
            <returns>Selection's value.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetSelectionRegion(System.Int32,System.Int32)">
            <summary>
            This selects a region of text within the entry.
            </summary>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetIconVisible(System.Boolean)">
            <summary>
            Sets the visibility of the left-side widget of the entry.
            </summary>
            <param name="isDisplay">true if the object should be displayed, otherwise false.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.SetInputPanelReturnKeyAutoEnable(System.Boolean)">
            <summary>
            Sets whether the return key on the input panel is disabled automatically, when the entry has no text.
            </summary>
            <param name="enable">If enabled is true, the return key is automatically disabled when the entry has no text.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Entry.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasCanvas">
            <summary>
            Low-level Evas canvas functions. Subgroups will be present more than the high-level ones, though.
            Most of these functions deal with low-level Evas actions like:
            create/destroy raw canvases, not bound to any displaying engine.
            tell a canvas, I got focused (in a windowing context, for example).
            tell a canvas, a region should not be calculated anymore in rendering.
            tell a canvas, to render its contents immediately.
            Most users will be using Evas by means of the Ecore_Evas wrapper, which deals with all the above mentioned issues automatically for them. Thus, you will be looking at this section only if you're building low-level stuff.
            The groups within, present you functions that deal with the canvas directly too, and not yet with its objects. They are the functions you need to use at a minimum to get a working canvas.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasCanvas.Pointer">
            <summary>
            Gets the current known default pointer coordinates.
            This function returns the current known canvas unit coordinates of the mouse pointer.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasCanvas.ImageCacheSize">
            <summary>
            Gets or sets the image cache.
            This function returns the image cache size of the canvas in bytes.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.FlushImageCache">
            <summary>
            Flushes the image cache of the canvas.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.AddDamageRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a damage rectangle.
            </summary>
            <param name="x">The rectangle's top left corner's horizontal coordinate.</param>
            <param name="y">The rectangle's top left corner's vertical coordinate.</param>
            <param name="width">The rectangle's width.</param>
            <param name="height">The rectangle's height.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.AddObscuredRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an "obscured region" to an Evas canvas.
            </summary>
            <param name="x">The rectangle's top left corner's horizontal coordinate.</param>
            <param name="y">The rectangle's top left corner's vertical coordinate.</param>
            <param name="width">The rectangle's width.</param>
            <param name="height">The rectangle's height.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.ClearObscuredRectangle">
            <summary>
            Removes all the "obscured regions" from an Evas canvas.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.AddEventAction(ElmSharp.EvasObjectCallbackType,System.Action)">
            <summary>
            Adds or registers an event to a given canvas event.
            </summary>
            <param name="type">The type of event that triggers.</param>
            <param name="action">The action to be called when the event is triggered.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.DeleteEventAction(ElmSharp.EvasObjectCallbackType,System.Action)">
            <summary>
            Deletes an event to a given canvas event.
            </summary>
            <param name="type">The type of event that triggers.</param>
            <param name="action">The action to be called when the event is triggered</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasCanvas.CreateHandle(System.IntPtr)">
            <summary>
            Creates an Evas canvas handle.
            </summary>
            <param name="evasObject">EvasObject</param>
            <returns>Handle IntPtr.</returns>
        </member>
        <member name="M:ElmSharp.EvasCanvas.EventData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise false.
            </returns>
        </member>
        <member name="T:ElmSharp.EvasImage">
            <summary>
            This group provides the functions for image objects.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the EvasImage class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by EvasImage as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.File">
            <summary>
            Sets or gets the source file from where an image object must fetch the real image data.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.IsSourceVisible">
            <summary>
            Sets or gets the source object to be visible.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.IsSourceClipped">
            <summary>
            Sets or gets whether an object is clipped by the source object's clipper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.BorderCenterFillMode">
            <summary>
            Sets or gets if the center part of the given image object (not the border) should be drawn.
            </summary>
            <remarks>
            When rendering, the image may be scaled to fit the size of the image object.
            This function sets if the center part of the scaled image is to be drawn or left completely blank, or forced to be solid.
            Very useful for frames and decorations.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.IsFilled">
            <summary>
            Sets or gets whether the image object's fill property should track the object's size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.BorderScale">
            <summary>
            Sets or gets the scaling factor (multiplier) for the borders of the image object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.Size">
            <summary>
            Sets or gets the size of the given image object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.Stride">
            <summary>
            Gets the row stride of the given image object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.IsOpaque">
            <summary>
            Sets or gets whether the alpha channel data is being used on the given image object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasImage.IsSmoothScaled">
            <summary>
            Sets or gets whether to use a high-quality image scaling algorithm on the given image object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.SetFill(ElmSharp.Rect)">
            <summary>
            Sets how to fill an image object's drawing rectangle given the (real) image bound to it.
            </summary>
            <param name="geometry">The rectangle of the given image object that the image will be drawn to.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.SetFile(System.String,System.String)">
            <summary>
            Sets the source file from where an image object must fetch the real image data (it may be an Eet file, besides pure image ones).
            </summary>
            <param name="file">The image file path.</param>
            <param name="key">The image key in file (if its an Eet one), otherwise set null.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.SetStream(System.IO.Stream)">
            <summary>
            Sets the data for an image from the memory to be loaded.
            </summary>
            <param name="stream">memory stream</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.SetSource(ElmSharp.EvasObject)">
            <summary>
            Sets the source object on an image object to be used as a proxy.
            </summary>
            <param name="source">The proxy (image) object.</param>
            <returns>true if the source object is set successfully, otherwise false on error.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.SetNativeSurface(System.IntPtr)">
            <summary>
            Set the native surface of a given image of the canvas.
            </summary>
            <param name="surface">The surface.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.SetBorder(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions for an image object's border, a region which is not scaled together with its center ever.
            </summary>
            <param name="left">The border's left width.</param>
            <param name="right">The border's right width.</param>
            <param name="top">The border's top width.</param>
            <param name="bottom">The border's bottom width.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasImage.Save(System.String,System.String,System.String)">
             <summary>
             Save the given image object's contents to an (image) file.
            
             The extension suffix on file will determine which saver module Evas is to use when saving, thus the final file's format. If the file supports multiple data stored in it (Eet ones), you can specify the key to be used as the index of the image in it.
            
             You can specify some flags when saving the image.Currently acceptable flags are quality and compress.Eg.: "quality=100 compress=9" 
             </summary>
             <param name="file">The filename to be used to save the image (extension obligatory).</param>
             <param name="key">The image key in the file (if an Eet one), or null, otherwise.</param>
             <param name="flags">String containing the flags to be used (null for none).</param>
        </member>
        <member name="M:ElmSharp.EvasImage.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Sets the content at a part of a given container widget.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the image as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <returns>The new object, otherwise null if it cannot be created.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasKeyEventArgs">
            <summary>
            The EvasKeyEventArgs is a EvasKey EventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.PlatformBackButtonName">
            <summary>
            BackButton name in platform.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.PlatformMenuButtonName">
            <summary>
            MenuButton name in platform.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.PlatformHomeButtonName">
            <summary>
            HomeButton name in platform.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasKeyEventArgs.KeyName">
            <summary>
            Gets the name of the key.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasKeyEventArgs.Flags">
            <summary>
            Sets or gets the flags.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasKeyEventArgs.Create(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates and initializes a new instance of the EvasKeyEventArgs class.
            </summary>
            <param name="data">The data information.</param>
            <param name="obj">The object.</param>
            <param name="info">The information.</param>
            <returns>EvasKey eventArgs.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown">
            <summary>
            Event structure for Key Down event callbacks.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.keyname">
            <summary>
            Name string of the key pressed.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.data">
            <summary>
            Data to be passed to the event.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.modifiers">
            <summary>
            Modifier keys pressed during the event.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.locks">
            <summary>
            Locks information.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.key">
            <summary>
            Logical key: (example, shift+1 == exclamation).
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.str">
            <summary>
            UTF-8 string, if this keystroke has produced a visible string to be added.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.compose">
            <summary>
            UTF-8 string, if this keystroke has modified a string in the middle of being composed - this string replaces the previous one.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.event_flags">
            <summary>
            Event_flags.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.dev">
             <summary>
            
             </summary>
        </member>
        <member name="F:ElmSharp.EvasKeyEventArgs.EvasEventKeyDown.keycode">
            <summary>
            Keycode.
            </summary>
        </member>
        <member name="T:ElmSharp.EvasEventFlag">
            <summary>
            Flags for the events.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EvasEventFlag.None">
            <summary>
            No fancy flags set.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasEventFlag.OnHold">
            <summary>
            This event is being delivered but should be put "on hold" until the on hold flag is unset. The event should be used for informational purposes and maybe some indications visually, but not actually perform anything.
            </summary>
        </member>
        <member name="T:ElmSharp.EvasMap">
            <summary>
            The EvasMap is an opaque handle to map points.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.#ctor(System.Int32)">
            <summary>
            Creates and initializes a new instance of the EvasMap class.
            </summary>
            <param name="count">The number of points in the map</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.Finalize">
            <summary>
            Destructor for the EvasMap class.
            </summary>
        </member>
        <member name="P:ElmSharp.EvasMap.IsMoveSync">
            <summary>
            Gets or sets the flag of the object to move synchronization for map rendering.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.PopulatePoints(ElmSharp.EvasObject)">
            <summary>
            Populates the source and destination map points to exactly match the object.
            </summary>
            <param name="obj">The object to use unmapped geometry to populate the map coordinates.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.PopulatePoints(ElmSharp.EvasObject,System.Int32)">
            <summary>
            Populates the source and destination map points to exactly match the object.
            </summary>
            <param name="obj">The object to use unmapped geometry to populate the map coordinates.</param>
            <param name="z">
            The point Z-coordinate hint (pre-perspective transform). This value is used for all the four points.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.PopulatePoints(ElmSharp.Rect,System.Int32)">
            <summary>
            Populates the source and destination map points to match the given geometry.
            </summary>
            <param name="geometry">The geometry value contains X-coordinate, Y-coordinate, the width and height to use, to calculate the second and third points.</param>
            <param name="z">The Z-coordinate hint (pre-perspective transform) This value is used for all the four points.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.Rotate(System.Double,System.Int32,System.Int32)">
            <summary>
            Rotates the map.
            </summary>
            <param name="degrees">The abount of degrees from 0.0 to 360.0 to rotate.</param>
            <param name="cx">The rotation's center horizontal position.</param>
            <param name="cy">The rotation's center vertical position.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.Rotate3D(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rotates the map around 3 axes in 3D.
            </summary>
            <param name="dx">The amount of degrees from 0.0 to 360.0 to rotate around the X-axis.</param>
            <param name="dy">The amount of degrees from 0.0 to 360.0 to rotate around the Y-axis.</param>
            <param name="dz">The amount of degrees from 0.0 to 360.0 to rotate around the Z-axis.</param>
            <param name="cx">The rotation's center horizontal position.</param>
            <param name="cy">The rotation's center vertical position.</param>
            <param name="cz">The rotation's center depth position.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.SetPointCoordinate(System.Int32,ElmSharp.Point3D)">
            <summary>
            Changes the map point's coordinate.
            </summary>
            <param name="idx">The index of point to change, this must be smaller than the map size.</param>
            <param name="point">The 3D point coordinate.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.GetPointCoordinate(System.Int32)">
            <summary>
            Gets the map point's coordinate.
            </summary>
            <param name="idx">The index of point to change, this must be smaller than the map size.</param>
            <returns>The coordinates of a given point in the map.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasMap.Zoom(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Changes the map to apply the given zooming.
            </summary>
            <param name="x">The horizontal zoom to use.</param>
            <param name="y">The vertical zoom to use.</param>
            <param name="cx">The zooming center horizontal position.</param>
            <param name="cy">The zooming center vertical position.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.TooltipOrientation">
            <summary>
            Enumeration for the Tooltip orientation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.None">
            <summary>
            Default value. Tooltip moves with a mouse pointer.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.TopLeft">
            <summary>
            Tooltip should appear to the top left of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.Top">
            <summary>
            Tooltip should appear to the left of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.TopRight">
            <summary>
            Tooltip should appear to the top right of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.Left">
            <summary>
            Tooltip should appear to the left of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.Center">
            <summary>
            Tooltip should appear to the center of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.Right">
            <summary>
            Tooltip should appear to the right of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.BottomLeft">
            <summary>
            Tooltip should appear to the bottom left of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.Bottom">
            <summary>
            Tooltip should appear to the bottom of the parent.
            </summary>
        </member>
        <member name="F:ElmSharp.TooltipOrientation.BottomRight">
            <summary>
            Tooltip should appear to the bottom right of the parent.
            </summary>
        </member>
        <member name="T:ElmSharp.AspectControl">
            <summary>
            Enumeration for the aspect control.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.AspectControl.None">
            <summary>
            Preference on the scaling unset.
            </summary>
        </member>
        <member name="F:ElmSharp.AspectControl.Neither">
            <summary>
            Same effect as the unset preference on the scaling.
            </summary>
        </member>
        <member name="F:ElmSharp.AspectControl.Horizontal">
            <summary>
            Use all horizontal container space to place an object using the given aspect.
            </summary>
        </member>
        <member name="F:ElmSharp.AspectControl.Vertical">
            <summary>
            Use all vertical container space to place an object using the given aspect.
            </summary>
        </member>
        <member name="F:ElmSharp.AspectControl.Both">
            <summary>
            Use all horizontal @b and vertical container spaces to place an object (never growing it out of those bounds), using the given aspect.
            </summary>
        </member>
        <member name="T:ElmSharp.RenderOp">
            <summary>
            How the object should be rendered to output.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:ElmSharp.RenderOp.Blend">
            <summary>
            default op: d = d * (1 - sa) + s
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.BlendRel">
            <summary>
            d = d*(1 - sa) + s*da
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.Copy">
            <summary>
            d = s
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.CopyRel">
            <summary>
            d = s*da
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.Add">
            <summary>
            d = d + s
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.AddRel">
            <summary>
            d = d + s*da
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.Sub">
            <summary>
            d = d - s
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.SubRel">
            <summary>
            d = d - s*da
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.Tint">
            <summary>
            d = d*s + d*(1 - sa) + s*(1 - da)
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.TintRel">
            <summary>
            d = d*(1 - sa + s)
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.Mask">
            <summary>
            d = d*sa
            </summary>
        </member>
        <member name="F:ElmSharp.RenderOp.Mul">
            <summary>
            d = d*s
            </summary>
        </member>
        <member name="T:ElmSharp.EvasObject">
            <summary>
            The EvasObject is a base class for other widget classes.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.Handle">
            <summary>
            Sets or gets the handle for EvasObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.Parent">
            <summary>
            Gets the parent object for EvasObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.RealHandle">
            <summary>
            Sets or gets the real handle for EvasObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the EvasObject class with the parent EvasObject class parameter.
            </summary>
            <param name="parent">Parent EvasObject class.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.#ctor">
            <summary>
            Creates and initializes a new instance of the EvasObject class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.Deleted">
            <summary>
            Deleted will be triggered when the widght is deleted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.KeyUp">
            <summary>
            KeyUp will be triggered when the key is loose.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.KeyDown">
            <summary>
            KeyDown will be triggered when the key is pressed down.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.BackButtonPressed">
            <summary>
            BackButtonPressed will be triggered when the Back button is pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.MoreButtonPressed">
            <summary>
            MoreButtonPressed will be triggered when the More button is pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.Moved">
            <summary>
            Moved will be triggered when the widght is moved.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.Resized">
            <summary>
            Resized Event Handler of the current widget's size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.Shown">
            <summary>
            Shown will be triggered when the widget is shown.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.Hidden">
            <summary>
            Hidden will be triggered when the widget is hidden.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.EvasObject.RenderPost">
            <summary>
            RenderPost Event Handler of the current widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasObject.GetTooltipContentDelegate">
            <summary>
            Called when a widget's tooltip is activated and needs content.
            </summary>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.IsRealized">
            <summary>
            Gets a widget's status of realized or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.EvasCanvas">
            <summary>
            Gets EvasCanvas.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.AutomationId">
            <summary>
            Sets of gets a value that allow the automation framework to find and interact with this object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.ClassName">
            <summary>
            Gets the current class's Name.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.WeightX">
            <summary>
            Sets or gets the horizontal pointer hints for an object's weight.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.WeightY">
            <summary>
            Sets or gets the vertical pointer hints for an object's weight.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.AlignmentX">
            <summary>
            Sets or gets the horizontal alignment hint of an object's alignment.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.AlignmentY">
            <summary>
            Sets or gets the vertical alignment hint of an object's alignment.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.MinimumWidth">
            <summary>
            Sets or gets the width hints for an object's minimum size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.MinimumHeight">
            <summary>
            Sets or gets the height hints for an object's minimum size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.IsVisible">
            <summary>
            Gets the visible state of the given Evas object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.Geometry">
            <summary>
            Sets or gets the position and (rectangular) size of the given Evas object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.Color">
            <summary>
            Sets or gets the general or main color of the given Evas object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.IsMapEnabled">
            <summary>
            Sets or gets the map enabled state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.EvasMap">
            <summary>
            Sets or gets the current object's transformation map.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.RepeatEvents">
            <summary>
            Sets or gets whether an object is to repeat events.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.PropagateEvents">
            <summary>
            Sets or gets whether events on a smart object's member should get propagated up to its parent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.PassEvents">
            <summary>
            Sets or gets whether an object is set to pass (ignore) events.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.TooltipStyle">
            <summary>
            Sets or gets the style for this object tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.TooltipOrientation">
            <summary>
            Sets or gets the orientation of tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.TooltipWindowMode">
            <summary>
            Sets or gets size restriction state of an object's tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.TooltipContentDelegate">
            <summary>
            Sets the content to be shown in the tooltip object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.TooltipMoveFreezeCount">
            <summary>
            Gets the movement freeze by 1.
            This gets the movement freeze count by one.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.AllEventsFrozen">
            <summary>
            Sets or gets whether an Evas object is to freeze (discard) events.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.Layer">
            <summary>
            Sets or gets the layer of its canvas that the given object will be part of.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.EvasObject.RenderOperation">
            <summary>
            Sets or gets the render operation to be used for rendering the Evas object.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.SetClip(ElmSharp.EvasObject)">
            <summary>
            Clips one object to another.
            </summary>
            <param name="clip">The object to clip object by.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.SetAlignment(System.Double,System.Double)">
            <summary>
            Sets the hints for an object's alignment.
            </summary>
            <param name="x">The horizontal alignment hint as double value ranging from 0.0 to 1.0. The default alignment hint value is 0.5.</param>
            <param name="y">The vertical alignment hint as double value ranging from 0.0 to 1.0. The default alignment hint value is 0.5.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.SetWeight(System.Double,System.Double)">
            <summary>
            Sets the hints for an object's weight.
            </summary>
            <param name="x">The non-negative double value to be used as horizontal weight hint.</param>
            <param name="y">The non-negative double value to be used as vertical weight hint.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.SetTooltipText(System.String)">
            <summary>
            Sets the text for an object's tooltip.
            </summary>
            <param name="text">The text value to display inside the tooltip.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.UnsetTooltip">
            <summary>
            Unsets an object's tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.PushTooltipMoveFreeze">
            <summary>
            This increments the tooltip movement freeze count by one.
            If the count is more than 0, the tooltip position will be fixed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.PopTooltipMoveFreeze">
            <summary>
            This decrements the tooltip freeze count by one.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.HideTooltip">
            <summary>
            Force hide the tooltip of the object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.ShowTooltip">
            <summary>
            Force show the tooltip of the object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Show">
            <summary>
            Makes the current object visible.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Hide">
            <summary>
            Makes the current object invisible.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Resize(System.Int32,System.Int32)">
            <summary>
            Changes the size of the current object.
            </summary>
            <param name="w">The new width.</param>
            <param name="h">The new height.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Move(System.Int32,System.Int32)">
            <summary>
            Moves the current object to the given location.
            </summary>
            <param name="x">The X position to move the object.</param>
            <param name="y">The Y position to move the object.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Lower">
            <summary>
            Lowers the object to the bottom of its layer.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.op_Implicit(ElmSharp.EvasObject)~System.IntPtr">
            <summary>
            Define the IntPtr operator.
            </summary>
            <param name="obj">Parent object.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.op_Explicit(System.IntPtr)~ElmSharp.EvasObject">
            <summary>
            Define cast to EvasObject operator from IntPtr
            </summary>
            <param name="handle">Native handle to EvasObject</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.KeyGrab(System.String,System.Boolean)">
            <summary>
            Requests the keyname key events to be directed to the current object.
            </summary>
            <param name="keyname">The key to request events for.</param>
            <param name="exclusive">Set TRUE to request that the obj is the only object receiving the keyname events, otherwise set to FALSE.</param>
            <returns>If the call succeeds then true, otherwise false.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.KeyUngrab(System.String)">
            <summary>
            Removes the grab on the keyname key events.
            </summary>
            <param name="keyname">The key the grab is set for.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.MarkChanged">
            <summary>
            Marks the smart object as changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Calculate">
            <summary>
            Calls the calculate smart function immediately.
            This will force immediate calculations needed for renderization of this object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.SetSizeHintAspect(ElmSharp.AspectControl,System.Int32,System.Int32)">
            <summary>
            Sets the hints for an object's aspect ratio.
            </summary>
            <param name="aspect">The policy or type of aspect ratio to apply to an object.</param>
            <param name="w">The integer to be used as aspect width ratio term.</param>
            <param name="h">The integer to be used as aspect height ratio term.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.GetSizeHintAspect(ElmSharp.AspectControl@,System.Int32@,System.Int32@)">
            <summary>
            Gets the hints for an object's aspect ratio.
            </summary>
            <param name="aspect">The policy or type of aspect ratio to apply to an object.</param>
            <param name="w">The integer to be used as aspect width ratio term.</param>
            <param name="h">The integer to be used as aspect height ratio term.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.StackBelow(ElmSharp.EvasObject)">
            <summary>
            Stacks immediately below anchor.
            </summary>
            <param name="anchor">The object below which to stack.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.StackAbove(ElmSharp.EvasObject)">
            <summary>
            Stacks immediately above anchor.
            </summary>
            <param name="anchor">The object above which to stack.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.RaiseTop">
            <summary>
            Raises to the top of its layer.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.GetTextBlockGeometryByLineNumber(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the geometry of a line number.
            </summary>
            <param name="lineNumber">The line number.</param>
            <param name="x">x coordinate of the line.</param>
            <param name="y">y coordinate of the line.</param>
            <param name="w">w coordinate of the line.</param>
            <param name="h">h coordinate of the line.</param>
            <returns>True on success, or False on error.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.OnInvalidate">
            <summary>
            The callback of the Invalidate Event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.OnInstantiated">
            <summary>
            The callback of the Instantiated Event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.OnRealized">
            <summary>
            The callback of the Realized Event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.OnUnrealize">
            <summary>
            The callback of the Unrealize Event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Realize(ElmSharp.EvasObject)">
            <summary>
            For this object bind Parent object.Init handle and all kinds of EvasObjectEvent.
            </summary>
            <param name="parent">Parent object.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObject.Unrealize">
            <summary>
            Removes the current object relationship with others.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.IInvalidatable">
            <summary>
            IInvalidatable is an interface, which can be overrided by its children class.
            Inherits IDisposable.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.IInvalidatable.MakeInvalidate">
            <summary>
            Makes the current instance invalidate.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasObjectCallbackType">
            <summary>
            Enumeration for EvasObjectCallbackType.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MouseIn">
            <summary>
            Mouse In Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MouseOut">
            <summary>
            Mouse Out Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MouseDown">
            <summary>
            Mouse Button Down Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MouseUp">
            <summary>
            Mouse Button Up Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MouseMove">
            <summary>
            Mouse Move Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MouseWheel">
            <summary>
            Mouse Wheel Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MultiDown">
            <summary>
            Multi-touch Down Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MultiUp">
            <summary>
            Multi-touch Up Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.MultiMove">
            <summary>
            Multi-touch Move Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Free">
            <summary>
            Object Being Freed (Called after Del).
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.KeyDown">
            <summary>
            Key Press Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.KeyUp">
            <summary>
            Key Release Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.FocusIn">
            <summary>
            Focus In Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.FocusOut">
            <summary>
            Focus Out Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Show">
            <summary>
            Show Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Hide">
            <summary>
            Hide Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Move">
            <summary>
            Move Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Resize">
            <summary>
            Resize Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Restack">
            <summary>
            Restack Event CallbackType.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Del">
            <summary>
            Object being deleted (called before Free).
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.Hold">
            <summary>
            Hold Event CallbackType, Informational purpose event to indicate something.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.ChangedSizeHints">
            <summary>
            Size hints changed the CallbackType event.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.ImagePreloaded">
            <summary>
            Image has been pre-loaded.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.CanvasFocusIn">
            <summary>
            Canvas got focus as a whole.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.CanvasFocusOut">
            <summary>
            Canvas lost focus as a whole.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.RenderFlushPre">
            <summary>
            Called just before rendering is updated on the canvas target.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.RenderFlushPost">
            <summary>
            Called just after rendering is updated on the canvas target.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.CanvasObjectFocusIn">
            <summary>
            Canvas object got focus.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.CanvasObjectFocusOut">
            <summary>
            Canvas object lost focus.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.ImageUnloaded">
            <summary>
            Image data has been unloaded (by some mechanism in Evas that throw out the original image data).
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.RenderPre">
            <summary>
            Called just before rendering starts on the canvas target.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.RenderPost">
            <summary>
            Called just after rendering stops on the canvas target.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.ImageResize">
            <summary>
            Image size is changed.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.DeviceChanged">
            <summary>
            Devices added, removed, or changed on canvas.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.AxisUpdate">
            <summary>
            Axis is changed.
            </summary>
        </member>
        <member name="F:ElmSharp.EvasObjectCallbackType.CanvasViewportResize">
            <summary>
            Canvas Viewport size is changed.
            </summary>
        </member>
        <member name="T:ElmSharp.EvasObjectEvent`1">
            <summary>
            Event class for EvasObject.
            </summary>
            <typeparam name="TEventArgs">Kinds of EventArgs.</typeparam>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasObjectEvent`1.SmartEventInfoParser">
            <summary>
            SmartEventInfoParser delegate of the EvasObjectEvent class.
            </summary>
            <param name="data">data</param>
            <param name="obj">obj</param>
            <param name="info">info</param>
            <returns>Delegate handle.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.#ctor(ElmSharp.EvasObject,ElmSharp.EvasObjectCallbackType,ElmSharp.EvasObjectEvent{`0}.SmartEventInfoParser)">
            <summary>
            Creates and initializes a new instance of the EvasObjectEvent.
            </summary>
            <param name="sender">EvasObject class belongs to.</param>
            <param name="type">EvasObjectCallbackType</param>
            <param name="parser">SmartEventInfoParser</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.#ctor(ElmSharp.EvasObject,System.IntPtr,ElmSharp.EvasObjectCallbackType,ElmSharp.EvasObjectEvent{`0}.SmartEventInfoParser)">
            <summary>
            Creates and initializes a new instance of the EvasObjectEvent.
            </summary>
            <param name="sender">EvasObject class belongs to.</param>
            <param name="handle">EvasObject handle.</param>
            <param name="type">EvasObjectCallbackType</param>
            <param name="parser">SmartEventInfoParser</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.#ctor(ElmSharp.EvasObject,ElmSharp.EvasObjectCallbackType)">
            <summary>
            Creates and initializes a new instance of the EvasObjectEvent.
            </summary>
            <param name="sender">EvasObject class belongs to.</param>
            <param name="type">SmartEventInfoParser</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.Finalize">
            <summary>
            Destroys the EvasObjectEvent object.
            </summary>
        </member>
        <member name="E:ElmSharp.EvasObjectEvent`1.On">
            <summary>
            On Event Handler of the EvasObjectEvent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed
            otherwise, false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent`1.MakeInvalidate">
            <summary>
            Makes the current instance invalidate.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.EvasObjectEvent">
            <summary>
            Event class for EvasObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent.#ctor(ElmSharp.EvasObject,ElmSharp.EvasObjectCallbackType)">
            <summary>
            Creates and initializes a new instance of the EvasObjectEvent.
            </summary>
            <param name="sender">EvasObject class belongs to.</param>
            <param name="type">EvasObjectCallbackType</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent.#ctor(ElmSharp.EvasObject,System.IntPtr,ElmSharp.EvasObjectCallbackType)">
            <summary>
            Creates and initializes a new instance of the EvasObjectEvent.
            </summary>
            <param name="sender">EvasObject class belongs to.</param>
            <param name="handle">EvasObject handle.</param>
            <param name="type">EvasObjectCallbackType</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent.Finalize">
            <summary>
            Destroys the EvasObjectEvent object.
            </summary>
        </member>
        <member name="E:ElmSharp.EvasObjectEvent.On">
            <summary>
            On Event Handler of EvasObjectEvent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if managed resources should be disposed
            otherwise, false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.EvasObjectEvent.MakeInvalidate">
            <summary>
            Makes the current instance invalidate.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FlipSelector">
            <summary>
            The FlipSelector is a widget to show a set of text items, one at a time, with the same sheet switching style as the clock widget when one changes the current displaying sheet.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the FlipSelector.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.FlipSelector.Selected">
            <summary>
            Selected will be triggered when selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.FlipSelector.Overflowed">
            <summary>
            Overflowed will be triggered when overflowed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.FlipSelector.Underflowed">
            <summary>
            Underflowed will be triggered when underflowed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipSelector.Interval">
            <summary>
            Sets or gets the interval on time updates for a user mouse button to hold on the flip selector widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipSelector.SelectedItem">
            <summary>
            Gets the currently selected item in the flip selector widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipSelector.FirstItem">
            <summary>
            Gets the first item in the given flip selector widget's list of items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipSelector.LastItem">
            <summary>
            Gets the last item in the given flip selector widget's list of items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.Append(System.String)">
            <summary>
            Appends the (text) item to the flip selector widget.
            </summary>
            <param name="text">text value</param>
            <returns>
            A handle to the item added, or null on errors.
            </returns>
            <remarks>
            The widget's list of labels to show will be appended with the given value. If the user wishes so, a callback function pointer can be passed, which will get called when the same item is selected.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.Prepend(System.String)">
            <summary>
            Prepends the (text) item to a flip selector widget.
            </summary>
            <param name="text">Prepend text</param>
            <returns>A handle to the item added, or null on errors.</returns>
            <remarks>
            The widget's list of labels to show will be prepended with the given value. If the user wishes so, a callback function pointer can be passed, which will get called when the same item is selected.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.Remove(ElmSharp.FlipSelectorItem)">
            <summary>
            To remove the given item.
            </summary>
            <param name="item">FlipSelector's item.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.Next">
            <summary>
            Programmatically select the next item of the flip selector widget.
            </summary>
            <remarks>
            The selection will be animated. Also, if it reaches the beginning of its list of member items, it will continue with the last one backwards.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.Prev">
            <summary>
            Programmatically select the previous item of the flip selector widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelector.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FlipSelectorItem">
            <summary>
            The item class of FlipSelector.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipSelectorItem.Text">
            <summary>
            Sets or gets the text of the FlipSelectorItem.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.FlipSelectorItem.Selected">
            <summary>
            Selected will be triggered when selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelectorItem.#ctor(System.String)">
            <summary>
            Creates and initializes a new instance of the FlipSelectorItem.
            </summary>
            <param name="text">FlipSelectorItem's text</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipSelectorItem.#ctor(System.String,ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the FlipSelectorItem.
            </summary>
            <param name="text">FlipSelectorItem's text</param>
            <param name="parent">Parent EvasObject</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FloatingButton">
            <summary>
            The FloatingButton is a widget to add the floating area for buttons.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FloatingButton.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the FloatingButton class.
            </summary>
            <param name="parent">Created on this parent container.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FloatingButton.Mode">
            <summary>
            Sets or gets the floatingbutton mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FloatingButton.Position">
            <summary>
            Gets the floatingbutton position.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FloatingButton.MovementBlock">
            <summary>
            Sets or gets the movability for a given FloatingButton widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FloatingButton.Opacity">
            <summary>
            Gets the opacity's value of the given FloatingButton.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FloatingButton.SetPosition(ElmSharp.FloatingButtonPosition,System.Boolean)">
            <summary>
            Set the floatingbutton position with or without animation.
            </summary>
            <param name="position">Button position.</param>
            <param name="animated">Animation flag.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FloatingButton.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FloatingButtonMode">
            <summary>
            Enumeration for the FloatingButtonMode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.FloatingButtonMode.All">
            <summary>
            Allows all positions.
            </summary>
        </member>
        <member name="F:ElmSharp.FloatingButtonMode.LeftRightOnly">
            <summary>
            Allows left and right positions only.
            </summary>
        </member>
        <member name="T:ElmSharp.FloatingButtonPosition">
            <summary>
            Enumeration for the FloatingButtonPosition.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.FloatingButtonPosition.LeftOut">
            <summary>
            Hides in the left, but only the small handler will show.
            </summary>
        </member>
        <member name="F:ElmSharp.FloatingButtonPosition.Left">
            <summary>
            Shows all of the buttons, but lies on the left.
            </summary>
        </member>
        <member name="F:ElmSharp.FloatingButtonPosition.Center">
            <summary>
            Shows all of the buttons, but lies on the center.
            </summary>
        </member>
        <member name="F:ElmSharp.FloatingButtonPosition.Right">
            <summary>
            Shows all of the buttons, but lies on the right.
            </summary>
        </member>
        <member name="F:ElmSharp.FloatingButtonPosition.RightOut">
            <summary>
            Hides in the right, but only the small handler will show.
            </summary>
        </member>
        <member name="T:ElmSharp.GenGridItemEventArgs">
            <summary>
            It inherits System.EventArgs.
            It contains the item which is the <see cref="T:ElmSharp.GenGridItem"/> type.
            All events of the GenGrid contain GenGridItemEventArgs as a parameter.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItemEventArgs.Item">
            <summary>
            Gets or sets the gengrid item. The return type is <see cref="T:ElmSharp.GenGridItem"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenGrid">
            <summary>
            It inherits <see cref="T:ElmSharp.Layout"/>.
            The GenGrid is a widget that aims to position objects in a grid layout, while actually creating and rendering only the visible ones.
            It has two directions in which a given GenGrid widget expands while placing its items, horizontal and vertical.
            The gengrid items are represented through the <see cref="T:ElmSharp.GenItemClass"/> definition field details.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the GenGrid class.
            </summary>
            <param name="parent">The parent is a given container which will be attached by GenGrid as a child. It's the <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemSelected">
            <summary>
            ItemSelected is raised when a new GenGrid item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemUnselected">
            <summary>
            ItemUnselected is raised when the gengrid item is unselected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemPressed">
            <summary>
            ItemPressed is raised when a new gengrid item is pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemReleased">
            <summary>
            ItemReleased is raised when a new gengrid item is released.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemActivated">
            <summary>
            ItemActivated is raised when a new gengrid item is double-clicked or pressed (enter|return|spacebar).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemDoubleClicked">
            <summary>
            ItemDoubleClicked is raised when a new gengrid item is double-clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemRealized">
            <summary>
            ItemRealized is raised when a gengrid item is implemented through <see cref="T:ElmSharp.GenItemClass"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemUnrealized">
            <summary>
            ItemUnrealized is raised when the gengrid item is deleted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemLongPressed">
            <summary>
            ItemLongPressed is raised when a gengrid item is pressed for a certain amount of time. By default it's 1 second.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemFocused">
            <summary>
            ItemFocussed is raised when a gengrid item has received focus.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.ItemUnfocused">
            <summary>
            ItemUnfocussed is raised when a gengrid item has lost focus.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenGrid.Changed">
            <summary>
             Changed is raised when an item is added, removed, resized or moved and when the gengrid is resized or gets "horizontal" property changes.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.ItemAlignmentX">
            <summary>
            Gets or sets the item's grid alignment along X-axis within a given GenGrid widget.
            Accepted values are in the 0.0 to 1.0 range, with the special value -1.0 used to specify "justify" or "fill" by some users.
            By default, value is 0.0, meaning that the gengrid has its items grid placed exactly in the left along X-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.ItemAlignmentY">
            <summary>
            Gets or sets the item's grid alignment on Y-axis within a given GenGrid widget.
            Accepted values are in the 0.0 to 1.0 range, with the special value -1.0 used to specify "justify" or "fill" by some users.
            By default, value is 0.0, meaning that the gengrid has its items grid placed exactly in the top along Y-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.FillItems">
            <summary>
            Gets or sets the manner in which the items grid is filled within a given GenGrid widget.
            It is filled if true, otherwise not filled if false.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.MultipleSelection">
            <summary>
            Gets or sets whether multi-selection is enabled or disabled for a given GenGrid widget.
            </summary>
            <remarks>
            Multi-selection is the ability to have more than one item selected, on a given gengrid, simultaneously.
            When it is enabled, a sequence of clicks on different items makes them all selected, progressively.
            A click on an already selected item unselects it. If interacting via the keyboard, multi-selection is enabled while holding the "Shift" key.
            By default, multi-selection is disabled.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.ItemWidth">
            <summary>
            Gets or sets the width for the items of a given GenGrid widget.
            </summary>
            <remarks>
            A gengrid, after creation, still has no information on the size to give to each of its cells.
            The default width and height just are one finger wide.
            Use this property to force a custom width for your items, making them as big as you wish.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.ItemHeight">
            <summary>
            Gets or sets the height for the items of a given GenGrid widget.
            </summary>
            <remarks>
            A gengrid, after creation, still has no information on the size to give to each of its cells.
            The default width and height just are one finger wide.
            Use this property to force a custom height for your items, making them as big as you wish.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.SelectionMode">
            <summary>
            Gets or sets the gengrid select mode by <see cref="T:ElmSharp.GenItemSelectionMode"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.IsHorizontal">
            <summary>
            Gets or sets the direction for which a given GenGrid widget expands while placing its items.
            </summary>
            <remarks>
            If true, items are placed in columns from top to bottom and when the space for a column is filled, another one is started on the right, thus expanding the grid horizontally.
            If false, items are placed in rows from left to right, and when the space for a row is filled, another one is started below, thus expanding the grid vertically.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.IsHighlight">
            <summary>
            Gets or sets whether the gengrid items should be highlighted when an item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.HorizontalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of HorizontalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means the horizontal scrollbar is made visible if it is needed, and otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.VerticalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of VerticalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means the vertical scrollbar is made visible if it is needed, and otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.FirstItem">
            <summary>
            Gets the first item in a given GenGrid widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.LastItem">
            <summary>
            Gets the last item in a given GenGrid widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.ItemCount">
            <summary>
            Gets the items count in a given GenGrid widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.SelectedItem">
            <summary>
            Gets the selected item in a given GenGrid widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGrid.ReorderMode">
            <summary>
            Gets or sets whether a given GenGrid widget is able to or not able to have items reordered.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.Append(ElmSharp.GenItemClass,System.Object)">
            <summary>
            Appends a new item to a given GenGrid widget. This adds an item to the end of the gengrid.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <returns>Return a gengrid item that contains the data and itemClass.</returns>
            <seealso cref="T:ElmSharp.GenItemClass"/>
            <seealso cref="T:ElmSharp.GenGridItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.Prepend(ElmSharp.GenItemClass,System.Object)">
            <summary>
            Prepends a new item to a given GenGrid widget. This adds an item to the beginning of the gengrid.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <returns>Return a gengrid item that contains the data and itemClass.</returns>
            <seealso cref="T:ElmSharp.GenItemClass"/>
            <seealso cref="T:ElmSharp.GenGridItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.InsertBefore(ElmSharp.GenItemClass,System.Object,ElmSharp.GenGridItem)">
            <summary>
            Inserts an item before another in a GenGrid widget. This inserts an item before another in the gengrid.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="before">The item before which to place this new one.</param>
            <returns>Return a gengrid item that contains the data and itemClass.</returns>
            <seealso cref="T:ElmSharp.GenItemClass"/>
            <seealso cref="T:ElmSharp.GenGridItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.InsertAfter(ElmSharp.GenItemClass,System.Object,ElmSharp.GenGridItem)">
            <summary>
            Inserts an item after another in a GenGrid widget. This inserts an item after another in the gengrid.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="after">The item after which to place this new one.</param>
            <returns>Return a gengrid item that contains the data and itemClass.</returns>
            <seealso cref="T:ElmSharp.GenItemClass"/>
            <seealso cref="T:ElmSharp.GenGridItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.InsertSorted(ElmSharp.GenItemClass,System.Object,System.Comparison{System.Object})">
            <summary>
            Inserts an item in a GenGrid widget using a user-defined sort function.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="comparison">User defined comparison function that defines the sort order based on the gengrid item and its data.</param>
            <returns>Return a gengrid item that contains the data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.ScrollTo(ElmSharp.GenGridItem,ElmSharp.ScrollToPosition,System.Boolean)">
            <summary>
            Shows a given item to the visible area of a gengrid.
            </summary>
            <param name="item">The gengrid item to display.</param>
            <param name="position">The position of the item in the viewport.</param>
            <param name="animated">The type of how to show the item.</param>
            <remarks>
            If animated is true, the gengrid shows the item by scrolling if it's not fully visible.
            If animated is false, the gengrid shows the item by jumping if it's not fully visible.
            </remarks>
            <seealso cref="T:ElmSharp.ScrollToPosition"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.UpdateRealizedItems">
            <summary>
            Updates the contents of all the realized items.
            This updates all realized items by calling all the <see cref="T:ElmSharp.GenItemClass"/> again to get the content, text, and states.
            Use this when the original item data has changed and the changes are desired to reflect.
            </summary>
            <remarks>
            <see cref="M:ElmSharp.GenItem.Update"/> to update just one item.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.Clear">
            <summary>
            Removes all the items from a given GenGrid widget.
            This removes (and deletes) all the items in the object, making it empty.
            </summary>
            <remarks>
            <see cref="M:ElmSharp.ItemObject.Delete"/> to delete just one item.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.GetItemByPosition(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the item that is at the X, Y canvas coordinates.
            </summary>
            <param name="x">The input X coordinate.</param>
            <param name="y">The input Y coordinate.</param>
            <param name="portionX">The position relative to the item returned here.
            -1, 0, or 1, depending if the coordinate is on the left portion of that item(-1), on the middle section(0), or on the right part(1).
            </param>
            <param name="portionY">The position relative to the item returned here.
            -1, 0, or 1, depending if the coordinate is on the upper portion of that item (-1), on the middle section (0), or on the lower part (1).
            </param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGrid.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenGridItem">
            <summary>
            It inherits <see cref="T:ElmSharp.GenItem"/>.
            An instance to the gengrid item is added.
            It contains the Update() method to update a gengrid item which is given.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.IsSelected">
            <summary>
            Gets or sets whether a given gengrid item is selected.
            If one gengrid item is selected, any other previously selected items get unselected in favor of this new one.
            </summary>
            <remarks>
            If true, it is selected.
            If false, it is unselected.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.Cursor">
            <summary>
            Sets or gets the cursor to be shown when the mouse is over the gengrid item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.CursorStyle">
            <summary>
            Sets or gets the style for this item cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.IsUseEngineCursor">
            <summary>
            Sets or gets the cursor engine only usage for this item cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.TooltipStyle">
            <summary>
            Sets or gets, or sets the style of the given gengrid item's tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.SelectionMode">
            <summary>
            Gets the gengrid item's select mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.Row">
            <summary>
            Gets or sets the gengrid item's row position, relative to the whole gengrid's grid area.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenGridItem.Column">
            <summary>
            Gets or sets the gengrid item's column position, relative to the whole gengrid's grid area.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItem.SetTooltipText(System.String)">
            <summary>
            Sets the text to be shown in the gengrid item.
            </summary>
            <param name="tooltip">The text to set.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItem.UnsetTooltip">
            <summary>
            Unsets the tooltip from item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItem.Update">
            <summary>
            Updates the content of a given gengrid item.
            This updates an item by calling all the GenItem class functions again to get the content, text, and states.
            Use this when the original item data has changed and you want the changes to reflect.
            </summary>
            <remarks>
            <see cref="M:ElmSharp.GenGrid.UpdateRealizedItems"/> to update the contents of all the realized items.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItem.UpdateTooltipDelegate">
            <summary>
            Sets the content to be shown in the tooltip item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItemSelectionMode">
            <summary>
            Enumeration for the selection modes of GenItem.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GenItemSelectionMode.Default">
            <summary>
            Default select mode.
            </summary>
        </member>
        <member name="F:ElmSharp.GenItemSelectionMode.Always">
            <summary>
            Always select mode.
            </summary>
        </member>
        <member name="F:ElmSharp.GenItemSelectionMode.None">
            <summary>
            No select mode.
            </summary>
        </member>
        <member name="F:ElmSharp.GenItemSelectionMode.DisplayOnly">
            <summary>
            No select mode with no finger size rule.
            </summary>
        </member>
        <member name="T:ElmSharp.GenItem">
            <summary>
            It inherits <see cref="T:ElmSharp.ItemObject"/>.
            A base class for <see cref="T:ElmSharp.GenGridItem"/> and <see cref="T:ElmSharp.GenListItem"/>.
            It contains the GenItem class and data to display the data.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItem.GetTooltipContentDelegate">
            <summary>
            The delegate returning the tooltip contents.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.ItemClass">
            <summary>
            Gets the item class that defines how to display data. It returns <see cref="T:ElmSharp.GenItemClass"/> type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.TooltipContentDelegate">
            <summary>
            Sets or gets the tooltip content delegate.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.SelectionMode">
            <summary>
            It's an abstract property.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.Cursor">
            <summary>
            Sets or gets the cursor to be shown when the mouse is over the gengrid item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.CursorStyle">
            <summary>
            Sets or gets the style for this item cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.IsUseEngineCursor">
            <summary>
            Sets or gets the cursor engine only usage for this item cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.Data">
            <summary>
            Gets the item data that is added through calling <see cref="M:ElmSharp.GenGrid.Append(ElmSharp.GenItemClass,System.Object)"/>, <see cref="M:ElmSharp.GenGrid.Prepend(ElmSharp.GenItemClass,System.Object)"/>, or <see cref="M:ElmSharp.GenGrid.InsertBefore(ElmSharp.GenItemClass,System.Object,ElmSharp.GenGridItem)"/> methods.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.IsSelected">
            <summary>
            It's an abstract property. It's implemented by <see cref="P:ElmSharp.GenGridItem.IsSelected"/> and <see cref="P:ElmSharp.GenListItem.IsSelected"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItem.TooltipStyle">
            <summary>
            It's an abstract property. It's implemented by <see cref="P:ElmSharp.GenGridItem.TooltipStyle"/> and <see cref="P:ElmSharp.GenListItem.TooltipStyle"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItem.SetTooltipText(System.String)">
            <summary>
            Sets the tooltip text.
            </summary>
            <param name="tooltip">The text to set.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItem.UnsetTooltip">
            <summary>
            Unsets the tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItem.Update">
            <summary>
            It's an abstract method. It's implemented by <see cref="M:ElmSharp.GenGridItem.Update"/> and <see cref="M:ElmSharp.GenListItem.Update"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItem.OnInvalidate">
            <summary>
            The override method for deleting the item class and item data. It's called when the item is deleted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItem.UpdateTooltipDelegate">
            <summary>
            Abstract method for updating the tooltip content.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItemClass">
            <summary>
            It represents the GenGrid or GenList item class definition field details.
            It has some display styles, such as "default", "full", and "group_index".
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItemClass.GetTextDelegate">
            <summary>
            The delegate to define <see cref="P:ElmSharp.GenItemClass.GetTextHandler"/>.
            </summary>
            <param name="data">The item data.</param>
            <param name="part">The part where the data should be shown.</param>
            <returns>Return string that should be shown.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItemClass.GetContentDelegate">
            <summary>
            The delegate to define <see cref="P:ElmSharp.GenItemClass.GetContentHandler"/>.
            </summary>
            <param name="data">The item data.</param>
            <param name="part">The part where the data should be shown.</param>
            <returns>Return content that should be shown.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItemClass.DeleteDelegate">
            <summary>
            The delegate to define <see cref="P:ElmSharp.GenItemClass.DeleteHandler"/>.
            </summary>
            <param name="data">The item data.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenItemClass.GetReusableContentDelegate">
            <summary>
            The delegate to define <see cref="P:ElmSharp.GenItemClass.ReusableContentHandler"/>.
            </summary>
            <param name="data">The item data.</param>
            <param name="part">The part where the data should be shown.</param>
            <param name="old">The content that has been added in gengrid.</param>
            <returns>Return content that should be shown.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItemClass.#ctor(System.String)">
            <summary>
            Creates and initializes a new instance of the GenItemClass.
            </summary>
            <param name="style">The item display style.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItemClass.Finalize">
            <summary>
            Destroys the GenItemClass object.
            </summary>
        </member>
        <member name="P:ElmSharp.GenItemClass.ItemStyle">
            <summary>
            Gets the item style.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItemClass.GetTextHandler">
            <summary>
            Gets or sets the callback that defines how to display the item text.
            If get, return <see cref="T:ElmSharp.GenItemClass.GetTextDelegate"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItemClass.GetContentHandler">
            <summary>
            Gets or sets the callback that defines how to display the item content.
            If get, return <see cref="T:ElmSharp.GenItemClass.GetContentDelegate"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItemClass.DeleteHandler">
            <summary>
            Gets or sets the callback that defines how to delete the item text and content.
            If get, return <see cref="T:ElmSharp.GenItemClass.DeleteDelegate"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenItemClass.ReusableContentHandler">
            <summary>
            Gets or sets the callback that defines how to reuse the item content.
            If get, return <see cref="T:ElmSharp.GenItemClass.GetReusableContentDelegate"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItemClass.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed,
            otherwise false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItemClass.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItemClass.CreateItemClass">
            <summary>
            Creates a new GenList item class in a given GenList widget.
            </summary>
            <returns>The new item class object.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenItemClass.ReleaseItemClass(System.IntPtr)">
            <summary>
            Removes an item class in a given GenList widget.
            </summary>
            <param name="unmanagedPtr">The object to be removed.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenGridItemClass">
            <summary>
            It represents the gengrid item class definition field details.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItemClass.#ctor(System.String)">
            <summary>
            Create the GenGridItemClass instance.
            </summary>
            <param name="style">The item display style.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItemClass.CreateItemClass">
            <summary>
            Adds a new gengrid item class in a given GenGrid widget.
            </summary>
            <returns>The new instance.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenGridItemClass.ReleaseItemClass(System.IntPtr)">
            <summary>
            Removes the item class in a given GenGrid widget.
            </summary>
            <param name="unmanagedPtr">The object to be removed.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemClass.GetTextCallback">
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemClass.GetContentCallback">
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemClass.GetStateCallback">
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemClass.DelCallback">
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemClass.FilterCallback">
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemClass.GetReusableContentCallback">
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenListItemType">
            <summary>
            Enumeration for setting the genlist item types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GenListItemType.Normal">
            <summary>
            If Normal is set, then this item is a normal item.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListItemType.Tree">
            <summary>
            If Tree is set, then this item is displayed as an item that is able to expand and have child items.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListItemType.Group">
            <summary>
            If Group is set, then this item is a group index item that is displayed at the top until the next group comes.
            </summary>
        </member>
        <member name="T:ElmSharp.GenListMode">
            <summary>
            Enumeration for setting the genlist's resizing behavior, transverse axis scrolling, and items cropping.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GenListMode.Compress">
            <summary>
            The genlist won't set any of its size hints to inform how a possible container should resize it.
            Then, if it's not created as a "resize object", it might end up with zeroed dimensions.
            The genlist will respect the container's geometry,and if any of its items won't fit into its transverse axis, one won't be able to scroll it in that direction.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListMode.Scroll">
            <summary>
            This is the same as Compress, with the exception that if any of its items won't fit into its transverse axis, one will be able to scroll it in that direction.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListMode.Limit">
            <summary>
            Sets a minimum size hint on the genlist object, so that containers may respect it (and resize itself to fit the child properly).
            More specifically, a minimum size hint will be set for its transverse axis, so that the largest item in that direction fits well.
            This is naturally bound by the genlist object's maximum size hints, set externally.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListMode.Expand">
            <summary>
            Besides setting a minimum size on the transverse axis, just like on Limit, the genlist will set a minimum size on the longitudinal axis, trying to reserve space to all its children to be visible at a time.
            This is naturally bound by the genlist object's maximum size hints, set externally.
            </summary>
        </member>
        <member name="T:ElmSharp.GenListItemEventArgs">
            <summary>
            It inherits System.EventArgs.
            It contains an item which is <see cref="T:ElmSharp.GenListItem"/> type.
            All events of the GenList contain GenListItemEventArgs as a parameter.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItemEventArgs.Item">
            <summary>
            Gets or sets the genlist item. The return type is <see cref="T:ElmSharp.GenListItem"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ScrollToPosition">
            <summary>
            Enumeration for defining where to position the item in the genlist.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ScrollToPosition.None">
            <summary>
            Scrolls to nowhere.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollToPosition.In">
            <summary>
            Scrolls to the nearest viewport.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollToPosition.Top">
            <summary>
            Scrolls to the top of the viewport.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollToPosition.Middle">
            <summary>
            Scrolls to the middle of the viewport.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollToPosition.Bottom">
            <summary>
            Scrolls to the bottom of the viewport.
            </summary>
        </member>
        <member name="T:ElmSharp.GenList">
            <summary>
            It inherits <see cref="T:ElmSharp.Layout"/>.
            The GenList is a widget that aims to have a more expansive list than the simple <see cref="T:ElmSharp.List"/> in ElmSharp that could have more flexible items and allow many more entries while still being fast and low on memory usage.
            At the same time it was also made to be able to do tree structures.
            But the price to pay is more complex when it comes to usage.
            If all you want is a simple list with icons and a single text, use <see cref="T:ElmSharp.List"/> widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the GenList class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by GenList as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.#ctor">
            <summary>
            Creates and initializes a new instance of the GenList class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.Homogeneous">
            <summary>
            Gets or sets whether the homogeneous mode is enabled.
            </summary>
            <remarks>
            If true, the genlist items will have the same height and width.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.ListMode">
            <summary>
            Gets or sets the horizontal stretching mode. This mode used for sizing items horizontally.
            The default value is <see cref="F:ElmSharp.GenListMode.Scroll"/>, which means that if the items are too wide to fit, the scroller scrolls horizontally.
            If set to <see cref="F:ElmSharp.GenListMode.Compress"/>, means that the item width is fixed (restricted to a minimum) to the list width when calculating its size in order to allow the height to be calculated based on it.
            If set to <see cref="F:ElmSharp.GenListMode.Limit"/>, means that items are expanded to the viewport width and limited to that size.
            If set to <see cref="F:ElmSharp.GenListMode.Expand"/>, means that genlist try to reserve space to all its items to be visible at a time.
            </summary>
            <remarks>
            Compress makes the genlist resize slower, as it recalculates every item height again whenever the list width changes.
            The homogeneous mode is so that all items in the genlist are of the same width/height. With Compress, the genlist items are initialized fast.
            However, there are no subobjects in the genlist, which can be on the flying resizable (such as TEXTBLOCK).
            If so, then some dynamic resizable objects in the genlist would not be diplayed properly.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.FirstItem">
            <summary>
            Gets the first item in the genlist.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.LastItem">
            <summary>
            Gets the last item in the genlist.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.ReorderMode">
            <summary>
            Gets or sets the reorder mode.
            After turning on the reorder mode, longpress on a normal item triggers reordering of the item.
            You can move the item up and down. However, reordering does not work with group items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.BlockCount">
            <summary>
            Gets or sets the maximum number of items within an item block.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.IsHighlight">
            <summary>
            Gets or sets whether the genlist items should be highlighted when an item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.LongPressTimeout">
            <summary>
            Gets or sets the timeout in seconds for the longpress event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.FocusOnSelection">
            <summary>
            Gets or sets the focus upon the items selection mode.
            </summary>
            <remarks>
            When enabled, every selection of an item inside <see cref="T:ElmSharp.GenList"/> will automatically set focus to its first focusable widget from the left.
            This is true of course, if the selection was made by clicking an unfocusable area in an item or selecting it with a key movement.
            Clicking on a focusable widget inside an item will couse this particular item to get focus as usual.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.IsMultiSelection">
            <summary>
            Gets or sets whether to enable multi-selection in the genlist.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.SelectedItem">
            <summary>
            Gets the selected item in a given GenList widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.SelectionMode">
            <summary>
            Gets or sets the genlist select mode by <see cref="T:ElmSharp.GenItemSelectionMode"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.Count">
            <summary>
            Gets the count of items in a this genlist widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.HorizontalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of HorizontalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means the horizontal scrollbar is made visible if it is needed, and otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenList.VerticalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of VerticalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means the vertical scrollbar is made visible if it is needed, and otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemSelected">
            <summary>
            ItemSelected is raised when a new genlist item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemUnselected">
            <summary>
            ItemUnselected is raised when the genlist item is unselected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemPressed">
            <summary>
            ItemPressed is raised when a new genlist item is pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemReleased">
            <summary>
            ItemReleased is raised when a new genlist item is released.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemActivated">
            <summary>
            ItemActivated is raised when a new genlist item is double-clicked or pressed (enter|return|spacebar).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemDoubleClicked">
            <summary>
            ItemDoubleClicked is raised when a new genlist item is double-clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemExpanded">
            <summary>
            ItemExpanded is raised when a new genlist item is indicated to expand.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemRealized">
            <summary>
            ItemRealized is raised when a new genlist item is created as a real object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemUnrealized">
            <summary>
            ItemUnrealized is raised when a new genlist item is unrealized.
            After calling unrealize, the item's content objects are deleted, and the item object itself is deleted or is put into a floating cache.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemLongPressed">
            <summary>
            ItemLongPressed is raised when a genlist item is pressed for a certain amount of time. By default, it's 1 second.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemMoved">
            <summary>
            ItemMoved is raised when a genlist item is moved in the reorder mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemMovedAfter">
            <summary>
            ItemMovedAfter is raised when a genlist item is moved after another item in the reorder mode.
            To get the relative previous item, use <see cref="P:ElmSharp.GenListItem.Previous"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ItemMovedBefore">
            <summary>
            ItemMovedBefore is raised when a genlist item is moved before another item in the reorder mode.
            To get the relative next item, use <see cref="P:ElmSharp.GenListItem.Next"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.Changed">
            <summary>
            Changed is raised when the genlist has changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ScrollAnimationStarted">
            <summary>
            ScrollAnimationStarted is raised when the scrolling animation has started.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.GenList.ScrollAnimationStopped">
            <summary>
            ScrollAnimationStopped is raised when the scrolling animation has stopped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Append(ElmSharp.GenItemClass,System.Object)">
            <summary>
            Appends a new item to the end of a given GenList widget.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <returns>Return a newly added genlist item that contains the data and itemClass.</returns>
            <seealso cref="T:ElmSharp.GenItemClass"/>
            <seealso cref="T:ElmSharp.GenListItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Append(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItemType)">
            <summary>
            Appends a new item with <see cref="T:ElmSharp.GenListItemType"/> to the end of a given GenList widget.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="type">The genlist item type.</param>
            <returns>Return a newly added genlist item that contains the data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Append(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItemType,ElmSharp.GenListItem)">
            <summary>
            Appends a new item with <see cref="T:ElmSharp.GenListItemType"/> to the end of a given GenList widget or the end of the children list, if the parent is given.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="type">The genlist item type.</param>
            <param name="parent">The parent item, otherwise null if there is no parent item.</param>
            <returns>Return a newly added genlist item that contains the data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Prepend(ElmSharp.GenItemClass,System.Object)">
            <summary>
            Prepends a new item to the beginning of a given GenList widget.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <returns>Return a newly added genlist item that contains data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Prepend(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItemType)">
            <summary>
            Prepends a new item with <see cref="T:ElmSharp.GenListItemType"/> to the beginning of a given genlist widget.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="type">The genlist item type.</param>
            <returns>Return a newly added genlist item that contains data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Prepend(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItemType,ElmSharp.GenListItem)">
            <summary>
            Prepends a new item with <see cref="T:ElmSharp.GenListItemType"/> to the beginning of a given GenList widget or the beginning of the children list, if the parent is given.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="type">The genlist item type.</param>
            <param name="parent">The parent item, otherwise null if there is no parent item.</param>
            <returns>Return a newly added genlist item that contains the data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.InsertBefore(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItem)">
            <summary>
            Inserts an item before another item in a genlist widget.
            It is the same tree level or group as the item before which it is inserted.????
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="before">The item before which to place this new one.</param>
            <returns>Return a newly added genlist item that contains data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.InsertBefore(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItem,ElmSharp.GenListItemType)">
            <summary>
            Inserts an item with <see cref="T:ElmSharp.GenListItemType"/> before another item in a GenList widget.
            It is the same tree level or group as the item before which it is inserted.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="before">The item before which to place this new one.</param>
            <param name="type">The genlist item type.</param>
            <returns>Return a newly added genlist item that contains data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.InsertBefore(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItem,ElmSharp.GenListItemType,ElmSharp.GenListItem)">
            <summary>
            Inserts an item with <see cref="T:ElmSharp.GenListItemType"/> before another item under a parent in a GenList widget.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="before">The item before which to place this new one.</param>
            <param name="type">The genlist item type.</param>
            <param name="parent">The parent item, otherwise null if there is no parent item.</param>
            <returns>Return a newly added genlist item that contains data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.InsertAfter(ElmSharp.GenItemClass,System.Object,ElmSharp.GenListItem,ElmSharp.GenListItemType,ElmSharp.GenListItem)">
            <summary>
            Inserts an item with <see cref="T:ElmSharp.GenListItemType"/> after another item under a parent in a GenList widget.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="after">The item after which to place this new one.</param>
            <param name="type">The genlist item type.</param>
            <param name="parent">The parent item, otherwise null if there is no parent item.</param>
            <returns>Return a newly added genlist item that contains data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.InsertSorted(ElmSharp.GenItemClass,System.Object,System.Comparison{System.Object},ElmSharp.GenListItemType,ElmSharp.GenListItem)">
            <summary>
            Inserts an item in a GenList widget using a user-defined sort function.
            </summary>
            <param name="itemClass">The itemClass defines how to display the data.</param>
            <param name="data">The item data.</param>
            <param name="comparison">User-defined comparison function that defines the sort order based on the genlist item and its data.</param>
            <param name="type">The genlist item type.</param>
            <param name="parent">The parent item, otherwise null if there is no parent item.</param>
            <returns>Return a genlist item that contains the data and itemClass.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.ScrollTo(ElmSharp.GenListItem,ElmSharp.ScrollToPosition,System.Boolean)">
            <summary>
            Shows the given item with the position type in a genlist.
            When animated is true, the genlist will jump to the given item and display it (by animatedly scrolling), if it is not fully visible. This may use animation and take sometime.
            When animated is false, the genlist will jump to the given item and display it (by jumping to that position), if it is not fully visible.
            </summary>
            <param name="item">The item to display.</param>
            <param name="position">The position to show the given item to <see cref="T:ElmSharp.ScrollToPosition"/>.</param>
            <param name="animated">The animated indicates how to display the item, by scrolling or by jumping.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.UpdateRealizedItems">
            <summary>
            Updates the content of all the realized items.
            This updates all the realized items by calling all <see cref="T:ElmSharp.GenItemClass"/> again to get the content, text, and states.
            Use this when the original item data has changed and the changes are desired to reflect.
            To update just one item, use <see cref="M:ElmSharp.GenListItem.Update"/>.
            </summary>
            <seealso cref="M:ElmSharp.GenListItem.Update"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.Clear">
            <summary>
            Removes all the items from a given genlist widget.
            This removes (and deletes) all items in the object, making it empty.
            To delete just one item, use <see cref="M:ElmSharp.ItemObject.Delete"/>.
            </summary>
            <seealso cref="M:ElmSharp.ItemObject.Delete"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.GetItemByPosition(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the item that is at the X, Y canvas coordinates.
            </summary>
            <param name="x">The input X-coordinate.</param>
            <param name="y">The input Y-coordinate.</param>
            <param name="pos">The position relative to the item returned here.
             -1, 0, or 1 depending on whether the coordinate is on the upper portion of that item (-1), in the middle section (0), or on the lower part (1).
            </param>
            <returns>The item at the given coordinates.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.GetItemByIndex(System.Int32)">
            <summary>
            Gets the nth item in a given genlist widget, placed at position nth, in its internal items list.
            </summary>
            <param name="index">The number of the item to grab (0 being the first).</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.OnRealized">
            <summary>
            The callback of the Unrealized event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenList.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GenListItemFieldType">
            <summary>
            The type of the item's part types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GenListItemFieldType.All">
            <summary>
            All item's parts.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListItemFieldType.Text">
            <summary>
            The Text part type.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListItemFieldType.Content">
            <summary>
            The Content part type.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListItemFieldType.State">
            <summary>
            The State part type.
            </summary>
        </member>
        <member name="F:ElmSharp.GenListItemFieldType.None">
            <summary>
            No part type.
            </summary>
        </member>
        <member name="T:ElmSharp.GenListItem">
            <summary>
            It inherits <see cref="T:ElmSharp.GenItem"/>.
            A instance to the genlist item is added.
            It contains the Update() method to update a genlist item which is given.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.IsSelected">
            <summary>
            Gets or sets whether a given genlist item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.IsExpanded">
            <summary>
            Gets or sets whether a given genlist item is expanded.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.Update">
            <summary>
            Updates the content of an item.
            This updates an item by calling all <see cref="T:ElmSharp.GenItemClass"/> again to get the content, text, and states.
            Use this when the original item data has changed and the changes are desired to reflect.
            To update the already realized items, use <see cref="M:ElmSharp.GenList.UpdateRealizedItems"/>.
            </summary>
            <seealso cref="M:ElmSharp.GenList.UpdateRealizedItems"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.UpdateField(System.String,ElmSharp.GenListItemFieldType)">
            <summary>
            Updates the part of an item.
            This updates an item's part by calling the item's fetching functions again to get the contents, texts, and states.
            Use this when the original item data has changed and the changes are desired to be reflected.
            To update an item's all property, use <see cref="M:ElmSharp.GenList.UpdateRealizedItems"/>.
            </summary>
            <param name="part">The part could be "elm.text", "elm.swalllow.icon", "elm.swallow.end", "elm.swallow.content", and so on. It is also used for globbing to match '*', '?', and '.'. It can be used for updating multi-fields.</param>
            <param name="type">The type of the item's part type.</param>
            <seealso cref="M:ElmSharp.GenList.UpdateRealizedItems"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.DemoteItem">
            <summary>
            Demotes an item to the end of the list.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.SelectionMode">
            <summary>
            Gets or sets the genlist item's select mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.Next">
            <summary>
            Gets the next item in a genlist widget's internal list of items.
            </summary>
            <seealso cref="P:ElmSharp.GenListItem.Previous"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.Previous">
            <summary>
            Gets the previous item in a genlist widget's internal list of items.
            </summary>
            <seealso cref="P:ElmSharp.GenListItem.Next"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.Cursor">
            <summary>
            Sets or gets the content to be shown in the tooltip item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.CursorStyle">
            <summary>
            Sets or gets the style for this item cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.IsUseEngineCursor">
            <summary>
            Sets or gets the cursor engine only usage for this item cursor.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.SetTooltipText(System.String)">
            <summary>
            Sets the text to be shown in the genlist item.
            </summary>
            <param name="tooltip">The text to set in the content.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.UnsetTooltip">
            <summary>
            Unsets the tooltip from the item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.TooltipStyle">
            <summary>
            Gets or sets the style of the given genlist item's tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.IsTooltipWindowMode">
            <summary>
            Gets or sets the disable size restrictions on an object's tooltip.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.Index">
            <summary>
            Gets the index of the item. It is only valid, once displayed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GenListItem.ExpandedItemDepth">
            <summary>
            Gets the depth of the expanded item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.ClearSubitems">
            <summary>
            Remove all the subitems (children) of the given item.
            </summary>
            <remarks>
            This removes the items that are the children (and their descendants) of the given item.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.UpdateItemClass(ElmSharp.GenItemClass,System.Object)">
            <summary>
            Updates the item class of the item.
            This sets another class of the item, changing the way that it is displayed. After changing the item class, <see cref="M:ElmSharp.GenListItem.Update"/> is called on the item.
            </summary>
            <param name="itemClass">The item class for the item.</param>
            <param name="data">The data for the item.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GenListItem.UpdateTooltipDelegate">
            <summary>
            Sets the content to be shown in the tooltip item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GestureLayer">
            <summary>
            The GestureLayer is used to detect gestures.
            Inherits Widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the GestureLayer class.
            </summary>
            <param name="parent">The parent is a given container which will be attached by the GestureLayer as a child. It's the <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GestureLayer.GestureType">
            <summary>
            Enumeration for the supported gesture types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.Tap">
            <summary>
            N fingers single taps.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.LongTap">
            <summary>
            N fingers single long-taps.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.DoubleTap">
            <summary>
            N fingers double-single taps.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.TripleTap">
            <summary>
            N fingers triple-single taps.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.Momentum">
            <summary>
            Reports momentum in the direction of the move.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.Line">
            <summary>
            N fingers line gesture.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.Flick">
            <summary>
            N fingers flick gesture.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.Zoom">
            <summary>
            Zoom.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureType.Rotate">
            <summary>
            Rotate.
            </summary>
        </member>
        <member name="T:ElmSharp.GestureLayer.GestureState">
            <summary>
            Enumeration for the gesture states.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureState.Undefined">
            <summary>
            Gesture not started.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureState.Start">
            <summary>
            Gesture started.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureState.Move">
            <summary>
            Gesture is ongoing.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureState.End">
            <summary>
            Gesture completed.
            </summary>
        </member>
        <member name="F:ElmSharp.GestureLayer.GestureState.Abort">
            <summary>
            Ongoing gesture is aborted.
            </summary>
        </member>
        <member name="P:ElmSharp.GestureLayer.HoldEvents">
            <summary>
            Sets or gets the repeat-events setting.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.Continues">
            <summary>
            Sets or gets the gesture layer to continue enable of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.TapFingerSize">
            <summary>
            Sets or gets the gesture layer finger-size for taps.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.LongTapTimeout">
            <summary>
            Sets or gets the gesture layer long tap start timeout of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.DoubleTapTimeout">
            <summary>
            Sets or gets the gesture layer double tap timeout of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.FlickTimeLimit">
            <summary>
            Sets or gets the gesture layer flick time limit (in ms) of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.MinimumLineLength">
            <summary>
            Sets or gets the gesture layer line minimum length of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.LineAngularTolerance">
            <summary>
            Sets or gets the gesture layer line angular tolerance of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.LineDistanceTolerance">
            <summary>
            Sets or gets the gesture layer line distance tolerance of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.RotateStep">
            <summary>
            Sets or gets the step-value for the rotate action.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.RotateAngularTolerance">
            <summary>
            Sets or gets the gesture layer rotate angular tolerance of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.ZoomStep">
            <summary>
            Sets or gets the control step value for the zoom action.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.ZoomDistanceTolerance">
            <summary>
            Sets or gets the gesture layer zoom distance tolerance of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.ZoomFingerFactor">
            <summary>
            Sets or gets the gesture layer zoom finger factor of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.ZoomWheelFactor">
            <summary>
            Sets or gets the gesture layer zoom wheel factor of an object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.Attach(ElmSharp.EvasObject)">
            <summary>
            Attaches a gesture layer widget to an Evas object (setting the widget's target).
            A gesture layer's target may be any Evas object. This object will be used to listen to mouse and key events.
            </summary>
            <param name="target">The object to attach.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetGestureCallback(ElmSharp.GestureLayer.GestureType,ElmSharp.GestureLayer.GestureState,System.Action{System.Object})">
            <summary>
            Sets the gesture state change callback.
            When all callbacks for the gesture are set to null, it means this gesture is disabled.
            </summary>
            <param name="type">The gesture you want to track state of.</param>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.ClearCallbacks">
            <summary>
            Clears the gesture state change callback.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetTapCallback(ElmSharp.GestureLayer.GestureType,ElmSharp.GestureLayer.GestureState,System.Action{ElmSharp.GestureLayer.TapData})">
            <summary>
            Sets the tap callback.
            </summary>
            <param name="type">The gesture you want to track state of.</param>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetMomentumCallback(ElmSharp.GestureLayer.GestureState,System.Action{ElmSharp.GestureLayer.MomentumData})">
            <summary>
            Sets the gesture state change callback with momentum gesture type.
            </summary>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetLineCallback(ElmSharp.GestureLayer.GestureState,System.Action{ElmSharp.GestureLayer.LineData})">
            <summary>
            Sets the gesture state change callback with line gesture type.
            </summary>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetFlickCallback(ElmSharp.GestureLayer.GestureState,System.Action{ElmSharp.GestureLayer.LineData})">
            <summary>
            Sets the gesture state change callback with flick gesture type.
            </summary>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetZoomCallback(ElmSharp.GestureLayer.GestureState,System.Action{ElmSharp.GestureLayer.ZoomData})">
            <summary>
            Sets the gesture state change callback with zoom gesture type.
            </summary>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.SetRotateCallback(ElmSharp.GestureLayer.GestureState,System.Action{ElmSharp.GestureLayer.RotateData})">
            <summary>
            Sets the gesture state change callback with rotate gesture type.
            </summary>
            <param name="state">The event the callback tracks (START, MOVE, END, ABORT).</param>
            <param name="action">The callback itself.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Calls this function to construct a new gesture-layer object.
            </summary>
            <param name="parent">The gesture layer's parent widget.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.GestureLayer.OnUnrealize">
            <summary>
            Clears the gesture state change callback.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GestureLayer.TapData">
            <summary>
            The struct of TapData.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.TapData.X">
            <summary>
            The X coordinate of the center point.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.TapData.Y">
            <summary>
            The Y coordinate of the center point.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.TapData.FingersCount">
            <summary>
            The number of fingers tapped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.TapData.Timestamp">
            <summary>
            The timestamp.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GestureLayer.MomentumData">
            <summary>
            The struct of MomentumData.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.X1">
            <summary>
            Final-swipe direction starting point on X.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.Y1">
            <summary>
            Final-swipe direction starting point on Y.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.X2">
            <summary>
            Final-swipe direction ending point on X.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.Y2">
            <summary>
            Final-swipe direction ending point on Y.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.HorizontalSwipeTimestamp">
            <summary>
            Timestamp of start of final X-swipe.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.VerticalSwipeTimestamp">
            <summary>
            Timestamp of start of final Y-swipe.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.HorizontalMomentum">
            <summary>
            Momentum on X.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.VerticalMomentum">
            <summary>
            Momentum on Y.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.MomentumData.FingersCount">
            <summary>
            Number of fingers.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GestureLayer.LineData">
            <summary>
            The struct of LineData.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.X1">
            <summary>
            Final-swipe direction starting point on X.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.Y1">
            <summary>
            Final-swipe direction starting point on Y.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.X2">
            <summary>
            Final-swipe direction ending point on X.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.Y2">
            <summary>
            Final-swipe direction ending point on Y.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.HorizontalSwipeTimestamp">
            <summary>
            Timestamp of start of final X-swipe.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.VerticalSwipeTimestamp">
            <summary>
            Timestamp of start of final Y-swipe.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.HorizontalMomentum">
            <summary>
            Momentum on X.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.VerticalMomentum">
            <summary>
            Momentum on Y.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.FingersCount">
            <summary>
            Number of fingers.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.LineData.Angle">
            <summary>
            Angle (direction) of lines.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.GestureLayer.ZoomData">
            <summary>
            The struct of ZoomData.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.ZoomData.X">
            <summary>
            The X coordinate of zoom center point reported to the user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.ZoomData.Y">
            <summary>
            The Y coordinate of zoom center point reported to the user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.ZoomData.Radius">
            <summary>
            The radius (distance) between fingers reported to user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.ZoomData.Zoom">
            <summary>
            The zoom value. 1.0 means no zoom.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.ZoomData.Momentum">
            <summary>
            Zoom momentum: zoom growth per second (NOT YET SUPPORTED).
            </summary>
        </member>
        <member name="T:ElmSharp.GestureLayer.RotateData">
            <summary>
            The struct of RotateData.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.RotateData.X">
            <summary>
            The X coordinate of rotation center point reported to the user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.RotateData.Y">
            <summary>
            The Y coordinate of rotation center point reported to the user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.RotateData.Radius">
            <summary>
            The radius (distance) between fingers reported to user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.RotateData.BaseAngle">
            <summary>
            The start-angle.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.RotateData.Angle">
            <summary>
            The rotation value. 0.0 means no rotation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.GestureLayer.RotateData.Momentum">
            <summary>
            Rotation momentum: rotation done per second (NOT YET SUPPORTED).
            </summary>
        </member>
        <member name="T:ElmSharp.GestureLayer.Config">
            <summary>
            Config is a static class, it provides gestureLayer's timeout information.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.Config.DefaultLongTapTimeout">
            <summary>
            Sets or gets the duration for occurring long tap event of gesture layer.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.GestureLayer.Config.DefaultDoubleTapTimeout">
            <summary>
            Sets or gets the duration for occurring double tap event of gesture layer.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.HoverselItemEventArgs">
            <summary>
            The HoverselItemEventArgs is a HoverselItem's EventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.HoverselItemEventArgs.Item">
            <summary>
            The hoversel's item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Hoversel">
            <summary>
            The hoversel is a button that pops up a list of items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Hoversel.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Hoversel class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by Hoversel as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Hoversel.Clicked">
            <summary>
            Clicked will be triggered when the hoversel is clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Hoversel.Expanded">
            <summary>
            Expanded will be triggered when the hoversel is activated by clicking the hoversel, or by a function.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Hoversel.Dismissed">
            <summary>
            Dismissed will be triggered when the hoversel is dismissed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Hoversel.ItemSelected">
            <summary>
            ItemSelected will be triggered when the hoversel's item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Hoversel.IsHorizontal">
            <summary>
            Gets or sets the status to control whether the hoversel should expand horizontally.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Hoversel.HoverParent">
            <summary>
            Gets or sets the hover parent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Hoversel.IsExpanded">
            <summary>
            Gets the flag of whether the hoversel is expanded.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Hoversel.AutoUpdate">
            <summary>
            Gets or sets the status of whether to update the icon and text of hoversel same to those of the selected item automatically.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Hoversel.HoverBegin">
            <summary>
            This triggers the hoversel popup from the code, the same as if the user had clicked the button.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Hoversel.HoverEnd">
            <summary>
            This dismisses the hoversel popup as if the user had clicked outside the hover.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Hoversel.Clear">
            <summary>
            This will remove all the children items from the hoversel.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Hoversel.AddItem(System.String)">
            <summary>
            Adds an item to the hoversel button.
            This adds an item to the hoversel to show when it is clicked.
            </summary>
            <param name="label">Item's label.</param>
            <returns>A handle to the added item.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Hoversel.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.HoverselItem">
            <summary>
            The HoverselItem is the item of Hoversel.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.HoverselItem.Label">
            <summary>
            The HoverselItem's label.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.HoverselItem.ItemSelected">
            <summary>
            ItemSelected will be triggered when the HoverselItem is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.IAnimatorMotionMapper">
            <summary>
            The AnimatorMotionMapper interface.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.IAnimatorMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.LinearMotionMapper">
            <summary>
            The LinearMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.LinearMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.AccelerateMotionMapper">
            <summary>
            The AccelerateMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AccelerateMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DecelerateMotionMapper">
            <summary>
            The DecelerateMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DecelerateMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SinusoidalMotionMapper">
            <summary>
            The SinusoidalMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SinusoidalMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.AccelerateFactorMotionMapper">
            <summary>.
            The AccelerateFactorMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.AccelerateFactorMotionMapper.PowerFactor">
            <summary>
            The power factor of AccelerateFactorMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.AccelerateFactorMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DecelerateFactorMotionMapper">
            <summary>
            The DecelerateFactorMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DecelerateFactorMotionMapper.PowerFactor">
            <summary>
            The power factor of DecelerateFactorMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DecelerateFactorMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SinusoidalFactorMotionMapper">
            <summary>
            The SinusoidalFactorMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.SinusoidalFactorMotionMapper.PowerFactor">
            <summary>
            The power factor of SinusoidalFactorMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SinusoidalFactorMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DivisorInterpolatedMotionMapper">
            <summary>
            The DivisorInterpolatedMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DivisorInterpolatedMotionMapper.Divisor">
            <summary>
            The Divisor of DivisorInterpolatedMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.DivisorInterpolatedMotionMapper.Power">
            <summary>
            The power of DivisorInterpolatedMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.DivisorInterpolatedMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.BounceMotionMapper">
            <summary>
            The BounceMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.BounceMotionMapper.Bounces">
            <summary>
            The bounces of BounceMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.BounceMotionMapper.DecayFactor">
            <summary>
            The decay factor of BounceMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.BounceMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SpringMotionMapper">
            <summary>
            The SpringMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.SpringMotionMapper.Wobbles">
            <summary>
            The wobbles of SpringMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.SpringMotionMapper.DecayFactor">
            <summary>
            The decay factor of SpringMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SpringMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.CubicBezierMotionMapper">
            <summary>
            The CubicBezierMotionMapper class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.CubicBezierMotionMapper.X1">
            <summary>
            The X1 of CubicBezierMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.CubicBezierMotionMapper.Y1">
            <summary>
            The Y1 of CubicBezierMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.CubicBezierMotionMapper.X2">
            <summary>
            The X2 of CubicBezierMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.CubicBezierMotionMapper.Y2">
            <summary>
            The Y2 of CubicBezierMotionMapper.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.CubicBezierMotionMapper.Calculate(System.Double)">
            <summary>
            Maps an input position from 0.0 to 1.0 along a timeline to a position in a different curve.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.IconLookupOrder">
            <summary>
            Enumeration for the icon lookup order. Should look for icons in the theme, FDO paths, or both.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.IconLookupOrder.FreeDesktopFirst">
            <summary>
            Icon look up order: freedesktop, theme.
            </summary>
        </member>
        <member name="F:ElmSharp.IconLookupOrder.ThemeFirst">
            <summary>
            Icon look up order: theme, freedesktop.
            </summary>
        </member>
        <member name="F:ElmSharp.IconLookupOrder.FreeDesktopOnly">
            <summary>
            Icon look up order: freedesktop.
            </summary>
        </member>
        <member name="F:ElmSharp.IconLookupOrder.ThemeOnly">
            <summary>
            Icon look up order: theme.
            </summary>
        </member>
        <member name="T:ElmSharp.Icon">
            <summary>
            The Icon is a widget that displays the standard icon images ("delete", "edit", "arrows", etc.)
            or images coming from a custom file (PNG, JPG, EDJE, etc.), on the icon context.
            Inherits Image.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Icon.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Icon class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by Icon as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Icon.StandardIconName">
            <summary>
            Sets or gets the standard icon name of a given Icon widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Icon.IconLookupOrder">
            <summary>
            Sets or gets the icon lookup order of a given Icon widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Icon.SetThumb(System.String,System.String)">
            <summary>
            Sets the file that is used, but uses a generated thumbnail.
            </summary>
            <param name="file">The path to the file that is used as an icon image.</param>
            <param name="group">The group that the icon belongs to.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Icon.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Adds a new icon object to the parent.
            </summary>
            <param name="parent">EvasObject</param>
            <returns>The new object, otherwise null if it cannot be created.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Image">
            <summary>
            The Image is a widget that allows one to load and display an image file on it,
            be it from a disk file or from a memory region.
            Inherits Widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Image class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the image as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Image.Clicked">
            <summary>
            Clicked will be triggered when the image is clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Image.LoadingCompleted">
            <summary>
            LoadingCompleted will be triggered when the image is loaded completely.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Image.LoadingFailed">
            <summary>
            Clicked will be triggered when the image fails to load.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.File">
            <summary>
            Gets the file that is used as an image.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsSmooth">
            <summary>
            Sets or gets the smooth effect for an image.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsScaling">
            <summary>
            Sets or gets whether scaling is disabled on the object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.CanScaleDown">
            <summary>
            Sets or gets whether the object is down resizable.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.CanScaleUp">
            <summary>
            Sets or gets whether the object is up resizable.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.CanFillOutside">
            <summary>
            Sets or gets whether the image fills the entire object area, when keeping the aspect ratio.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.PrescaleSize">
            <summary>
            Sets or gets the prescale size for the image.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsFixedAspect">
            <summary>
            Sets or gets whether the original aspect ratio of the image should be kept on resize.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsAnimated">
            <summary>
            Sets or gets whether an image object (which supports animation) is to animate itself.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsAnimatedAvailable">
            <summary>
            Gets whether an image object supports animation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsAnimationPlaying">
            <summary>
            Sets or gets whether an image object is under animation.
            </summary>
            <remarks>
            An image object, even if it supports animation, will be displayed by default without animation.
            To actually start playing any image object's animation, <see cref="P:ElmSharp.Image.IsAnimated"/> should be TRUE before setting this property true.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsEditable">
            <summary>
            Sets or gets whether the image is 'editable'.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.ObjectSize">
            <summary>
            Gets the current size of the image.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.IsOpaque">
            <summary>
            Sets or gets whether the alpha channel data is being used on the given image object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.Orientation">
            <summary>
            Sets or gets the image orientation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.Color">
            <summary>
            Sets or gets the image color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.BackgroundColor">
            <summary>
            Sets the background color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.ImageObject">
            <summary>
            Gets the inlined image object of the image widget.
            This property allows one to get the underlying EvasObject of type Image from this elementary widget. It can be useful to do things like save the image to a file, etc.
            </summary>
            <remarks>Be careful not to manipulate it, as it is under the control of the widget.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.SetBorder(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the dimensions for an image object's border, a region which is not scaled together with its center ever.
            </summary>
            <param name="left">The border's left width.</param>
            <param name="right">The border's right width.</param>
            <param name="top">The border's top width.</param>
            <param name="bottom">The border's bottom width.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Image.BorderCenterFillMode">
            <summary>
            Sets or gets if the center part of the given image object (not the border) should be drawn.
            </summary>
            <remarks>
            When rendering, the image may be scaled to fit the size of the image object.
            This function sets if the center part of the scaled image is to be drawn or left completely blank, or forced to be solid.
            Very useful for frames and decorations.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.Load(System.String)">
            <summary>
            Sets the file that is used as the image's source.
            </summary>
            <param name="file">The path to the file that is used as an image source.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.Load(System.Uri)">
            <summary>
            Sets the URI that is used as the image's source.
            </summary>
            <param name="uri">The URI to the file that is used as an image source.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.Load(System.Byte*,System.Int64)">
            <summary>
            Sets a location in the memory to be used as an image object's source bitmap.
            </summary>
            <remarks>
            This function is handy when the contents of an image file are mapped into the memory, for example,
            the format string should be something like "png", "jpg", "tga", "tiff", "bmp" etc, when provided (null, on the contrary).
            This improves the loader performance as it tries the "correct" loader first, before trying a range of other possible loaders until one succeeds.
            </remarks>
            <param name="img">The binary data that is used as an image source.</param>
            <param name="size">The size of the binary data blob img.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.Load(System.IO.Stream)">
            <summary>
            Sets the stream that is used as the image's source.
            </summary>
            <param name="stream">The stream that is used as an image source.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.LoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the file that is used as the image's source with async.
            </summary>
            <param name="file">The path to the file that is used as an image source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.LoadAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Sets the URI that is used as the image's source with async.
            </summary>
            <param name="uri">The URI to the file that is used as an image source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.LoadAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Sets the stream that is used as the image's source with async.
            </summary>
            <param name="stream">The stream that is used as an image source.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>(true = success, false = error)</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.SetPartColor(System.String,ElmSharp.Color)">
            <summary>
            Sets the color of the Color class for a given widget.
            </summary>
            <param name="part">The name of the Color class.</param>
            <param name="color">The struct of the Color class.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.GetPartColor(System.String)">
            <summary>
            Gets the color of the Color class for a given widget.
            </summary>
            <param name="part">The name of the Color class.</param>
            <returns>The color object.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Image.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Sets the content at a part of a given container widget.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the image as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <returns>The new object, otherwise null if it cannot be created.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ImageBorderFillMode">
            <summary>
            Enumeration for the fill mode of the image border.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ImageBorderFillMode.None">
            <summary>
            None mode of the image border.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageBorderFillMode.Default">
            <summary>
            Default mode of the image border.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageBorderFillMode.Solid">
            <summary>
            Solid mode of the image border.
            </summary>
        </member>
        <member name="T:ElmSharp.ImageOrientation">
            <summary>
            Enumeration for the possible orientation options.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ImageOrientation.None">
            <summary>
            No orientation change.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.Rotate90">
            <summary>
            Rotate 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.Rotate180">
            <summary>
            Rotate 180 degrees clockwise.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.Rotate270">
            <summary>
            Rotate 90 degrees counter-clockwise (i.e., 270 degrees clockwise).
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.FlipHorizontal">
            <summary>
            Flip the image horizontally.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.FlipVertical">
            <summary>
            Flip the image vertically.
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.FlipTranspose">
            <summary>
            Flip the image along the Y = (width - X) line (bottom-left to top-right).
            </summary>
        </member>
        <member name="F:ElmSharp.ImageOrientation.FlipTransverse">
            <summary>
            Flip the image along the Y = X line (top-left to bottom-right).
            </summary>
        </member>
        <member name="T:ElmSharp.Index">
            <summary>
            The Index widget gives you an index for fast access to whichever group of the other UI items one might have.
            Inherits Layout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Index class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by Index as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Index.Changed">
            <summary>
            Changed will be triggered when the selected index item is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.AutoHide">
            <summary>
            Sets or gets whether the auto hiding feature is enabled or not for a given index widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.IsHorizontal">
            <summary>
            Sets or gets a value whether the horizontal mode is enabled or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.IndicatorVisible">
            <summary>
            Sets or gets a value of the indicator's disabled status.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.OmitEnabled">
            <summary>
            Sets or gets whether the omit feature is enabled or not for a given index widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.Delay">
            <summary>
            Sets a delay change time for the index object.
            The delay time is 0.2 seconds by default.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.Level">
            <summary>
            Gets or sets the items level for a given index widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.Priority">
            <summary>
            Controls the standard_priority group of the index.
            Priority group will be shown as many items as it can, and other group will be shown for one character only.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Index.SelectedItem">
            <summary>
            Gets the last selected item for a given index widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.Append(System.String)">
            <summary>
            Appends a new item on a given index widget.
            </summary>
            <param name="label">The label for which the item should be indexed.</param>
            <returns>An object to the IndexItem if added, or null on errors.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.Prepend(System.String)">
            <summary>
            Prepends a new item on a given index widget.
            </summary>
            <param name="label">The label for which the item should be indexed.</param>
            <returns>A handle to the item if added, or null on errors.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.InsertBefore(System.String,ElmSharp.IndexItem)">
            <summary>
            Inserts a new item into the index object before the item before.
            </summary>
            <param name="label">The label for which the item should be indexed.</param>
            <param name="before">The index item to insert after.</param>
            <returns>An object to the IndexItem if added, or null on errors.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.InsertAfter(System.String,ElmSharp.IndexItem)">
            <summary>
            Inserts a new item into the index object after the item after.
            </summary>
            <param name="label">The label for which the item should be indexed.</param>
            <param name="after">The index item to insert after.</param>
            <returns>An object to the IndexItem if added, or null on errors.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.Update(System.Int32)">
            <summary>
            Flushes the changes made to the index items so that they work correctly.
            </summary>
            <param name="level">The index level (one of 0 or 1) where the changes were made.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.Clear">
            <summary>
            Removes all the items from a given index widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Index.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.IndexItem">
            <summary>
            The IndexItem is used to manage the index item.
            Inherits ItemObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.IndexItem.#ctor(System.String)">
            <summary>
            Creates and initializes a new instance of the IndexItem class.
            </summary>
            <param name="text">The text is set to the Text. It's the 'string' type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.IndexItem.#ctor(System.String,ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the IndexItem class with parent
            </summary>
            <param name="text">The text is set to the Text. It's the 'string' type.</param>
            <param name="parent">Parent EvasObject</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.IndexItem.Selected">
            <summary>
            Selected will be triggered when the index item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.IndexItem.Text">
            <summary>
            Gets the text.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.IndexItem.Select(System.Boolean)">
            <summary>
            Sets the selected state of an item.
            </summary>
            <param name="selected">The selected state.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.InputDeviceType">
            <summary>
            Enumeration of device type generated events.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputDeviceType.TouchScreen">
            <summary>
            Touch Screen device.
            </summary>
        </member>
        <member name="F:ElmSharp.InputDeviceType.Keyboard">
            <summary>
            Keyboard device.
            </summary>
        </member>
        <member name="F:ElmSharp.InputDeviceType.Pointer">
            <summary>
            Mouse Device.
            </summary>
            <remarks>
            Since 3.0.
            </remarks>
        </member>
        <member name="T:ElmSharp.InputPointerType">
            <summary>
            Enumeration of pointer event types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputPointerType.MouseDown">
            <summary>
            Mouse button press.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPointerType.MouseUp">
            <summary>
            Mouse button release.
            </summary>
        </member>
        <member name="F:ElmSharp.InputPointerType.Move">
            <summary>
            Mouse move
            </summary>
        </member>
        <member name="T:ElmSharp.InputTouchType">
            <summary>
            Enumeration of touch event types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.InputTouchType.Begin">
            <summary>
            Finger press. It is same a behavior put your finger on touch screen.
            </summary>
        </member>
        <member name="F:ElmSharp.InputTouchType.Update">
            <summary>
            Finger move. It is same a behavior move your finger on touch screen.
            </summary>
        </member>
        <member name="F:ElmSharp.InputTouchType.End">
            <summary>
            Finger release. It is same a behavior release your finger on touch screen.
            </summary>
        </member>
        <member name="T:ElmSharp.InputGenerator">
            <summary>
            InputGenerator provides functions to initialize/deinitialize input devices and to generation touch / key events.
            </summary>
            <privilege>
            http://tizen.org/privilege/inputgenerator
            </privilege>
            <remarks>
            This is not for use by third-party applications.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.#ctor(ElmSharp.InputDeviceType)">
            <summary>
            Creates and initializes a new instance of the InputGenerator class.
            </summary>
            <param name="deviceType">The device type want to generate events</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.#ctor(ElmSharp.InputDeviceType,System.String)">
            <summary>
            Creates and initializes a new instance of the InputGenerator class with given name.
            </summary>
            <param name="deviceType">The device type want to generate events</param>
            <param name="name">The device name (maximum 31 characters)</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.Finalize">
            <summary>
            Destroys the InputGenerator object.
            </summary>
        </member>
        <member name="M:ElmSharp.InputGenerator.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed,
            otherwise false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.GenerateKeyEvent(System.String,System.Int32)">
            <summary>
            Generates all of key events using a opened device.
            </summary>
            <param name="key">The key name want to generate.</param>
            <param name="pressed">The value that select key press or release. (0: release, 1: press)</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.GenerateMouseEvent(System.Int32,ElmSharp.InputPointerType,System.Int32,System.Int32)">
            <summary>
            Generate a pointer event using a opened device
            </summary>
            <param name="buttons">The number of button.</param>
            <param name="type">The pointer type.</param>
            <param name="x">x coordination to move.</param>
            <param name="y">y coordination to move.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.InputGenerator.GenerateTouchEvent(System.Int32,ElmSharp.InputTouchType,System.Int32,System.Int32)">
            <summary>
            Generate a touch event using a opened device
            </summary>
            <param name="index">The index of touched finger.</param>
            <param name="type">The touch type.</param>
            <param name="x">The x axis of touch point.</param>
            <param name="y">The y axis of touch point.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemObject">
            <summary>
            The ItemObject is used to manage the item object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ItemObject.Parent">
            <summary>
            Gets the parent object for ItemObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.#ctor(System.IntPtr)">
            <summary>
            Creates and initializes a new instance of the ItemObject class.
            </summary>
            <param name="handle">IntPtr</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.#ctor(System.IntPtr,ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the ItemObject class with parent object.
            </summary>
            <param name="handle">IntPtr</param>
            <param name="parent">Parent EvasObject</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ItemObject.Id">
            <summary>
            Gets the ID of the item object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ItemObject.IsEnabled">
            <summary>
            Sets or gets whether the item object is enabled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ItemObject.TrackObject">
            <summary>
            Gets the track object of the item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ItemObject.Style">
            <summary>
            Sets or gets the style of the item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ItemObject.Deleted">
            <summary>
            Deleted will be triggered when the item object is deleted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.Delete">
            <summary>
            Deletes the item object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.SetPartContent(System.String,ElmSharp.EvasObject)">
            <summary>
            Sets a content of an object item and deletes the old content.
            </summary>
            <param name="part">The content part name (null for the default content).</param>
            <param name="content">The content of the object item.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.SetPartContent(System.String,ElmSharp.EvasObject,System.Boolean)">
            <summary>.
            Sets a content of the object item.
            </summary>
            <param name="part">The content part name (null for the default content)</param>
            <param name="content">The content of the object item.</param>
            <param name="preserveOldContent">Judge whether to delete the old content.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.SetPartText(System.String,System.String)">
            <summary>
            Sets the label of the object item.
            </summary>
            <param name="part">The text part name (null for the default label).</param>
            <param name="text">Text of the label.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.GetPartText(System.String)">
            <summary>
            Gets the label of the object item.
            </summary>
            <param name="part">The text part name (null for the default label).</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.SetPartColor(System.String,ElmSharp.Color)">
            <summary>
            Sets the color of the object item.
            </summary>
            <param name="part">The text part name (null for the default label).</param>
            <param name="color">The color.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.GetPartColor(System.String)">
            <summary>
            Gets the color of the object item.
            </summary>
            <param name="part">The text part name (null for the default label).</param>
            <returns>The color of an object item.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.DeletePartColor(System.String)">
            <summary>
            Deletes the color of the object item.
            </summary>
            <param name="part">The text part name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.AddSignalHandler(System.String,System.String,System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Adds a function for a signal emitted by the object item edje.
            </summary>
            <param name="emission">The signal's name.</param>
            <param name="source">The signal's source.</param>
            <param name="func">The function to be executed when the signal is emitted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.RemoveSignalHandler(System.String,System.String,System.Func{System.String,System.String,System.Boolean})">
            <summary>
            Removes a signal-triggered function from the object item edje object.
            </summary>
            <param name="emission">The signal's name.</param>
            <param name="source">The signal's source.</param>
            <param name="func">The function to be executed when the signal is emitted.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.EmitSignal(System.String,System.String)">
            <summary>
            Send a signal to the edje object of the widget item.
            </summary>
            <param name="emission">The signal's name.</param>
            <param name="source">The signal's source.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.op_Implicit(ElmSharp.ItemObject)~System.IntPtr">
            <summary>
            Gets the handle of the object item.
            </summary>
            <param name="obj">ItemObject</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObject.OnInvalidate">
            <summary>
            OnInvalidate of the object item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ItemObjectExtension">
            <summary>
            The ItemObjectExtension is used to manage the item object extension.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObjectExtension.GrabHighlight(ElmSharp.ItemObject)">
            <summary>
            Grabs the highlight of the item object.
            </summary>
            <param name="obj">The item object, which has grabbed the highlight.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ItemObjectExtension.ClearHighlight(ElmSharp.ItemObject)">
            <summary>
            Clears the highlight of the item object.
            </summary>
            <param name="obj">The item object, which has cleared the highlight.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Label">
            <summary>
            The Label is a widget to display text, with a simple HTML-like markup.
            Inherits Layout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Label.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Label class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the Label as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Label.SlideCompleted">
            <summary>
            SlideCompleted will be triggered when the slide is completed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.LineWrapWidth">
            <summary>
            Sets or gets the wrap width of the label.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.LineWrapType">
            <summary>
            Sets or gets the wrapping behavior of the label.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.SlideMode">
            <summary>
            Sets or gets the slide mode of the Label widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.SlideDuration">
            <summary>
            Sets or gets the slide duration of the label.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.SlideSpeed">
            <summary>
            Sets or gets the slide speed of the label.
            </summary>
            <remarks>
            The speed of the slide animation in px per seconds.
            If you set the duration of the slide using elm_label_slide_duration_set(), you cannot get the correct speed using this function until the label is actually rendered and resized.
            </remarks>
            <seealso cref="P:ElmSharp.Label.SlideDuration"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.IsEllipsis">
            <summary>
            Sets or gets the ellipsis behavior of the label.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Label.TextStyle">
            <summary>
            Sets or gets the style of the label text.
            </summary>
            <remarks>
            APIs, elm_label_text_style_user_peek/pop/push, are internal APIs only in Tizen. Available since Tizen_4.0.
            </remarks>
            
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Label.PlaySlide">
            <summary>
            Starts the slide effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Label.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Sets the content at a part of a given container widget.
            </summary>
            <param name="parent">EvasObject</param>
            <returns>The new object, otherwise null if it cannot be created.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.LabelSlideMode">
            <summary>
            Enumeration for the slide modes of a label widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.LabelSlideMode.None">
            <summary>
            No slide effect.
            </summary>
        </member>
        <member name="F:ElmSharp.LabelSlideMode.Auto">
            <summary>
            Slide only if the label area is bigger than the text width length.
            </summary>
        </member>
        <member name="F:ElmSharp.LabelSlideMode.Always">
            <summary>
            Slide always.
            </summary>
        </member>
        <member name="T:ElmSharp.Layout">
            <summary>
            This is a container widget that takes a standard edje design file and wraps it very thinly in a widget.
            Inherits Widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Layout class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the layout as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.#ctor">
            <summary>
            Creates and initializes a new instance of the Layout class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Layout.LanguageChanged">
            <summary>
            LanguageChanged will be triggered when the program's language is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Layout.ThemeChanged">
            <summary>
            ThemeChanged will be triggered when the theme is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Layout.EdjeObject">
            <summary>
            Gets the edje layout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Layout.TextBlockAccessibility">
            <summary>
            Gets or sets the accessibility state of texblock (text) parts in a layout object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.Freeze">
            <summary>
            Freezes the Elementary layout object.
            This function puts all the changes on hold.
            Successive freezes will nest, requiring an equal number of thaws.
            </summary>
            <returns>The frozen state, or 0 if the object is not frozen or on error.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.Thaw">
            <summary>
            Thaws the Elementary object.
            If sucessives freezes were done, an equal number of thaws will be required.
            </summary>
            <returns>The frozen state, or 0 if the object is not frozen or on error.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.Resizing">
            <summary>
            Eval sizing.
            Manually forces a sizing re-evaluation.
            This is useful when the minimum size required by the edje theme of this layout has changed.
            The change on the minimum size required by the edje theme is not immediately reported to the elementary layout, so one needs to call this function in order to tell the widget (layout) that it needs to reevaluate its own size.
            The minimum size of the theme is calculated based on the minimum size of parts, the size of elements inside containers like the box and table, etc.
            All of this can change due to state changes, and that's when this function should be called.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.Resizing(System.Boolean,System.Boolean)">
            <summary>
            Requests sizing re-evaluation, restricted to the current width and/or height.
            Useful mostly when there are TEXTBLOCK parts defining the height of an object and nothing else, restricting it to a minimum width. Calling this function will restrict minimum size in the Edje calculation to whatever size the layout has at the moment.
            </summary>
            <param name="width">Restrict minimum size of the current width.</param>
            <param name="height">Restrict minimum size of the current height.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.GetEdjeData(System.String)">
            <summary>
            Gets the edje data from the given layout.
            This function fetches the data specified inside the edje theme of this layout.
            This function returns null if the data is not found.
            </summary>
            <param name="key">The data key.</param>
            <returns>The data.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.GetPartText(System.String)">
            <summary>
            Gets the text set in the given part.
            </summary>
            <param name="part">The text part to retrieve the text off.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.SetPartText(System.String,System.String)">
            <summary>
            Sets the text set in the given part.
            </summary>
            <param name="part">The text part to retrieve the text off.</param>
            <param name="text">The text to set.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.BoxAppend(System.String,ElmSharp.EvasObject)">
            <summary>
            Appends a child to the layout box part.
            Once the object is appended, it will become a child of the layout.
            Its lifetime will be bound to the layout. Whenever the layout dies, the child will be deleted automatically.
            </summary>
            <remarks>
            This will only work if the layout edc have box part.
            </remarks>
            <param name="part">The part.</param>
            <param name="child">The object to append.</param>
            <returns>Success is true.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.BoxPrepend(System.String,ElmSharp.EvasObject)">
            <summary>
            Prepends a child to the layout box part.
            Once the object is prepended, it will become a child of the layout.
            Its lifetime will be bound to the layout. Whenever the layout dies, the child will be deleted automatically.
            </summary>
            <remarks>
            This will only work if the layout edc have box part.
            </remarks>
            <param name="part">The part.</param>
            <param name="child">The object to prepend.</param>
            <returns>Success is true.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.BoxRemove(System.String,ElmSharp.EvasObject)">
            <summary>
            Removes a child from the given part box.
            The object will be removed from the box part and its lifetime will not be handled by the layout anymore.
            </summary>
            <remarks>
            This will only work if the layout edc have box part.
            </remarks>
            <param name="part">The part.</param>
            <param name="child">The object to remove.</param>
            <returns>Success if true</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.BoxRemoveAll(System.String,System.Boolean)">
            <summary>
            Removes all the children from the given part box.
            The objects will be removed from the box part and their lifetime will not be handled by the layout anymore.
            </summary>
            <remarks>
            This will only work if the layout edc have box part.
            </remarks>
            <param name="part">The part.</param>
            <param name="clear">If true, then all the objects will be deleted as well, otherwise they will just be removed and will be dangling on the canvas.</param>
            <returns>Success if true.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.BoxInsertAt(System.String,ElmSharp.EvasObject,System.UInt32)">
            <summary>
            Inserts a child to the layout box part at a given position.
            Once the object is inserted, it will become a child of the layout.
            Its lifetime will be bound to the layout. Whenever the layout dies, the child will be deleted automatically.
            </summary>
            <remarks>
            This will only work if the layout edc have box part.
            </remarks>
            <param name="part">The part.</param>
            <param name="child">The child object to insert into the box.</param>
            <param name="position">The numeric position >=0 to insert the child.</param>
            <returns>Success if true.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.BoxInsertBefore(System.String,ElmSharp.EvasObject,ElmSharp.EvasObject)">
            <summary>
            Inserts a child to the layout box part before a reference object.
            Once the object is inserted, it will become child of the layout.
            Its lifetime will be bound to the layout. Whenever the layout dies, the child will be deleted automatically.
            </summary>
            <remarks>
            This will only work if the layout edc have box part.
            </remarks>
            <param name="part">The part.</param>
            <param name="child">The child object to insert into the box.</param>
            <param name="reference">Another reference object to insert before the box.</param>
            <returns>Success is true.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.SetPartContent(System.String,ElmSharp.EvasObject)">
            <summary>
            Sets the layout content.
            </summary>
            <param name="part">The swallow part name in the edje file.</param>
            <param name="content">The child that will be added in this layout object.</param>
            <returns>TRUE on success, FALSE otherwise.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.SetPartContent(System.String,ElmSharp.EvasObject,System.Boolean)">
            <summary>
            Sets the layout content.
            </summary>
            <param name="part">The name of a particular part.</param>
            <param name="content">The content.</param>
            <param name="preserveOldContent">true, preserve old content will be unset. false, preserve old content will not be unset.</param>
            <returns>TRUE on success, FALSE otherwise.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.SetTheme(System.String,System.String,System.String)">
            <summary>
            Sets the edje group from the elementary theme that is used as a layout.
            </summary>
            <param name="klass">The class of the group.</param>
            <param name="group">The group.</param>
            <param name="style">The style to use.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.SetFile(System.String,System.String)">
            <summary>
            Sets the file that is used as a layout.
            </summary>
            <param name="file">The path to the file (edje) that is used as a layout.</param>
            <param name="group">The group that the layout belongs to in the edje file.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Layout.BackgroundColor">
            <summary>
            Sets the background color of a layout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.SetVerticalTextAlignment(System.String,System.Double)">
            <summary>
            Sets the vertical text alignment of the layout's text part.
            </summary>
            <remarks>
            API, elm_layout_text_valign_set, is an internal API only in Tizen. Available since Tizen_4.0.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.GetVerticalTextAlignment(System.String)">
            <summary>
            Gets the vertical text alignment of the layout's text part.
            </summary>
            <remarks>
            API, elm_layout_text_valign_get, is an internal API only in Tizen. Available since Tizen_4.0.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.OnRealized">
            <summary>
            The callback of the Realized Event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Layout.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Sets the content at a part of a given container widget.
            </summary>
            <param name="parent">The parent is a given container which will be attached by the layout as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <returns>The new object, otherwise null if it cannot be created.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ListMode">
            <summary>
            Enumeration for setting the list's resizing behavior, transverse axis scrolling, and items cropping.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ListMode.Compress">
            <summary>
            The list won't set any of its size hints to inform how a possible container should resize it.
            Then, if it's not created as a "resize object", it might end with zeroed dimensions.
            The list will respect the container's geometry, and if any of its items won't fit into its transverse axis, one won't be able to scroll it in that direction.
            </summary>
        </member>
        <member name="F:ElmSharp.ListMode.Scroll">
            <summary>
            This is the same as Compress, with the exception that if any of its items won't fit into its transverse axis, one will be able to scroll it in that direction.
            </summary>
        </member>
        <member name="F:ElmSharp.ListMode.Limit">
            <summary>
            Sets a minimum size hint on the genlist object, so that the containers may respect it (and resize itself to fit the child properly).
            More specifically, a minimum size hint will be set for its transverse axis, so that the largest item in that direction fits well.
            This is naturally bound by the list object's maximum size hints, set externally.
            </summary>
        </member>
        <member name="F:ElmSharp.ListMode.Expand">
            <summary>
            Besides setting a minimum size on the transverse axis, just like on limit, the list will set a minimum size on the longitudinal axis, trying to reserve space to all its children to be visible at a time.
            This is naturally bound by the list object's maximum size hints, set externally.
            </summary>
        </member>
        <member name="T:ElmSharp.ListItemEventArgs">
            <summary>
            It inherits System.EventArgs.
            It contains an item which is <see cref="T:ElmSharp.ListItem"/> type.
            All the events of a list contain ListItemEventArgs as a parameter.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ListItemEventArgs.Item">
            <summary>
            Gets or sets the list item. The return type is <see cref="T:ElmSharp.ListItem"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.List">
            <summary>
            It inherits <see cref="T:ElmSharp.Layout"/>.
            The List is a widget that aims to display a simple list item which has 2 icons, 1 text, and can be selected.
            For more robust lists, <see cref="T:ElmSharp.GenList"/> should probably be used.
            </summary>
            <seealso cref="T:ElmSharp.GenList"/>
            <seealso cref="T:ElmSharp.GenGrid"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the List class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the list as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.List.Mode">
            <summary>
            Gets or sets which mode to be used for the list.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.List.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.List.ItemSelected">
            <summary>
            ItemSelected is raised when a new list item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.List.ItemUnselected">
            <summary>
            ItemUnselected is raised when a list item is Unselected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.List.ItemDoubleClicked">
            <summary>
            ItemDoubleClicked is raised when a new list item is double-clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.List.ItemLongPressed">
            <summary>
            ItemLongPressed is raised when a list item is pressed for a certain amount of time. By default, it's 1 second.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.List.ItemActivated">
            <summary>
            ItemActivated is raised when a new list item is double-clicked or pressed (enter|return|spacebar).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.Update">
            <summary>
            Starts the list.
            Called before running <see cref="M:ElmSharp.EvasObject.Show"/> on the list object.
            If not called, it won't display the list properly.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.Append(System.String)">
            <summary>
            Appends a new item with a text to the end of a given list widget.
            </summary>
            <param name="label">The text for the item.</param>
            <returns>Return a new added list item that contains a text.</returns>
            <seealso cref="T:ElmSharp.ListItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.Append(System.String,ElmSharp.EvasObject,ElmSharp.EvasObject)">
            <summary>
            Appends a new item with a text and 2 icons to the end of a given list widget.
            </summary>
            <param name="label">The text for the item.</param>
            <param name="leftIcon">The left icon for the item.</param>
            <param name="rightIcon">The right icon for the item.</param>
            <returns>Return a new added list item that contains a text and 2 icons.</returns>
            <seealso cref="T:ElmSharp.ListItem"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.Prepend(System.String)">
            <summary>
            Prepends a new item with a text to the beginning of a given list widget.
            </summary>
            <param name="label">The text for the item.</param>
            <returns>Return a new added list item that contains a text.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.Prepend(System.String,ElmSharp.EvasObject,ElmSharp.EvasObject)">
            <summary>
            Prepends a new item with a text and 2 icons to the beginning of a given list widget.
            </summary>
            <param name="label">The text for the item.</param>
            <param name="leftIcon">The left icon for the item.</param>
            <param name="rigthIcon">The right icon for the item.</param>
            <returns>Return a new added list item that contains a text and 2 icons.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.Clear">
            <summary>
            Removes all the items from a given list widget.
            To delete just one item, use <see cref="M:ElmSharp.ItemObject.Delete"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.List.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ListItem">
            <summary>
            It inherits <see cref="T:ElmSharp.ItemObject"/>.
            An instance to the list item is added.
            It contains the Text, LeftIcon, and RightIcon properties to show the list item which is given.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ListItem.Text">
            <summary>
            Gets the text for the list item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ListItem.LeftIcon">
            <summary>
            Gets the left icon for the list item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ListItem.RightIcon">
            <summary>
            Gets the right icon for the list item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.MultiButtonEntry">
            <summary>
            It inherits <see cref="T:ElmSharp.Layout"/>.
            The MultiButtonEntry is a widget, that lets a user enter text and each chunk of the text managed as a set of buttons.
            Each text button is inserted by pressing the "return" key. If there is no space in the current row, a new button is added to the next row.
            When a text button is pressed, it will become focused. Backspace removes the focus. When the multi-button entry loses focus, items longer than one line are shrunk to one line.
            The typical use case of multi-button entry is composing emails/messages to a group of addresses, each of which is an item that can be clicked for further actions.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the MultiButtonEntry class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the MultiButtonEntry as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.Clicked">
            <summary>
            Clicked is raised when a MultiButtonEntry is clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.Expanded">
            <summary>
            Expanded is raised when a MultiButtonEntry is expanded.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.Contracted">
            <summary>
            Contracted is raised when a MultiButtonEntry is contracted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.ExpandedStateChanged">
            <summary>
            ExpandedStateChanged is raised when shrink mode state of MultiButtonEntry is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.ItemSelected">
            <summary>
            ItemSelected is raised when an item is selected by API, user interaction, and etc.
            This is also raised when a user presses backspace, while the cursor is on the first field of the entry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.ItemClicked">
            <summary>
            ItemClicked is raised when an item is clicked by user interaction.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.ItemLongPressed">
            <summary>
            ItemLongPressed is raised when MultiButtonEntry item is pressed for a long time.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.ItemAdded">
            <summary>
            ItemAdded is raised when a new MultiButtonEntry item is added.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.MultiButtonEntry.ItemDeleted">
            <summary>
            ItemDeleted is raised when a MultiButtonEntry item is deleted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntry.SelectedItem">
            <summary>
            Gets the selected item in the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntry.IsEditable">
            <summary>
            Gets or sets whether the MultiButtonEntry is editable or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntry.IsExpanded">
            <summary>
            Gets or sets the MultiButtonEntry to expanded state.
            If true, expanded state.
            If false, single line state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntry.FirstItem">
            <summary>
            Gets the first item in the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntry.LastItem">
            <summary>
            Gets the last item in the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntry.Entry">
            <summary>
            Gets the entry object int the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.Append(System.String)">
            <summary>
            Appends a new item to the multibuttonentry.
            </summary>
            <param name="label">The label of the new item.</param>
            <returns>A MultiButtonEntryItem to the item added.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.Prepend(System.String)">
            <summary>
            Prepends a new item to the MultiButtonEntry.
            </summary>
            <param name="label">The label of the new item.</param>
            <returns>A MultiButtonEntryItem to the item added.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.InsertBefore(ElmSharp.MultiButtonEntryItem,System.String)">
            <summary>
            Adds a new item to the MultiButtonEntry before the indicated object reference.
            </summary>
            <param name="before">The item before which to add it.</param>
            <param name="label">The label of new item.</param>
            <returns>A MultiButtonEntryItem to the item added.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.InsertAfter(ElmSharp.MultiButtonEntryItem,System.String)">
            <summary>
            Adds a new item to the MultiButtonEntry after the indicated object.
            </summary>
            <param name="after">The item after which to add it.</param>
            <param name="label">The label of new item.</param>
            <returns>A MultiButtonEntryItem to the item added.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.Clear">
            <summary>
            Removes all items in the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.AppendFilter(System.Func{System.String,System.Boolean})">
            <summary>
            Appends an item filter function for the text inserted in the multibuttonentry.
            </summary>
            <param name="func">The function to use as item filter.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.PrependFilter(System.Func{System.String,System.Boolean})">
            <summary>
            Prepends a filter function for the text inserted in the MultiButtonEntry.
            </summary>
            <param name="func">The function to use as text filter.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.RemoveFilter(System.Func{System.String,System.Boolean})">
            <summary>
            Removes a filter from the list.
            </summary>
            <param name="func">The filter function to remove.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.SetFormatCallback(System.Func{System.Int32,System.String})">
            <summary>
            Sets a function to format the string that will be used to display the hidden items counter.
            If func is NULL, the default format will be used, which is "+ 'the hidden items counter'".
            </summary>
            <param name="func">The function to return string to show.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.EntryInner.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the EntryInner class.
            </summary>
            <param name="parent">The parent is a given container, which will be attached by the MultiButtonEntry as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
        </member>
        <member name="M:ElmSharp.MultiButtonEntry.EntryInner.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
        </member>
        <member name="T:ElmSharp.MultiButtonEntryItemEventArgs">
            <summary>
            It inherits System.EventArgs.
            The MultiButtonEntryItemEventArgs is a argument for all events of MultiButtonEntry.
            It contains the Item which is <see cref="T:ElmSharp.MultiButtonEntryItem"/> type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntryItemEventArgs.Item">
            <summary>
            Gets or sets the MultiButtonEntryItem item. The return type is <see cref="T:ElmSharp.MultiButtonEntryItem"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.MultiButtonEntryItem">
            <summary>
            It inherits <see cref="T:ElmSharp.ItemObject"/>.
            MutltiButtonEntryItem is an item, which is added to MultiButtonEntry.
            It contains Next and Prev properties to get the next and previous item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.MultiButtonEntryItem.#ctor(System.String)">
            <summary>
            Creates and initializes a new instance of the MultiButtonEntryItem class.
            </summary>
            <param name="text">The text of the MultiButtonEntryItem's label name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntryItem.Label">
            <summary>
            Gets the label of this item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntryItem.IsSelected">
            <summary>
            Gets or sets the selected state of an item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntryItem.Next">
            <summary>
            Get the next item in the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.MultiButtonEntryItem.Prev">
            <summary>
            Get the previous item in the MultiButtonEntry.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.NamedHint">
            <summary>
            Predefined values for the hint properties in EvasObject.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.NamedHint.Expand">
            <summary>
            This value can be used for <see cref="P:ElmSharp.EvasObject.WeightX"/> and <see cref="P:ElmSharp.EvasObject.WeightY"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.NamedHint.Fill">
            <summary>
            This value can be used for <see cref="P:ElmSharp.EvasObject.AlignmentX"/> and <see cref="P:ElmSharp.EvasObject.AlignmentY"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.NaviframeEventArgs">
            <summary>
            The NaviframeEventArgs is an event arguments class for naviframe.
            Inherits EventArgs.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.NaviframeEventArgs.Content">
            <summary>
            Sets or gets the content object. The name of the content part is "elm.swallow.content".
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Naviframe">
            <summary>
            The Naviframe is a widget to stand for the navigation frame. It's a views manager for applications.
            Inherits Widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Naviframe class.
            </summary>
            <param name="parent">The parent is a given container which will be attached by Naviframe as a child. It's <see cref="T:ElmSharp.EvasObject"/> type.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Naviframe.Popped">
            <summary>
            Popped will be triggered when the NaviItem is removed.
            </summary>
            <remarks>
            It is always called when the NaviItem is removed.
            (even if removed by NaviItem.Delete())
            This event will be invoked in progress of the Pop/Delete operation.
            After calling the Popped event, the Pop/Delete method will be returned.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Naviframe.AnimationFinished">
            <summary>
            AnimationFinished will be triggered when the animation is finished.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Naviframe.NavigationStack">
            <summary>
            Gets the list of the navi item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Naviframe.PreserveContentOnPop">
            <summary>
            Sets or gets the preserve content objects when items are popped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Naviframe.DefaultBackButtonEnabled">
            <summary>
            Sets or gets whether the default back button is enabled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.Push(ElmSharp.EvasObject)">
            <summary>
            Pushes a new item to the top of the naviframe stack and shows it.
            The title and style are null.
            </summary>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.Push(ElmSharp.EvasObject,System.String)">
            <summary>
            Pushes a new item to the top of the naviframe stack and shows it.
            The style is null.
            </summary>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <param name="title">The current item title. Null would be default.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.Push(ElmSharp.EvasObject,System.String,System.String)">
            <summary>
            Pushes a new item to the top of the naviframe stack and shows it.
            </summary>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <param name="title">The current item title. Null would be default.</param>
            <param name="style">The current item style name. Null would be default.</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.InsertBefore(ElmSharp.NaviItem,ElmSharp.EvasObject)">
            <summary>
            Inserts a new item into the naviframe before the item.
            The title is "" and the style is null.
            </summary>
            <param name="before">The item for which a new item is inserted before.</param>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.InsertBefore(ElmSharp.NaviItem,ElmSharp.EvasObject,System.String)">
            <summary>
            Inserts a new item into the naviframe before the item.
            The style is null.
            </summary>
            <param name="before">The item for which a new item is inserted before.</param>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <param name="title">The current item title. Null would be default.</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.InsertBefore(ElmSharp.NaviItem,ElmSharp.EvasObject,System.String,System.String)">
            <summary>
            Inserts a new item into the naviframe before the item.
            </summary>
            <param name="before">The item for which a new item is inserted before.</param>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <param name="title">The current item title. Null would be default.</param>
            <param name="style">The current item style name. Null would be default.</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.InsertAfter(ElmSharp.NaviItem,ElmSharp.EvasObject)">
            <summary>
            Inserts a new item into the naviframe after the item.
            The title is "" and the style is null.
            </summary>
            <param name="after">The item for which a new item is inserted after.</param>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.InsertAfter(ElmSharp.NaviItem,ElmSharp.EvasObject,System.String)">
            <summary>
            Inserts a new item into the naviframe after the item.
            The style is null.
            </summary>
            <param name="after">The item which a new item is inserted after.</param>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <param name="title">The current item title. Null would be default.</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.InsertAfter(ElmSharp.NaviItem,ElmSharp.EvasObject,System.String,System.String)">
            <summary>
            Inserts a new item into the naviframe after the item.
            </summary>
            <param name="after">The item for which a new item is inserted after.</param>
            <param name="content">The main content object. The name of the content part is "elm.swallow.content".</param>
            <param name="title">The current item title. Null would be default.</param>
            <param name="style">The current item style name. Null would be default.</param>
            <returns>The created item, or null upon failure.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.Pop">
            <summary>
            Pops an item that is on top of the stack.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Naviframe.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.NaviItem">
            <summary>
            The NaviItem is a widget that contain the contents to show in Naviframe.
            Inherits ItemObject
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.NaviItem.Popped">
            <summary>
            Popped will be triggered when NaviItem is removed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.NaviItem.Content">
            <summary>
            Gets the content object. The name of the content part is "elm.swallow.content".
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.NaviItem.TitleBarVisible">
            <summary>
            Sets or gets a value whether the title area is enabled or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.NaviItem.TitleBarBackgroundColor">
            <summary>
             Sets or gets the title bar background color.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.NaviItem.Style">
            <summary>
            Sets or gets an item style.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.NaviItem.OnInvalidate">
            <summary>
            Invalidates the EventArgs if _isPopped is false.
            The method should be overridden in the children class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.PanelDirection">
            <summary>
            Enumeration for the PanelDirection types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.PanelDirection.Top">
            <summary>
            Top to bottom.
            </summary>
        </member>
        <member name="F:ElmSharp.PanelDirection.Bottom">
            <summary>
            Bottom to top.
            </summary>
        </member>
        <member name="F:ElmSharp.PanelDirection.Left">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:ElmSharp.PanelDirection.Right">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:ElmSharp.Panel">
            <summary>
            The Panel is a container that can contain subobjects.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panel.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Panel class.
            </summary>
            <param name="parent">The EvasObject to which the new panel will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panel.IsOpen">
            <summary>
            Sets or gets the hidden status of a given Panel widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panel.Direction">
            <summary>
            Sets or gets the direction of a given Panel widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Panel.Toggled">
            <summary>
            Toggled will be triggered when the panel is toggled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Panel.Scrolled">
            <summary>
            Scrolled will be triggered when the panel has been scrolled. This event is emitted only when the panel is scrollable
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panel.SetScrollable(System.Boolean)">
            <summary>
            Enable or disable scrolling in the panel.
            </summary>
            <param name="enable">
            Bool value can be false or true.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panel.SetScrollableArea(System.Double)">
            <summary>
            Sets the scroll size of the panel.
            </summary>
            <param name="ratio">
            The size of the scroll area.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panel.Toggle">
            <summary>
            Toggles the hidden state of the panel.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panel.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Panes">
            <summary>
            The Panes is a widget that adds a draggable bar between two contents.
            When dragged, this bar resizes the contents' size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panes.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Panes class.
            </summary>
            <param name="parent">The EvasObject to which the new Panes will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Panes.Pressed">
            <summary>
            Pressed will be triggered when the panes have been pressed (button isn't released yet).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Panes.Unpressed">
            <summary>
            Unpressed will be triggered when the panes are released after being pressed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.IsFixed">
            <summary>
            Sets or gets the resize mode of a given Panes widget.
            True means the left and right panes resize homogeneously.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.Proportion">
             <summary>
             Sets or gets the size proportion of the Panes widget's left side.
             </summary>
             <remarks>
             By default, it's homogeneous, i.e., both sides have the same size. If something different is required,
             it can be set with this function. For example, if the left content should be displayed over 75% of the panes size,
             the size should be passed as 0.75. This way, the right content is resized to 25% of the panes size.
             If displayed vertically, left content is displayed at the top and right content at the bottom.
             This proportion changes when the user drags the panes bar.
            
             The float type value between 0.0 and 1.0 represents the size proportion of the left side.
             </remarks>
             <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.IsHorizontal">
            <summary>
            Sets or gets the orientation of a given Panes widget.
            </summary>
            <remarks>
            Use this function to change how your panes are to be disposed: vertically or horizontally.
            Horizontal panes have "top" and "bottom" contents, vertical panes have "left" and "right" contents.
            By default, the panes are in a vertical mode.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.LeftMinimumSize">
            <summary>
            Sets or gets the absolute minimum size of panes widget's left side.
            If displayed vertically, left content is displayed at the top.
            The value represents minimum size of the left side in pixels.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.LeftMinimumRelativeSize">
            <summary>
            Sets or gets the relative minimum size of the panes widget's left side.
            The proportion of minimum size of the left side.
            If displayed vertically, left content is displayed at the top.
            The value between 0.0 and 1.0 represents size proportion of the minimum size of the left side.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.RightMinimumSize">
            <summary>
            Sets or gets the absolute minimum size of the panes widget's right side.
            If displayed vertically, right content is displayed at the top.
            The value represents the minimum size of the right side in pixels.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Panes.RightMinimumRelativeSize">
            <summary>
            Sets or gets the relative minimum size of the panes widget's right side.
            Proportion of the minimum size of the right side.
            If displayed vertically, right content is displayed at the top.
            The value between 0.0 and 1.0 represents size proportion of the minimum size of the right side.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Panes.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Point">
            <summary>
            The Point is a struct that defines the 2D point as a pair of generic type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Point.X">
            <summary>
            Location along the horizontal axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Point.Y">
            <summary>
            Location along the vertical axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point.ToString">
            <summary>
            A human readable representation of <see cref="T:ElmSharp.Point"/>.
            </summary>
            <returns>The string is formatted as "{{X={0} Y={1}}}".</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point.Equals(ElmSharp.Point)">
            <summary>
            Indicates whether this instance and a <see cref="T:ElmSharp.Point"/> object are equal.
            </summary>
            <param name="other">The <see cref="T:ElmSharp.Point"/> to compare with the current instance.</param>
            <returns>
            true if the object and this instance are the same type and represent the same value,
            otherwise false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point.op_Equality(ElmSharp.Point,ElmSharp.Point)">
            <summary>
            Whether both <see cref="T:ElmSharp.Point"/>s are equal.
            </summary>
            <param name="p1">A <see cref="T:ElmSharp.Point"/> on the left hand side.</param>
            <param name="p2">A <see cref="T:ElmSharp.Point"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Point"/>s have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point.op_Inequality(ElmSharp.Point,ElmSharp.Point)">
            <summary>
            Whether both <see cref="T:ElmSharp.Point"/>s are not equal.
            </summary>
            <param name="p1">A <see cref="T:ElmSharp.Point"/> on the left hand side.</param>
            <param name="p2">A <see cref="T:ElmSharp.Point"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Point"/>s do not have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Point3D">
            <summary>
            The Point3D is a struct that defines a 3D point.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Point3D.X">
            <summary>
            The X-coordinate of a 3D point.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Point3D.Y">
            <summary>
            The Y-coordinate of a 3D point.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Point3D.Z">
            <summary>
            The Z-coordinate of a 3D point.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point3D.ToString">
            <summary>
            A human-readable representation of <see cref="T:ElmSharp.Point3D"/>.
            </summary>
            <returns>The string is formatted as "{{X={0} Y={1} Z={2}}}".</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point3D.GetHashCode">
            
             <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point3D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point3D.Equals(ElmSharp.Point3D)">
            <summary>
            Indicates whether this instance and a <see cref="T:ElmSharp.Point3D"/> object are equal.
            </summary>
            <param name="other">The <see cref="T:ElmSharp.Point3D"/> to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value.
            otherwise, false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point3D.op_Equality(ElmSharp.Point3D,ElmSharp.Point3D)">
            <summary>
            Whether both <see cref="T:ElmSharp.Point3D"/>s are equal.
            </summary>
            <param name="p1">A <see cref="T:ElmSharp.Point3D"/> on the left hand side.</param>
            <param name="p2">A <see cref="T:ElmSharp.Point3D"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Point3D"/>s have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Point3D.op_Inequality(ElmSharp.Point3D,ElmSharp.Point3D)">
            <summary>
            Whether both <see cref="T:ElmSharp.Point3D"/>s are not equal.
            </summary>
            <param name="p1">A <see cref="T:ElmSharp.Point3D"/> on the left hand side.</param>
            <param name="p2">A <see cref="T:ElmSharp.Point3D"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Point3D"/>s do not have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Polygon">
            <summary>
            The Polygon is a widget that is used to draw a polygon (filled).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Polygon.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Polygon class.
            <param name="parent">The EvasObject to which the new Polygon will be attached as a child.</param>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Polygon.AddPoint(System.Int32,System.Int32)">
            <summary>
            Adds a new vertex to the polygon.
            <param name="x">The X-coordinate of the new vertex.</param>
            <param name="y">The Y-coordinate of the new vertex.</param>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Polygon.AddPoint(ElmSharp.Point)">
            <summary>
            Adds a new vertex to the polygon.
            <param name="p">The coordinates of the new vertex.</param>
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Polygon.ClearPoints">
            <summary>
            Removes all the vertices of the polygon, making it empty.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Polygon.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.PopupOrientation">
            <summary>
            Enumeration for the popup orientation types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.PopupOrientation.Top">
            <summary>
            Appears in the top of parent, by default.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.Center">
            <summary>
            Appears in the center of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.Bottom">
            <summary>
            Appears in the bottom of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.Left">
            <summary>
            Appears in the left of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.Right">
            <summary>
            Appears in the right of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.TopLeft">
            <summary>
            Appears in the top left of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.TopRight">
            <summary>
            Appears in the top right of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.BottomLeft">
            <summary>
            Appears in the bottom left of parent.
            </summary>
        </member>
        <member name="F:ElmSharp.PopupOrientation.BottomRight">
            <summary>
            Appears in the bottom right of parent.
            </summary>
        </member>
        <member name="T:ElmSharp.Popup">
            <summary>
            The Popup is a widget that is an enhancement of notify.
            In addition to content area, there are two optional sections, namely title area and action area.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Popup.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Popup class.
            </summary>
            <param name="parent">The EvasObject to which the new popup will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Popup.Dismissed">
            <summary>
            Dismissed will be triggered when the popup has been dismissed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Popup.OutsideClicked">
            <summary>
            OutsideClicked will be triggered when users taps on the outside of Popup.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Popup.TimedOut">
            <summary>
            OutsideClicked will be triggered when the popup is closed as a result of timeout.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Popup.ShowAnimationFinished">
            <summary>
            OutsideClicked will be triggered when the popup transition has finished in showing.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.Orientation">
            <summary>
            Sets or gets the position in which the popup will appear in its parent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.ContentTextWrapType">
            <summary>
            Sets or gets the wrapping type of content text packed in the content area of Popup widget.
            </summary>
            <remarks>
            Popup need to wrap the content text, so not allowing WrapType.None.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.Timeout">
            <summary>
            Sets or gets the timeout value set to the popup (in seconds).
            </summary>
            <remarks>
            Since calling Show() on a popup restarts the timer controlling when it is hidden,
            setting this before the popup is shown, will in effect mean starting the timer when the popup is shown.
            TimedOut is called afterwards, which can be handled, if needed.
            <![CDATA[Set a value <= 0.0 to disable a running timer. If the value is > 0.0 and the popup is previously visible,]]>
            the timer will be started with this value, canceling any running timer.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.AllowEvents">
            <summary>
            Sets or gets whether events should be passed to the event blocked area by a click outside.
            </summary>
            <remarks>
            The visible region of the popup is surrounded by a translucent region called the Blocked event area.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.AlignmentX">
            <summary>
            Sets or gets the AlignmentX in which the popup will appear in its parent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.AlignmentY">
            <summary>
            Sets or gets the AlignmentY in which the popup will appear in its parent.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Popup.Opacity">
            <summary>
            Gets the opacity value of the popup.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Popup.Append(System.String)">
            <summary>
            Adds the label to a Popup widget.
            </summary>
            <param name="label"></param>
            <returns>The new PopupItem which contains a label.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Popup.Append(System.String,ElmSharp.EvasObject)">
            <summary>
            Adds the Label and icon to a Popup widget.
            </summary>
            <param name="label">The Label, which will be added into a new PopupItem.</param>
            <param name="icon">The icon, which will be added into a new PopupItem. </param>
            <returns>The new PopupItem, which contains the label and icon.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Popup.Dismiss">
            <summary>
            Uses this function to dismiss the popup in hide effect.
            When the Popup is dismissed, the "dismissed" signal will be emitted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Popup.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.PopupItem">
            <summary>
            The PopupItem is a class that includes the icon and text.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.PopupItem.Text">
            <summary>
            Gets the text label of the popupitem. Return value is string.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.PopupItem.Icon">
            <summary>
            Gets the EvasObject icon of the popupitem.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.PreloadedWindow">
            <summary>
            Pre-created window which prepares features that takes time in advance.
            </summary>
        </member>
        <member name="T:ElmSharp.ProgressBar">
            <summary>
            The ProgressBar is a widget for visually representing the progress status of a given job or task.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the ProgressBar class.
            </summary>
            <param name="parent">The EvasObject to which the new ProgressBar will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ProgressBar.ValueChanged">
            <summary>
            ValueChanged will be triggered when the value of the ProgressBar changes.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.IsPulseMode">
            <summary>
            Sets or gets the value whether a given ProgressBar widget is at the "pulsing mode".
            </summary>
            <remarks>
            By default, progress bars display values from low to high value boundaries.
            There are, though, contexts in which the progress of a given task is unknown.
            For such cases, one can set the progress bar widget to a "pulsing state",
            to give the user an idea that some computation is being held,
            but without the exact progress values. In the default theme,
            it animates its bar with the contents filling in constantly and back to non-filled, in a loop.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.Value">
            <summary>
            Sets or gets the value of the ProgressBar.
            </summary>
            <remarks>
            Use this property to set the progress bar levels.
            If you pass a value out of the specified range (0.0~1.0),
            it is interpreted as the closest of the boundary values in the range.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.SpanSize">
            <summary>
            Sets or gets the span value of the ProgressBar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.IsHorizontal">
            <summary>
            Sets or gets the value whether a given ProgressBar widget is horizontal.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.IsInverted">
            <summary>
            Sets or gets the value whether a given progress bar widget's displaying values are inverted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.UnitFormat">
            <summary>
            Sets or gets the format string for a given progress bar widget's units label.
            </summary>
            <remarks>
            If null is passed on format, it makes the object units area to be hidden completely.
            If not, it sets the format string for the units label's text.
            The units label are provided with a floating point value, so the units text displays at the most one floating point value.
            Note that the units label is optional. Use a format string such as "%1.2f meters" for example.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.PlayPulse">
            <summary>
            Starts a given progress bar "pulsing" animation, if its under that mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.StopPluse">
            <summary>
            Stops a given progress bar "pulsing" animation, if its under that mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.StopPulse">
            <summary>
            Stops a given progress bar "pulsing" animation, if its under that mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.GetPartValue(System.String)">
            <summary>
            Gets the part value of a given part of the Progressbar.
            </summary>
            <param name="part">Part of the Progressbar.</param>
            <returns>Value range is from 0.0 to 1.0.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ProgressBar.Color">
            <summary>
            Sets or gets the general or main color of the given Progressbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.SetPartValue(System.String,System.Double)">
            <summary>
            Sets the part value of a given part of the Progressbar.
            </summary>
            <param name="part">Part of the Progressbar.</param>
            <param name="value">Value range is from 0.0 to 1.0.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ProgressBar.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Radio">
            <summary>
            The Radio is a widget that allows for 1 or more options to be displayed, and have the user choose only 1 of them.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Radio.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Radio class.
            </summary>
            <param name="parent">The EvasObject to which the new Radio will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Radio.ValueChanged">
            <summary>
            ValueChanged will be triggered when value of the radio changes.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Radio.StateValue">
            <summary>
            Sets or gets a unique value to each radio button.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Radio.GroupValue">
            <summary>
            Sets or gets the value of the radio group.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Radio.SetGroup(ElmSharp.Radio)">
            <summary>
            Adds this radio to a group of other radio objects.
            </summary>
            <param name="group">Group which add radio in.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Radio.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Rect">
            <summary>
            The Rect is a struct that represents the rectangular space.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new instance of the Rect class.
            </summary>
            <param name="x">X-axis value.</param>
            <param name="y">Y-axis value.</param>
            <param name="w">Width value.</param>
            <param name="h">Height value.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.X">
            <summary>
            Gets or sets the position of this rectangle on the X-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Y">
            <summary>
            Gets or sets the position of this rectangle on the Y-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Width">
            <summary>
            Gets or sets the width of this rectangle.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Height">
            <summary>
            Gets or sets the height of this rectangle.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Left">
            <summary>
            Gets the position of this rectangle on the X-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Right">
            <summary>
            Gets the extent along the X-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Top">
            <summary>
            Gets the position of this rectangle on the Y-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Bottom">
            <summary>
            Gets the extent along the Y-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Location">
            <summary>
            Gets the point defined by Rectangle.Left and Rectangle.Top.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Rect.Size">
            <summary>
            Gets the extent of the rectangle along its X-axis and Y-axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.ToString">
            <summary>
            A human-readable representation of <see cref="T:ElmSharp.Rect"/>.
            </summary>
            <returns>The string is formatted as "{{X={0} Y={1} Width={2} Height={3}}}".</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.Equals(ElmSharp.Rect)">
            <summary>
            Indicates whether this instance and a <see cref="T:ElmSharp.Rect"/> object are equal.
            </summary>
            <param name="other">The <see cref="T:ElmSharp.Rect"/> to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise, false
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.op_Equality(ElmSharp.Rect,ElmSharp.Rect)">
            <summary>
            Whether both <see cref="T:ElmSharp.Rect"/>'s are equal.
            </summary>
            <param name="r1">A <see cref="T:ElmSharp.Rect"/> on the left hand side.</param>
            <param name="r2">A <see cref="T:ElmSharp.Rect"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Rect"/>'s have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rect.op_Inequality(ElmSharp.Rect,ElmSharp.Rect)">
            <summary>
            Whether both <see cref="T:ElmSharp.Rect"/>'s are not equal.
            </summary>
            <param name="r1">A <see cref="T:ElmSharp.Rect"/> on the left hand side.</param>
            <param name="r2">A <see cref="T:ElmSharp.Rect"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Rect"/>'s do not have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Rectangle">
            <summary>
            The Rectangle is a class that is used to draw a solid colored rectangle.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rectangle.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Rectangle class.
            </summary>
            <param name="parent">The <see cref="T:ElmSharp.EvasObject"/> to which the new slider will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Rectangle.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ScrollBarVisiblePolicy">
            <summary>
            Enumeration for the visible type of scrollbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ScrollBarVisiblePolicy.Auto">
            <summary>
            Show scrollbars as needed.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollBarVisiblePolicy.Visible">
            <summary>
            Always show scrollbars.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollBarVisiblePolicy.Invisible">
            <summary>
            Never show scrollbars.
            </summary>
        </member>
        <member name="T:ElmSharp.ScrollBlock">
            <summary>
            Enumeration for the visible type of scrollbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ScrollBlock.None">
            <summary>
            Scrolling movement is allowed in both the directions (X-axis and Y-axis).
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollBlock.Vertical">
            <summary>
            Scrolling movement is not allowed in the Y-axis direction.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollBlock.Horizontal">
            <summary>
            Scrolling movement is not allowed in the X-axis direction.
            </summary>
        </member>
        <member name="T:ElmSharp.ScrollSingleDirection">
            <summary>
            Type that controls how the content is scrolled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ScrollSingleDirection.None">
            <summary>
            Scroll in every direction.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollSingleDirection.Soft">
            <summary>
            Scroll in single direction if the direction is certain.
            </summary>
        </member>
        <member name="F:ElmSharp.ScrollSingleDirection.Hard">
            <summary>
            Scroll only in a single direction.
            </summary>
        </member>
        <member name="T:ElmSharp.Scroller">
            <summary>
            The Scroller is a container that holds and clips a single object and allows you to scroll across it.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Scroller class.
            </summary>
            <param name="parent">The <see cref="T:ElmSharp.EvasObject"/> to which the new Scroller will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.#ctor">
            <summary>
            Creates and initializes a new instance of the Scroller class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Scroller.Scrolled">
            <summary>
            Scrolled will be triggered when the content has been scrolled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Scroller.ScrollAnimationStarted">
            <summary>
            ScrollAnimationStarted will be triggered when the content animation has been started.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Scroller.ScrollAnimationStopped">
            <summary>
            ScrollAnimationStopped will be triggered when the content animation has been stopped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Scroller.DragStart">
            <summary>
            DragStart will be triggered when dragging the contents around has started.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Scroller.DragStop">
            <summary>
            DragStop will be triggered when dragging the contents around has stopped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Scroller.PageScrolled">
            <summary>
            PageScrolled will be triggered when the visible page has changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.CurrentRegion">
            <summary>
            Gets the current region in the content object that is visible through the scroller.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of HorizontalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means the horizontal scrollbar is made visible if it is needed, and otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalScrollBarVisiblePolicy">
            <summary>
            Sets or gets the value of VerticalScrollBarVisiblePolicy.
            </summary>
            <remarks>
            ScrollBarVisiblePolicy.Auto means the vertical scrollbar is made visible if it is needed, and otherwise kept hidden.
            ScrollBarVisiblePolicy.Visible turns it on all the time, and ScrollBarVisiblePolicy.Invisible always keeps it off.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.ScrollBlock">
            <summary>
            Sets or gets the value of ScrollBlock.
            </summary>
            <remarks>
            This function will block scrolling movement in a given direction. One can disable movements in the X-axis, the Y-axis, or both.
            The default value is ScrollBlock.None, where movements are allowed in both directions.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalPageIndex">
            <summary>
            Sets or gets the scroll current page number.
            </summary>
            <remarks>
            Current page means the page which meets the top of the viewport.
            If there are two or more pages in the viewport, it returns the number of the page which meets the top of the viewport.
            The page number starts from 0. 0 is the first page.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalPageIndex">
            <summary>
            Sets or gets the scroll current page number.
            </summary>
            <remarks>
            Current page means the page which meets the left of the viewport.
            If there are two or more pages in the viewport, it returns the number of the page which meets the left of the viewport.
            The page number starts from 0. 0 is the first page.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalPageScrollLimit">
            <summary>
            Sets or gets the maximum limit of the movable page at vertical direction.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalPageScrollLimit">
            <summary>
            Sets or gets the maximum limit of the movable page at horizontal direction.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalBounce">
            <summary>
            Sets or gets the vertical bounce behaviour.
            When scrolling, the scroller may "bounce" when reaching an edge of the content object.
            This is a visual way to indicate the end has been reached.
            This is enabled by default for both axis.
            This API will set if it is enabled for the given axis with the boolean parameters for each axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalBounce">
            <summary>
            Sets or gets the horizontal bounce behaviour.
            When scrolling, the scroller may "bounce" when reaching an edge of the content object.
            This is a visual way to indicate the end has been reached.
            This is enabled by default for both axis.
            This API will set if it is enabled for the given axis with the boolean parameters for each axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.ChildWidth">
            <summary>
            Gets the width of the content object of the scroller.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.ChildHeight">
            <summary>
            Gets the height of the content object of the scroller.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalGravity">
            <summary>
            Sets the scrolling gravity values for a scroller.
            The gravity defines how the scroller will adjust its view when the size of the scroller contents increase.
            The scroller will adjust the view to glue itself as follows:
            x=0.0, for staying where it is relative to the left edge of the content, x=1.0, for staying where it is relative to the rigth edge of the content, y=0.0, for staying where it is relative to the top edge of the content, y=1.0, for staying where it is relative to the bottom edge of the content.
            Default values for x and y are 0.0.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalGravity">
            <summary>
            Sets the scrolling gravity values for a scroller.
            The gravity defines how the scroller will adjust its view when the size of the scroller contents increase.
            The scroller will adjust the view to glue itself as follows:
            x=0.0, for staying where it is relative to the left edge of the content, x=1.0, for staying where it is relative to the rigth edge of the content, y=0.0, for staying where it is relative to the top edge of the content, y=1.0, for staying where it is relative to the bottom edge of the content.
            Default values for x and y are 0.0.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.LastVerticalPageNumber">
            <summary>
            Gets the scroll last page number.
            The page number starts from 0. 0 is the first page. This returns the last page number among the pages.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.LastHorizontalPageNumber">
            <summary>
            Gets the scroll last page number.
            The page number starts from 0. 0 is the first page. This returns the last page number among the pages.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalLoop">
            <summary>
            Sets an infinite loop_ for a scroller.
            This function sets the infinite loop vertically.
            If the content is set, it will be shown repeatedly.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalLoop">
            <summary>
            Sets an infinite loop_ for a scroller.
            This function sets the infinite loop horizontally.
            If the content is set, it will be shown repeatedly.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalRelativePageSize">
            <summary>
            Gets or sets a given scroller widget's scrolling page size, relative to its viewport size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalRelativePageSize">
            <summary>
            Gets or sets a given scroller widget's scrolling page size, relative to its viewport size.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalSnap">
            <summary>
            Gets or sets the page snapping behavior of a scroller.
            </summary>
            <remarks>
            When scrolling, if a scroller is paged (see VerticalRelativePageSize),
            the scroller may snap to pages when being scrolled, i.e., even if it had momentum to scroll further,
            it will stop at the next page boundaries. This is disabled, by default, for both axis.
            This function will set if it that is enabled or not, for each axis.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalSnap">
            <summary>
            Gets or sets the page snapping behavior of a scroller.
            </summary>
            <remarks>
            When scrolling, if a scroller is paged (see HorizontalRelativePageSize),
            the scroller may snap to pages when being scrolled, i.e., even if it had momentum to scroll further,
            it will stop at the next page boundaries. This is disabled, by default, for both axis.
            This function will set if it that is enabled or not, for each axis.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.PageHeight">
            <summary>
            Gets or sets the page size to an absolute fixed value, with 0 turning it off for that axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.PageWidth">
            <summary>
            Gets or sets the page size to an absolute fixed value, with 0 turning it off for that axis.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.ContentPropagateEvents">
            <summary>
            Gets or sets the event propagation for a scroller.
            This enables or disables event propagation from the scroller content to the scroller and its parent.
            By default, event propagation is enabled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.HorizontalStepSize">
            <summary>
            Gets or sets the step size to move scroller by key event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.VerticalStepSize">
            <summary>
            Gets or sets the step size to move scroller by key event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.WheelDisabled">
            <summary>
            Gets or sets a value whether mouse wheel is enabled or not over the scroller.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Scroller.SingleDirection">
            <summary>
            Gets or sets the type of single direction scroll.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.MinimumLimit(System.Boolean,System.Boolean)">
            <summary>
            Sets the scroller minimum size limited to the minimum size of the content.
            By default, the scroller will be as small as its design allows, irrespective of its content.
            This will make the scroller minimum size the right size horizontally and/or vertically to perfectly fit its content in that direction.
            </summary>
            <param name="horizontal">Enable limiting minimum size horizontally.</param>
            <param name="vertical">Enable limiting minimum size vertically.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.SetPageSize(System.Int32,System.Int32)">
            <summary>
            Sets the page size to an absolute fixed value, with 0 turning it off for that axis.
            </summary>
            <param name="width">The horizontal page size.</param>
            <param name="height">The vertical page size.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.SetPageSize(System.Double,System.Double)">
            <summary>
            Sets the scroll page size relative to the viewport size.
            </summary>
            <remarks>
            The scroller is capable of limiting scrolling by the user to "pages".
            That is to jump by and only show a "whole page" at a time as if the continuous area of the scroller
            content is split into page sized pieces. This sets the size of a page relative to the viewport of the scroller.
            1.0 is "1 viewport" which is the size (horizontally or vertically). 0.0 turns it off in that axis.
            This is mutually exclusive with the page size (see elm_scroller_page_size_set() for more information).
            Likewise 0.5 is "half a viewport". Usable values are normally between 0.0 and 1.0 including 1.0.
            If you only want 1 axis to be page "limited", use 0.0 for the other axis.
            </remarks>
            <param name="width">The horizontal page relative size.</param>
            <param name="height">The vertical page relative size.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.ScrollTo(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Shows a specific virtual region within the scroller content object by the page number.
            (0, 0) of the indicated page is located at the top-left corner of the viewport.
            </summary>
            <param name="horizontalPageIndex">The horizontal page number.</param>
            <param name="verticalPageIndex">The vertical page number.</param>
            <param name="animated">True means slider with animation.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.ScrollTo(ElmSharp.Rect,System.Boolean)">
            <summary>
            Shows a specific virtual region within the scroller content object.
            </summary>
            <remarks>
            This ensures that all (or part, if it does not fit) of the designated region in the virtual content object ((0, 0)
            starting at the top-left of the virtual content object) is shown within the scroller.
            If set "animated" to true, it will allows the scroller to "smoothly slide" to this location
            (if configuration in general calls for transitions).
            It may not jump immediately to the new location and may take a while and show other content along the way.
            </remarks>
            <param name="region">Rect struct of region.</param>
            <param name="animated">True means allows the scroller to "smoothly slide" to this location.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.OnRealized">
            <summary>
            The callback of the Realized event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Scroller.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Size">
            <summary>
            The Size is a struct defining the height and width as a pair of generic type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Size.Width">
            <summary>
            Magnitude along the horizontal axis, in platform-defined units.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.Size.Height">
            <summary>
            Magnitude along the vertical axis, in platform-specific units.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the size structure from specified dimensions.
            </summary>
            <param name="width">The width to set.</param>
            <param name="height">The height to set.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.ToString">
            <summary>
            A human-readable representation of <see cref="T:ElmSharp.Size"/>.
            </summary>
            <returns>The string is formatted as "{{Width={0} Height={1}}}".</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.Equals(ElmSharp.Size)">
            <summary>
            Indicates whether this instance and a <see cref="T:ElmSharp.Size"/> object are equal.
            </summary>
            <param name="other">The <see cref="T:ElmSharp.Size"/> to compare with the current instance.</param>
            <returns>
            true if the object and this instance are of the same type and represent the same value,
            otherwise false.
            </returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.op_Equality(ElmSharp.Size,ElmSharp.Size)">
            <summary>
            Whether both <see cref="T:ElmSharp.Size"/>s are equal.
            </summary>
            <param name="s1">A <see cref="T:ElmSharp.Size"/> on the left hand side.</param>
            <param name="s2">A <see cref="T:ElmSharp.Size"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Size"/>s have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Size.op_Inequality(ElmSharp.Size,ElmSharp.Size)">
            <summary>
            Whether both <see cref="T:ElmSharp.Size"/>s are not equal.
            </summary>
            <param name="s1">A <see cref="T:ElmSharp.Size"/> on the left hand side.</param>
            <param name="s2">A <see cref="T:ElmSharp.Size"/> on the right hand side.</param>
            <returns>True if both <see cref="T:ElmSharp.Size"/>s do not have equal values.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SliderIndicatorVisibleMode">
            <summary>
            Enumeration for the Slider's indicator visiblity mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.SliderIndicatorVisibleMode.Default">
            <summary>
            Shows the indicator on mouse down or change in the slider value.
            </summary>
        </member>
        <member name="F:ElmSharp.SliderIndicatorVisibleMode.Always">
            <summary>
            Always show the indicator.
            </summary>
        </member>
        <member name="F:ElmSharp.SliderIndicatorVisibleMode.OnFocus">
            <summary>
            Show the indicator on focus.
            </summary>
        </member>
        <member name="F:ElmSharp.SliderIndicatorVisibleMode.None">
            <summary>
            Never show the indicator.
            </summary>
        </member>
        <member name="T:ElmSharp.Slider">
            <summary>
            The Slider is a widget that adds a draggable slider widget for selecting the value of something within a range.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Slider.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Slider class.
            </summary>
            <param name="parent">The <see cref="T:ElmSharp.EvasObject"/> to which the new slider will be attached as a child.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Slider.ValueChanged">
            <summary>
            ValueChanged will be triggered when the Slider value is changed by the user.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Slider.DelayedValueChanged">
            <summary>
            DelayedValueChanged will be triggered when a short time after the value is changed by the user.
            This will be called only when the user stops dragging for a very short period or when they release their finger/mouse,
            so it avoids possibly expensive reactions to the value change.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Slider.DragStarted">
            <summary>
            DragStarted will be triggered when dragging the Slider indicator around has started.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Slider.DragStopped">
            <summary>
            DragStopped will be triggered when dragging the Slider indicator around has stopped.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.SpanSize">
            <summary>
            Sets or gets the (exact) length of the bar region of a given Slider widget.
            </summary>
            <remarks>
            This sets the minimum width (when in the horizontal mode) or height (when in the vertical mode)
            of the actual bar area of the slider object. This in turn affects the object's minimum size.
            Use this when you're not setting other size hints expanding on the given direction
            (like weight and alignment hints), and you would like it to have a specific size.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.IndicatorFormat">
            <summary>
            Sets or gets the format string for the indicator label.
            </summary>
            <remarks>
            The slider may display its value somewhere other than the unit label,
            for example, above the slider knob that is dragged around. This function sets the format string
            used for this. If null, the indicator label won't be visible. If not, it sets the format string
            for the label text. For the label text floating point value is provided, so the label text can
            display up to 1 floating point value. Note that this is optional. Use a format string
            such as "%1.2f meters" for example, and it displays values like: "3.14 meters" for a value
            equal to 3.14159. By default, the indicator label is disabled.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.IsHorizontal">
            <summary>
            Sets or gets the orientation of a given slider widget.
            </summary>
            <remarks>
            The orientation may be vertical or horizontal. By default, it's displayed horizontally.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.Minimum">
            <summary>
            Sets or gets the minimum values for the slider.
            </summary>
            <remarks>
            This defines the allowed minimum values to be selected by the user.
            If the actual value is less than min, it is updated to min.
            Actual value can be obtained with value. By default, the minimum is equal to 0.0.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.Maximum">
            <summary>
            Sets or gets the maximum values for the slider.
            </summary>
            <remarks>
            This defines the allowed maximum values to be selected by the user.
            If the actual value is bigger then max, it is updated to max.
            Actual value can be obtained with value. By default, minimum is equal to 0.0 and maximum is equal to 1.0.
            Maximum must be greater than minimum, otherwise the behavior is undefined.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.Value">
            <summary>
            Gets or sets the value displayed by the slider.
            </summary>
            <remarks>
            Value will be presented on the unit label following format specified with UnitFormat and
            on indicator with IndicatorFormat. The value must be between minimum and maximum values.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.Step">
            <summary>
            Sets or gets the step by which the slider indicator moves.
            </summary>
            <remarks>
            This value is used when the draggable object is moved automatically i.e.,
            in case of a key event when up/down/left/right key is pressed or in case accessibility
            is set and the flick event is used to increase or decrease the slider values.
            By default, the step value is equal to 0.05.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.IsInverted">
            <summary>
            Gets or sets whether a given slider widget's displaying values are inverted.
            </summary>
            <remarks>
            A slider may be inverted, in which case it gets its values inverted,
            with high values being on the left or top, and low values on the right or bottom,
            as opposed to normally have the low values on the former and high values on the latter,
            respectively, for the horizontal and vertical modes.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.IsIndicatorVisible">
            <summary>
            Sets or gets whether to enlarge the slider indicator (augmented knob).
            </summary>
            <remarks>
            By default, the indicator is bigger when dragged by the user.
            It won't display the values set with IndicatorFormat if you disable the indicator.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.IndicatorVisibleMode">
            <summary>
            Sets or gets the visible mode of the slider indicator.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Slider.IsIndicatorFocusable">
            <summary>
            Sets or gets whether to show the indicator of a slider on focus.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Slider.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SmartEvent`1">
            <summary>
            It inherits <see cref="T:ElmSharp.IInvalidatable"/>.
            The event with TEventArgs for <see cref="T:ElmSharp.EvasObject"/>.
            EvasObject can elect the SmartEvent occurring inside them, to be reported back to their users via delegates.
            This way, you can extend EvasObject's own <see cref="T:ElmSharp.EvasObjectEvent"/>.
            They are defined by an event string, which identifies them uniquely.
            </summary>
            <typeparam name="TEventArgs">The parameter for the event.</typeparam>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SmartEvent`1.SmartEventInfoParser">
            <summary>
            The delegate for creating smart event item arguments.
            </summary>
            <param name="data">The item data.</param>
            <param name="obj">The sender object.</param>
            <param name="info">The item sender object.</param>
            <returns>Return smart event item args.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.#ctor(ElmSharp.EvasObject,System.String,ElmSharp.SmartEvent{`0}.SmartEventInfoParser)">
            <summary>
            Creates and initializes a new instance of the SmartEvent class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventName">The event name.</param>
            <param name="parser">The event parameter.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.#ctor(ElmSharp.EvasObject,System.IntPtr,System.String,ElmSharp.SmartEvent{`0}.SmartEventInfoParser)">
            <summary>
            Creates and initializes a new instance of the SmartEvent class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="handle">Teh event handler.</param>
            <param name="eventName">The event name.</param>
            <param name="parser">The event parser.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.#ctor(ElmSharp.EvasObject,System.String)">
            <summary>
            Creates and initializes a new instance of the SmartEvent class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventName">The event name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.Finalize">
            <summary>
            Destroys the SmartEvent object.
            </summary>
        </member>
        <member name="E:ElmSharp.SmartEvent`1.On">
            <summary>
            Adds or removes a delegate for the event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.MakeInvalidate">
            <summary>
            Makes the current instance invalidate.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent`1.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed,
            otherwise false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.SmartEvent">
            <summary>
            It inherits <see cref="T:ElmSharp.IInvalidatable"/>.
            EvasObject can elect the SmartEvent occurring inside them, to be reported back to their users via delegates.
            This way, you can extend EvasObject's own <see cref="T:ElmSharp.EvasObjectEvent"/>.
            They are defined by an event string, which identifies them uniquely.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent.#ctor(ElmSharp.EvasObject,System.String)">
            <summary>
            Creates and initializes a new instance of the SmartEvent class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="eventName">The event name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent.#ctor(ElmSharp.EvasObject,System.IntPtr,System.String)">
            <summary>
            Creates and initializes a new instance of the SmartEvent class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="handle">The event handler.</param>
            <param name="eventName">The event name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent.Finalize">
            <summary>
            Destroys the SmartEvent object.
            </summary>
        </member>
        <member name="E:ElmSharp.SmartEvent.On">
            <summary>
            Adds or removes a delegate for the event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent.MakeInvalidate">
            <summary>
            Makes the current instance invalidate.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.SmartEvent.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed,
            otherwise false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Spinner">
            <summary>
            The Spinner is a widget that increases or decreases the numeric values using arrow buttons, or edit values directly.
            Inherits <see cref="T:ElmSharp.Layout"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Spinner class.
            </summary>
            <param name="parent">The parent of new Spinner instance</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.#ctor">
            <summary>
            Creates and initializes a new instance of the Layout class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Spinner.ValueChanged">
            <summary>
            ValueChanged will be triggered whenever the spinner value is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Spinner.DelayedValueChanged">
            <summary>
            DelayedValueChanged will be triggered after a short time when the value is changed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.LabelFormat">
            <summary>
            Sets or gets the label format of the spinner.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.Minimum">
            <summary>
            Sets or gets the minimum value for the spinner.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.Maximum">
            <summary>
            Sets or gets the maximum value for the spinner.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.Step">
            <summary>
            Sets or gets the step that is used to increment or decrement the spinner value.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.Value">
            <summary>
            Sets or gets the value displayed by the spinner.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.Interval">
            <summary>
            Sets or gets the interval on time updates for a user mouse button to hold on the spinner widgets' arrows.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.RoundBase">
            <summary>
            Sets or gets the base for rounding.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.RoundValue">
            <summary>
            Sets or gets the round value for rounding.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.IsWrapEnabled">
            <summary>
            Sets or gets the wrap of a given spinner widget.
            </summary>
            <remarks>
            If wrap is disabled when the user tries to increment the value, but the displayed value plus step value is bigger than the maximum value, then the new value will be the maximum value.
            If wrap is enabled when the user tries to increment the value, but the displayed value plus step value is bigger than the maximum value, then the new value will be the minimum value.
            By default, it's disabled.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Spinner.IsEditable">
            <summary>
            Sets or gets whether the spinner can be directly edited by the user or not.
            </summary>
            <remarks>By default, it is enabled.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.AddSpecialValue(System.Double,System.String)">
            <summary>
            Sets a special string to display in the place of the numerical value.
            </summary>
            <param name="value">The numerical value to be replaced</param>
            <param name="label">The label to be used</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.RemoveSpecialValue(System.Double)">
            <summary>
            Removes a previously added special value. After this, the spinner will display the value itself instead of a label.
            </summary>
            <param name="value">The replaced numerical value.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.GetSpecialValue(System.Double)">
            <summary>
            Gets the special string display in the place of the numerical value.
            </summary>
            <param name="value">The replaced numerical value.</param>
            <returns>The value of the spinner, which replaced the numerical value with a special string.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.OnRealized">
            <summary>
            The callback of the Realized event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Spinner.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Table">
            <summary>
            The Table is a container widget to arrange other widgets in a table where items can span multiple columns or rows.
            Inherits <see cref="T:ElmSharp.Container"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Table class.
            </summary>
            <param name="parent">
            A <see cref="T:ElmSharp.EvasObject"/> to which the new Table instance will be attached.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Table.Homogeneous">
            <summary>
            Sets or gets whether the layout of this table is homogeneous.
            </summary>
            <remarks>True for homogeneous, False for no homogeneous.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Table.PaddingX">
            <summary>
            Sets or gets the horizontal padding between the cells.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Table.PaddingY">
            <summary>
            Sets or gets the vertical padding between the cells.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.Pack(ElmSharp.EvasObject,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a subobject on the table with the coordinates passed.
            </summary>
            <param name="obj">The subobject to be added to the table.</param>
            <param name="col">The column number.</param>
            <param name="row">The row number.</param>
            <param name="colspan">The column span.</param>
            <param name="rowspan">The row span.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.Unpack(ElmSharp.EvasObject)">
            <summary>
            Removes the child from the table.
            </summary>
            <param name="obj">The subobject.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.Clear">
            <summary>
            Removes all the child objects from a table object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.SetPartColor(System.String,ElmSharp.Color)">
            <summary>
            Sets the color for a particular part of the table.
            </summary>
            <param name="part">The name of part class.</param>
            <param name="color">The color.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.GetPartColor(System.String)">
            <summary>
            Gets the color of a particular part of the table.
            </summary>
            <param name="part">The name of part class, it could be 'bg', 'elm.swllow.content'.</param>
            <returns>The color of a particular part.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Table.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ToolbarSelectionMode">
            <summary>
            Enumeration for the selection mode of the toolbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ToolbarSelectionMode.Default">
            <summary>
            Default select mode.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarSelectionMode.Always">
            <summary>
            Always select mode.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarSelectionMode.None">
            <summary>
            No select mode.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarSelectionMode.DisplayOnly">
            <summary>
            No select mode with no finger size rule.
            </summary>
        </member>
        <member name="T:ElmSharp.ToolbarShrinkMode">
            <summary>
            Enumeration for setting the toolbar items display behavior, it can be scrollable, can show a menu with exceeding items, or simply hide them.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ToolbarShrinkMode.None">
            <summary>
            Sets the minimum toolbar size to fit all the items.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarShrinkMode.Hide">
            <summary>
            Hides exceeding items.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarShrinkMode.Scroll">
            <summary>
            Allows accessing exceeding items through a scroller.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarShrinkMode.Menu">
            <summary>
            Inserts a button to popup a menu with exceeding items.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarShrinkMode.Expand">
            <summary>
            Expands all items according to the size of the toolbar.
            </summary>
        </member>
        <member name="T:ElmSharp.ToolbarIconLookupOrder">
            <summary>
            Enumeration for the icon lookup order of the toolbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ToolbarIconLookupOrder.FreedesktopTheme">
            <summary>
            Icon lookup order: freedesktop, theme.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarIconLookupOrder.ThemeFreedesktop">
            <summary>
            Icon lookup order: theme, freedesktop.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarIconLookupOrder.Freedesktop">
            <summary>
            Icon lookup order: freedesktop.
            </summary>
        </member>
        <member name="F:ElmSharp.ToolbarIconLookupOrder.Theme">
            <summary>
            Icon lookup order: theme.
            </summary>
        </member>
        <member name="T:ElmSharp.ToolbarItemEventArgs">
            <summary>
            Event arguments for events of <see cref="T:ElmSharp.ToolbarItem"/>.
            </summary>
            <remarks>
            Inherits EventArgs.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ToolbarItemEventArgs.Item">
            <summary>
            Gets the ToolbarItem.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Toolbar">
            <summary>
            The Toolbar is a widget that displays a list of items inside a box.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Toolbar class.
            </summary>
            <param name="parent">
            A EvasObject to which the new Table instance will be attached.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Toolbar.Selected">
            <summary>
            Selected will be triggered when toolbar has been selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.Homogeneous">
            <summary>
            Sets or gets whether the layout of this toolbar is homogeneous.
            </summary>
            <remarks>True for homogeneous, False for no homogeneous.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.SelectionMode">
            <summary>
            Sets or gets the slection mode of a given Toolbar widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.ShrinkMode">
            <summary>
            Sets or gets the shrink mode of a given Toolbar widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.IsHorizontal">
            <summary>
            Sets or gets the toolbar's current orientation.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.IconLookupOrder">
            <summary>
            Sets or gets the icon lookup order, for toolbar items' icons.
            The default lookup order is ToolbarIocnLookupOrder.ThemeFreedesktop.
            Icons added before calling this function will not be affected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.IconSize">
            <summary>
            Sets or gets the icon size of a given toolbar widget.
            Default value is 32 pixels, to be used by toolbar items.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.ItemsCount">
            <summary>
            Gets the number of items in a Toolbar widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.ItemAlignment">
            <summary>
            Sets or gets the alignment of the items.
            </summary>
            <remarks>The toolbar items alignment, a float between 0.0 and 1.0.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.TransverseExpansion">
            <summary>
            Sets or gets the item's transverse expansion of a given Toolbar widget.
            </summary>
            <remarks>
            The transverse expansion of the item, true for on and false for off.
            By default it's false.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.Append(System.String)">
            <summary>
            Appends the ToolbarItem, which just contains label to the toolbar.
            </summary>
            <param name="label">The label of the item.</param>
            <returns>The new ToolbarItem which is appended to the toolbar.</returns>
            <seealso cref="M:ElmSharp.Toolbar.Append(System.String,System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Prepend(System.String)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.Append(System.String,System.String)">
            <summary>
            Appends the ToolbarItem, which contains label and icon to the toolbar.
            </summary>
            <param name="label">The label of the item.</param>
            <param name="icon">A string with the icon name or the absolute path of an image file.</param>
            <returns>The new ToolbarItem which is appended to the toolbar.</returns>
            <seealso cref="M:ElmSharp.Toolbar.Append(System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Prepend(System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Prepend(System.String,System.String)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.Prepend(System.String)">
            <summary>
            Prepends the ToolbarItem, which just contains label to the toolbar.
            </summary>
            <param name="label">The label of the item.</param>
            <returns>The new ToolbarItem which is prepended to the toolbar.</returns>
            <seealso cref="M:ElmSharp.Toolbar.Append(System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Append(System.String,System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Prepend(System.String,System.String)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.Prepend(System.String,System.String)">
            <summary>
            Prepends the ToolbarItem, which contains label and icon to the toolbar.
            </summary>
            <param name="label">The label of the item.</param>
            <param name="icon">A string with the icon name or the absolute path of an image file.</param>
            <returns>The new <see cref="T:ElmSharp.ToolbarItem"/> which is prepended to the toolbar.</returns>
            <seealso cref="M:ElmSharp.Toolbar.Append(System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Append(System.String,System.String)"/>
            <seealso cref="M:ElmSharp.Toolbar.Prepend(System.String)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.InsertBefore(ElmSharp.ToolbarItem,System.String)">
            <summary>
            Inserts a new item which just contains label into the toolbar object before item <paramref name="before"/>.
            </summary>
            <param name="before">The toolbar item to insert before.</param>
            <param name="label">The label of the item.</param>
            <returns>The new <see cref="T:ElmSharp.ToolbarItem"/> which is inserted into the toolbar.</returns>
            <seealso cref="M:ElmSharp.Toolbar.InsertBefore(ElmSharp.ToolbarItem,System.String,System.String)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.InsertBefore(ElmSharp.ToolbarItem,System.String,System.String)">
            <summary>
            Inserts a new item which contains label and icon into the toolbar object before item <paramref name="before"/>.
            </summary>
            <param name="before">The toolbar item to insert before.</param>
            <param name="label">The label of the item.</param>
            <param name="icon">A string with the icon name or the absolute path of an image file.</param>
            <returns>The new <see cref="T:ElmSharp.ToolbarItem"/> which is inserted into the toolbar.</returns>
            <seealso cref="M:ElmSharp.Toolbar.InsertBefore(ElmSharp.ToolbarItem,System.String)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.InsertAfter(ElmSharp.ToolbarItem,System.String,System.String)">
            <summary>
            Inserts a new item which contains label and icon into the toolbar object after item <paramref name="after"/>.
            </summary>
            <param name="after">The toolbar item to insert after.</param>
            <param name="label">The label of the item.</param>
            <param name="icon">A string with the icon name or the absolute path of an image file.</param>
            <returns>The new <see cref="T:ElmSharp.ToolbarItem"/> which is inserted into the toolbar.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.FindItemByLabel(System.String)">
            <summary>
            Finds the item with that label in the toolbar.
            </summary>
            <param name="label">The label of the item.</param>
            <returns>The <see cref="T:ElmSharp.ToolbarItem"/> into the toolbar.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.SelectedItem">
            <summary>
            Gets the selected ToolbarItemItem of the toolbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.FirstItem">
            <summary>
            Gets the first ToolbarItemItem of the toolbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Toolbar.LastItem">
            <summary>
            Gets the last ToolbarItemItem of the toolbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Toolbar.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ToolbarItem">
            <summary>
            The ToolbarItem is an item of the toolbar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ToolbarItem.Icon">
            <summary>
            Sets or gets the icon path of the item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ToolbarItem.Text">
            <summary>
            Sets or gets the text string of the item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ToolbarItem.Enabled">
            <summary>
            Sets or gets the enable of the item.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ToolbarItem.IsSeparator">
            <summary>
            Sets or gets whether displaying the item as a separator.
            </summary>
            <remarks>Items aren't set as a separator by default. If set as a separator, it displays a separator theme, so it won't display the icons or labels.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ToolbarItem.IsSelected">
            <summary>
            Sets or gets whether the item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ToolbarItem.Selected">
            <summary>
            Selected will be triggered when the item is selected.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ToolbarItem.LongPressed">
            <summary>
            LongPressed will be triggered when the item is pressed for a long time.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.ToolbarItem.Clicked">
            <summary>
            Clicked will be triggered when the item is clicked.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Transit">
            <summary>
            Transit is designed to apply various animated transition effects, such as translation, rotation, etc.
            For using these effects, create a transit and add the desired transition effects.
            </summary>
            <remarks>Transit is not reusable. If the effect ends, the transit is destroyed automatically.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Transit.Deleted">
            <summary>
            A callback is called when the transit is deleted.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.#ctor">
            <summary>
            Creates and initializes a new instance of the Transit class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.Finalize">
            <summary>
            Destroys the transit object.
            </summary>
        </member>
        <member name="P:ElmSharp.Transit.Duration">
            <summary>
            Gets or sets the transit animation time.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.ObjectStateKeep">
            <summary>
            Gets or sets a value whether the objects states will be kept or not.
            If it is not kept, the objects states will be reset when the transition ends.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.TweenMode">
            <summary>
            Gets or sets the transit animation acceleration type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.Repeat">
            <summary>
            Gets or sets the transit repeat count.
            If the repeat is a negative number, it will repeat infinite times.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.AutoReverse">
            <summary>
            Gets or sets if auto reverse is on.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.EventEnabled">
            <summary>
            Gets or sets the event enabled when transit is operating.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.Smooth">
            <summary>
            Gets or sets the smooth scaling for transit map rendering.
            This gets the smooth scaling for transit map rendering.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.Progress">
            <summary>
            Gets the time progression of the animation (a double value between 0.0 and 1.0).
            The value returned is a fraction (current time/total time).
            It represents the progression position relative to the total.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.BeginAccelerationFactor">
            <summary>
            Gets or sets the transit animation tween mode acceleration factor.
            </summary>
            <returns>A factor value from 0.0 to 1.0.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.EndAccelerationFactor">
            <summary>
            Gets or sets the transit animation tween mode acceleration factor.
            </summary>
            <returns>A factor value from 0.0 to 1.0.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.Go(System.Double)">
            <summary>
            Starts the transition in given seconds.
            Once this API is called, the transit begins to measure the time.
            </summary>
            <param name="interval">The interval value in seconds.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.Pause">
            <summary>
            Pauses the transition.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.Resume">
            <summary>
            Resumes the transition.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.Chains">
            <summary>
            Gets the current chained transit list.
            </summary>
            <remarks>Cannot add the duplicate transit.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Transit.Objects">
            <summary>
            Gets the objects list of the transit.
            </summary>
            <remarks>Cannot add the duplicate object.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.AddEffect(ElmSharp.EffectBase)">
            <summary>
            Adds the effect.
            </summary>
            <param name="effect">EffectBase object.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.Dispose">
            <summary>
            Destroys the current object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.Dispose(System.Boolean)">
            <summary>
            Releases all the resources currently used by this instance.
            </summary>
            <param name="disposing">
            true if the managed resources should be disposed,
            otherwise false.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Transit.AddObject(ElmSharp.EvasObject)">
            <summary>
            Adds a new object to apply the effects.
            After the first addition of an object to transit, if its object list becomes empty again, the transit will be killed.
            If the object belongs to another transit, the object will be removed from it and it will only belong to the other transit.
            </summary>
            <remarks>It is not allowed to add a new object after the transit begins.</remarks>
            <param name="obj">Object to be animated.</param>
        </member>
        <member name="M:ElmSharp.Transit.RemoveObject(ElmSharp.EvasObject)">
            <summary>
            Removes an added object from the transit.
            </summary>
            <param name="obj">Object to be removed from transit.</param>
        </member>
        <member name="M:ElmSharp.Transit.AddChainedTransit(ElmSharp.Transit)">
            <summary>
            Makes the chain relationship between two transits.
            </summary>
            <param name="transit">The chain transit object. This transit will be operated after the transit is done.</param>
        </member>
        <member name="M:ElmSharp.Transit.DeleteChainedTransit(ElmSharp.Transit)">
            <summary>
            Cuts off the chain relationship between two transits.
            </summary>
            <param name="transit">The chain transit object.</param>
        </member>
        <member name="T:ElmSharp.FlipAxis">
            <summary>
            Enumeration for the axis along which flip effect should be applied.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.FlipAxis.X">
            <summary>
            Flip on X-axis.
            </summary>
        </member>
        <member name="F:ElmSharp.FlipAxis.Y">
            <summary>
            Flip on Y-axis.
            </summary>
        </member>
        <member name="T:ElmSharp.WipeDirection">
            <summary>
            Enumeration for the direction in which the wipe effect should occur.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.WipeDirection.Left">
            <summary>
            Wipe to the left.
            </summary>
        </member>
        <member name="F:ElmSharp.WipeDirection.Right">
            <summary>
            Wipe to the right.
            </summary>
        </member>
        <member name="F:ElmSharp.WipeDirection.Up">
            <summary>
            Wipe to the up.
            </summary>
        </member>
        <member name="F:ElmSharp.WipeDirection.Down">
            <summary>
            Wipe to the down.
            </summary>
        </member>
        <member name="T:ElmSharp.WipeType">
            <summary>
            Enumeration for whether the wipe effect should show or hide the object.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.WipeType.Hide">
            <summary>
            Hide the object during the animation.
            </summary>
        </member>
        <member name="F:ElmSharp.WipeType.Show">
            <summary>
            Show the object during the animation.
            </summary>
        </member>
        <member name="T:ElmSharp.TweenMode">
            <summary>
            Enumration for the type of acceleration used in transition.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.TweenMode.Linear">
            <summary>
            Constant speed.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.Sinusoidal">
            <summary>
            Starts slow, increases speed over time, then decrease again and stop slowly, v1 being a power factor.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.Decelerate">
            <summary>
            Starts fast and decreases speed over time, v1 being a power factor.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.Accelerate">
            <summary>
            Starts slow and increases speed over time, v1 being a power factor.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.DivisorInterpolate">
            <summary>
            Starts at gradient v1, interpolated via power of v2 curve.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.Bounce">
            <summary>
            Starts at 0.0 then "drop" like a ball bouncing to the ground at 1.0, and bounce v2 times, with decay factor of v1.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.Spring">
            <summary>
            Starts at 0.0 then "wobble" like a spring rest position 1.0, and wobble v2 times, with decay factor of v1.
            </summary>
        </member>
        <member name="F:ElmSharp.TweenMode.BezierCurve">
            <summary>
            Follows the cubic-bezier curve calculated with the control points (x1, y1), (x2, y2).
            </summary>
        </member>
        <member name="T:ElmSharp.BlendEffect">
            <summary>
            Blend effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.BlendEffect.#ctor">
            <summary>
            Creates and initializes a new instance of the BlendEffect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ColorEffect">
            <summary>
            Color effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ColorEffect.#ctor(ElmSharp.Color,ElmSharp.Color)">
            <summary>
            Creates and initializes a new instance of the ColorEffect class.
            </summary>
            <param name="beginColor">The begin color of the effect.</param>
            <param name="endColor">The end color of the effect.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorEffect.BeginColor">
            <summary>
            The begin color of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ColorEffect.EndColor">
            <summary>
            The end color of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FadeEffect">
            <summary>
            Fade effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FadeEffect.#ctor">
            <summary>
            Creates and initializes a new instance of the FadeEffect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FlipEffect">
            <summary>
            Flip effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.FlipEffect.#ctor(ElmSharp.FlipAxis,System.Boolean,System.Boolean)">
            <summary>
            Creates and initializes a new instance of the FlipEffect class.
            </summary>
            <param name="axis">Flipping axis (X or Y).</param>
            <param name="clockWise">Flipping Direction. True is clockwise.</param>
            <param name="resizable">Resizable effect with FlipEffect.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipEffect.Axis">
            <summary>
            Flipping axis (X or Y).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipEffect.ClockWise">
            <summary>
            Flipping direction. True is clockwise.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.FlipEffect.Resizable">
            <summary>
            Resizable FlipEffect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ResizingEffect">
            <summary>
            Resizing effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ResizingEffect.#ctor(ElmSharp.Size,ElmSharp.Size)">
            <summary>
            Creates and initializes a new instance of the ResizingEffect class.
            </summary>
            <param name="beginSize">The begin size of the effect.</param>
            <param name="endSize">The end size of the effect.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ResizingEffect.BeginSize">
            <summary>
            The begin size of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ResizingEffect.EndSize">
            <summary>
            The end size of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.RotationEffect">
            <summary>
            Rotation effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.RotationEffect.#ctor(System.Single,System.Single)">
            <summary>
            Creates and initializes a new instance of the RotationEffect class.
            </summary>
            <param name="beginDegree">The begin degree of the effect.</param>
            <param name="endDegree">The end degree of the effect.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.RotationEffect.BeginDegree">
            <summary>
            The begin degree of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.RotationEffect.EndDegree">
            <summary>
            The end degree of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.TranslationEffect">
            <summary>
            Translation effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.TranslationEffect.#ctor(ElmSharp.Point,ElmSharp.Point)">
            <summary>
            Creates and initializes a new instance of the TranslationEffect class.
            </summary>
            <param name="beginPoint">The begin point of the effect.</param>
            <param name="endPoint">The end point of the effect.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.TranslationEffect.BeginPoint">
            <summary>
            The begin point of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.TranslationEffect.EndPoint">
            <summary>
            The end point of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.WipeEffect">
            <summary>
            Wipe effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.WipeEffect.#ctor(ElmSharp.WipeType,ElmSharp.WipeDirection)">
            <summary>
            Creates and initializes a new instance of the WipeEffect class.
            </summary>
            <param name="type">Wipe type. Hide or show.</param>
            <param name="direction">Wipe direction.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.WipeEffect.Type">
            <summary>
            Wipe type. Hide or show.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.WipeEffect.Direction">
            <summary>
            Wipe direction.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.ZoomEffect">
            <summary>
            Zoom effect class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.ZoomEffect.#ctor(System.Single,System.Single)">
            <summary>
            Creates and initializes a new instance of the ZoomEffect class.
            </summary>
            <param name="beginRate">The begin rate of the effect.</param>
            <param name="endRate">The end rate of the effect.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ZoomEffect.BeginRate">
            <summary>
            The begin rate of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.ZoomEffect.EndRate">
            <summary>
            The end rate of the effect.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.Utility">
            <summary>
            This class is a static class for utility methods.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.AppendGlobalFontPath(System.String)">
            <summary>
            Appends a font path to the list of font paths used by the application.
            </summary>
            <param name="path">The new font path.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.PrependEvasGlobalFontPath(System.String)">
            <summary>
            Prepends a font path to the list of font paths used by the application.
            </summary>
            <param name="path">The new font path.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.ClearEvasGlobalFontPath">
            <summary>
            Removes all font paths loaded into the memory by evas_font_path_app_* APIs for the application.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.FontReinit">
            <summary>
            Reinitialize FontConfig.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.SetEdjeColorClass(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Edje color class.
            </summary>
            <param name="colorClass">Color class.</param>
            <param name="red">Object red value.</param>
            <param name="green">Object green value.</param>
            <param name="blue">Object blue value.</param>
            <param name="alpha">Object alpha value.</param>
            <param name="outlineRed">Outline red value.</param>
            <param name="outlineGreen">Outline green value.</param>
            <param name="outlineBlue">Outline blue value.</param>
            <param name="outlineAlpha">Outline alpha value.</param>
            <param name="shadowRed">Shadow red value.</param>
            <param name="shadowGreen">Shadow green value.</param>
            <param name="shadowBlue">Shadow blue value.</param>
            <param name="shadowAlpha">Shadow alpha value.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.GetEdjeColorClass(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the Edje color class.
            </summary>
            <param name="colorClass">Color class.</param>
            <param name="red">Object red value.</param>
            <param name="green">Object green value.</param>
            <param name="blue">Object blue value.</param>
            <param name="alpha">Object alpha value.</param>
            <param name="outlineRed">Outline red value.</param>
            <param name="outlineGreen">Outline green value.</param>
            <param name="outlineBlue">Outline blue value.</param>
            <param name="outlineAlpha">Outline alpha value.</param>
            <param name="shadowRed">Shadow red value.</param>
            <param name="shadowGreen">Shadow green value.</param>
            <param name="shadowBlue">Shadow blue value.</param>
            <param name="shadowAlpha">Shadow alpha value.</param>
            <returns></returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.ProcessEdjeMessageSignal">
            <summary>
            Processes all the queued up edje messages.
            This function triggers the processing of messages addressed to any (alive) edje objects.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.SetEdjeTextClass(System.String,System.String,System.Int32)">
            <summary>
            Sets the Edje text class.
            </summary>
            <param name="textClass">The text class name.</param>
            <param name="font">The font name.</param>
            <param name="size">The font size.</param>
            <returns>True on success, or False on error.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.GetEdjeTextClass(System.String,System.String@,System.Int32@)">
            <summary>
            Gets the Edje text class.
            </summary>
            <param name="textClass">The text class name.</param>
            <param name="font">The font name.</param>
            <param name="size">The font size.</param>
            <returns>True on success, or False on error.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.DeleteEdjeTextClass(System.String)">
            <summary>
            Delete the text class.
            </summary>
            <param name="textClass">The text class name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.PremulityplyEvasColorByAlpha(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Pre-multiplies the RGB triplet by an alpha factor.
            </summary>
            <param name="alpha">The alpha factor.</param>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Utility.UnPremulityplyEvasColorByAlpha(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Undoes pre-multiplication of the RGB triplet by an alpha factor.
            </summary>
            <param name="alpha">The alpha factor.</param>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.FocusDirection">
            <summary>
            Enumeration for the focus direction.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.FocusDirection.Previous">
            <summary>
            Previous direction.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusDirection.Next">
            <summary>
            Next direction.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusDirection.Up">
            <summary>
            Up direction.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusDirection.Down">
            <summary>
            Down direction.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusDirection.Right">
            <summary>
            Right direction.
            </summary>
        </member>
        <member name="F:ElmSharp.FocusDirection.Left">
            <summary>
            Left direction.
            </summary>
        </member>
        <member name="T:ElmSharp.Widget">
            <summary>
            The Widget is an abstract class and the parent of other widgets.
            Inherits from <see cref="T:ElmSharp.EvasObject"/>.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.#ctor">
            <summary>
            Creates and initializes a new instance of the Widget class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.#ctor(ElmSharp.EvasObject)">
            <summary>
            Creates and initializes a new instance of the Widget class.
            </summary>
            <param name="parent">The parent of the new Widget instance.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.UpdatePartContents(ElmSharp.EvasObject,System.String)">
            <summary>
            Updates the part contents.
            </summary>
            <param name="content">The content which is put into the part.</param>
            <param name="part">The updated part.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Widget.Focused">
            <summary>
            Focused will be triggered when the widget is focused.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Widget.Unfocused">
            <summary>
            Unfocused will be triggered when the widget is unfocused.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.IsEnabled">
            <summary>
            Sets or gets the state of the widget, which might be enabled or disabled.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.Style">
            <summary>
            Sets or gets the style of the widget.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.IsFocused">
            <summary>
            Gets whether this widget is focused.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.IsFocusAllowed">
            <summary>
            Gets whether a widget is focusable or not.
            </summary>
            <remarks>Widgets which are meant to be interacted with by input events, are created able to be focused by default.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.Text">
            <summary>
            Sets or gets the text of the widget.
            </summary>
            <remarks>It could be overridden by special child class.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.BackgroundColor">
            <summary>
            Sets or gets the background color of the widget.
            </summary>
            <remarks>It could be overridden by special child class.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.Opacity">
            <summary>
            Sets or gets the opacity of the widget.
            </summary>
            <remarks>It could be overridden by special child class.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.AllowTreeFocus">
            <summary>
            Sets or gets whether a widget and its children are focusable or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.IsMirroredMode">
            <summary>
            Sets or gets the widget's mirrored mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Widget.IsAutoMirroredMode">
            <summary>
            Sets or gets the widget's mirrored mode setting.
            When widget is set to automatic mode(true), it follows the system mirrored mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetFocus(System.Boolean)">
            <summary>
            Sets the widget to be focused or not.
            </summary>
            <param name="isFocus">Whether be focused.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.AllowFocus(System.Boolean)">
            <summary>
            Sets the ability for a widget to be focused.
            </summary>
            <param name="isAllowFocus">true if the object can be focused, false if not(and on errors).</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.FocusNext(ElmSharp.FocusDirection)">
            <summary>
            Gives focus to the next widget in the widget tree.
            </summary>
            <param name="direction">Direction to move the focus.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetNextFocusObject(ElmSharp.EvasObject,ElmSharp.FocusDirection)">
            <summary>
            Sets the next widget with specific focus direction.
            </summary>
            <param name="next">Focus next widget.</param>
            <param name="direction">Focus direction.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetPartContent(System.String,ElmSharp.EvasObject)">
            <summary>
            Sets content to the particular part of the widget, and the preserve old content will be deleted.
            </summary>
            <param name="part">The name of the particular part.</param>
            <param name="content">The content.</param>
            <seealso cref="M:ElmSharp.Widget.SetPartContent(System.String,ElmSharp.EvasObject,System.Boolean)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetPartContent(System.String,ElmSharp.EvasObject,System.Boolean)">
            <summary>
            Sets content to the particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <param name="content">The content.</param>
            <param name="preserveOldContent">true, preserve old content will be unset and not be deleted. false, preserve old content will be deleted.</param>
            <seealso cref="M:ElmSharp.Widget.SetPartContent(System.String,ElmSharp.EvasObject)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetContent(ElmSharp.EvasObject)">
            <summary>
            Sets content to the widget, and the preserve old content will be deleted.
            </summary>
            <param name="content">The content.</param>
            <seealso cref="M:ElmSharp.Widget.SetContent(ElmSharp.EvasObject,System.Boolean)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetContent(ElmSharp.EvasObject,System.Boolean)">
            <summary>
            Sets content to the widget.
            </summary>
            <param name="content">The content.</param>
            <param name="preserveOldContent">true, preserve old content will be unset and not be deleted. false, preserve old content will be deleted.</param>
            <seealso cref="M:ElmSharp.Widget.SetContent(ElmSharp.EvasObject)"/>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetPartText(System.String,System.String)">
            <summary>
            Sets text to the particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <param name="text">The text.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.GetPartText(System.String)">
            <summary>
            Gets text of a particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <returns>Text of the particular part of the widget.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetPartColor(System.String,ElmSharp.Color)">
            <summary>
            Sets color of a particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <param name="color">The color to be set to the widget.</param>
            <remarks>This method is a virtual method, it could be overridden by special child class.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.GetPartColor(System.String)">
            <summary>
            Gets color of the particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <returns>The color of the particular part.</returns>
            <remarks>This method is a virtual method, it could be overridden by special child class.</remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SetPartOpacity(System.String,System.Int32)">
            <summary>
            Sets opacity of the particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <param name="opacity">The opacity of the particular part.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.GetPartOpacity(System.String)">
            <summary>
            Gets opacity of the particular part of the widget.
            </summary>
            <param name="part">The name of the particular part.</param>
            <returns>Opacity value of the particular part.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.SignalEmit(System.String,System.String)">
            <summary>
            Sends a signal to the edje object of the widget.
            </summary>
            <param name="emission">The signal's name.</param>
            <param name="source">The signal's source.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Widget.OnRealized">
            <summary>
            The callback of the Realized event.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="T:ElmSharp.DisplayRotation">
            <summary>
            Enumeration for the display rotation of window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.DisplayRotation.Degree_0">
            <summary>
            Rotation value of the window is 0 degree.
            </summary>
        </member>
        <member name="F:ElmSharp.DisplayRotation.Degree_90">
            <summary>
            Rotation value of the window is 90 degrees.
            </summary>
        </member>
        <member name="F:ElmSharp.DisplayRotation.Degree_180">
            <summary>
            Rotation value of the window is 180 degrees.
            </summary>
        </member>
        <member name="F:ElmSharp.DisplayRotation.Degree_270">
            <summary>
            Rotation value of the window is 270 degrees.
            </summary>
        </member>
        <member name="T:ElmSharp.StatusBarMode">
            <summary>
            Enumeration for the indicator opacity.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.StatusBarMode.Opaque">
            <summary>
            Opacifies the status bar.
            </summary>
        </member>
        <member name="F:ElmSharp.StatusBarMode.Translucent">
            <summary>
            Be translucent the status bar.
            </summary>
            <remarks>
            Not supported.
            </remarks>
        </member>
        <member name="F:ElmSharp.StatusBarMode.Transparent">
            <summary>
            Transparentizes the status bar.
            </summary>
        </member>
        <member name="T:ElmSharp.KeyGrabMode">
            <summary>
            Enumeration for the keygrab modes of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.KeyGrabMode.Shared">
            <summary>
            Unknown keygrab mode.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyGrabMode.Topmost">
            <summary>
            Getting the grabbed-key together with the other client windows.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyGrabMode.Exclusive">
            <summary>
            Getting the grabbed-key only when the window is top of the stack.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyGrabMode.OverrideExclusive">
            <summary>
            Getting the grabbed-key exclusively regardless of the window's position.
            </summary>
        </member>
        <member name="T:ElmSharp.IndicatorMode">
            <summary>
            Enumeration for the indicator mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.IndicatorMode.Unknown">
            <summary>
            Unknown indicator state.
            </summary>
        </member>
        <member name="F:ElmSharp.IndicatorMode.Hide">
            <summary>
            Hides the indicator.
            </summary>
        </member>
        <member name="F:ElmSharp.IndicatorMode.Show">
            <summary>
            Shows the indicator.
            </summary>
        </member>
        <member name="T:ElmSharp.KeyboardMode">
            <summary>
            Enumeration for the keyboard mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Unknown">
            <summary>
            Unknown keyboard state.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Off">
            <summary>
            Request to deactivate the keyboard.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.On">
            <summary>
            Enable keyboard with default layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Alpha">
            <summary>
            Alpha (a-z) keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Numeric">
            <summary>
            Numeric keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Pin">
            <summary>
            Pin keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.PhoneNumber">
            <summary>
            Phone keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Hex">
            <summary>
            Hexadecimal numeric keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.QWERTY">
            <summary>
            Full (QWERTY) keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Password">
            <summary>
            Password keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.IP">
            <summary>
            IP keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Host">
            <summary>
            Host keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.File">
            <summary>
            File keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.URL">
            <summary>
            URL keyboard layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.Keypad">
            <summary>
            Keypad layout.
            </summary>
        </member>
        <member name="F:ElmSharp.KeyboardMode.J2ME">
            <summary>
            J2ME keyboard layout.
            </summary>
        </member>
        <member name="T:ElmSharp.WindowType">
            <summary>
            Enumeration for the window type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.WindowType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Basic">
            <summary>
            A normal window. Indicates a normal, top-level window. Almost every window will be created with this type.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Dialog">
            <summary>
            Used for simple dialog windows.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Desktop">
            <summary>
            For special desktop windows, like a background window holding desktop icons.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Dock">
            <summary>
            The window is used as a dock or panel. Usually would be kept on top of any other window by the Window Manager.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Toolbar">
            <summary>
            The window is used to hold a floating toolbar, or similar.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Menu">
            <summary>
            Similar to Toolbar.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Utility">
            <summary>
            A persistent utility window, like a toolbox or palette.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Splash">
            <summary>
            Splash window for a starting up application.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.DropdownMenu">
            <summary>
            The window is a dropdown menu, as when an entry in a menubar is clicked.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.PopupMenu">
            <summary>
            Like DropdownMenu, but for the menu triggered by right-clicking an object.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Tooltip">
            <summary>
            The window is a tooltip. A short piece of explanatory text that typically appears after the mouse cursor hovers over an object for a while.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Notification">
            <summary>
            A notification window, like a warning about battery life or a new e-mail received.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Combo">
            <summary>
            A window holding the contents of a combo box.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.DragAndDrop">
            <summary>
            Used to indicate the window as a representation of an object being dragged across different windows, or even applications.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.InlinedImage">
            <summary>
            The window is rendered onto an image buffer. No actual window is created for this type, instead the window and all of its contents will be rendered to an image buffer.
            This allows to have children windows inside a parent one just like any other object would be, and do other things like applying Evas_Map effects to it.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.SocketImage">
            <summary>
            The window is rendered onto an image buffer and can be shown other process's plug image object.
            No actual window is created for this type, instead the window and all of its contents will be rendered to an image buffer and can be shown other process's plug image object.
            </summary>
        </member>
        <member name="F:ElmSharp.WindowType.Fake">
            <summary>
            This window was created using a pre-existing canvas. The window widget can be deleted, but the canvas must be managed externally.
            </summary>
        </member>
        <member name="T:ElmSharp.NotificationLevel">
            <summary>
            Enumeration of notification window's priority level.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.NotificationLevel.None">
            <summary>
            No (reset) notification level. This value makes the window place in normal layer.
            </summary>
        </member>
        <member name="F:ElmSharp.NotificationLevel.Default">
            <summary>
            Default notification level.
            </summary>
        </member>
        <member name="F:ElmSharp.NotificationLevel.Medium">
            <summary>
            Higher notification level than default.
            </summary>
        </member>
        <member name="F:ElmSharp.NotificationLevel.High">
            <summary>
            Higher notification level than medium.
            </summary>
        </member>
        <member name="F:ElmSharp.NotificationLevel.Top">
            <summary>
            The highest notification level.
            </summary>
        </member>
        <member name="T:ElmSharp.ScreenMode">
            <summary>
            Enumeration of screen mode.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.ScreenMode.Default">
            <summary>
            The mode which turns the screen off after a timeout.
            </summary>
        </member>
        <member name="F:ElmSharp.ScreenMode.AlwaysOn">
            <summary>
            The mode which keeps the screen turned on.
            </summary>
        </member>
        <member name="T:ElmSharp.Window">
            <summary>
            The Window is a container that contains the graphical user interface of a program.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.#ctor(System.String)">
            <summary>
            Creates and initializes a new instance of the Window class.
            </summary>
            <param name="name">Window name.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.#ctor(ElmSharp.Window,System.String)">
            <summary>
            Creates and initializes a new instance of the Window class.
            </summary>
            <param name="parent">
            Parent widget which this window is created on.
            </param>
            <param name="name">
            Window name.
            </param>
            <remarks>
            Window constructor.show window indicator, set callback
            when closing the window in any way outside the program control,
            and set callback when window rotation is changed.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.#ctor(ElmSharp.Window,System.String,ElmSharp.WindowType)">
            <summary>
            Creates and initializes a new instance of the Window class.
            </summary>
            <param name="parent">
            Parent widget which this window is created on.
            </param>
            <param name="name">
            Window name.
            </param>
            <param name="type">
            Window type.
            </param>
            <remarks>
            Window constructor.show window indicator, set callback
            when closing the window in any way outside the program control,
            and set callback when window rotation is changed.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.#ctor">
            <summary>
            Creates and initializes a new instance of the Window class.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Window.CloseRequested">
            <summary>
            CloseRequested will be triggered when window is closed.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="E:ElmSharp.Window.RotationChanged">
            <summary>
            RotationChanged will be triggered when window is rotated.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Name">
            <summary>
            Sets or gets the window name.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Type">
            <summary>
            Gets the window type.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.ScreenSize">
            <summary>
            Gets the window size with Size value(w,h)
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.ScreenDpi">
            <summary>
            Gets the screen dpi for the screen that the window is on.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Rotation">
            <summary>
            Gets the rotation of the window. The rotation of the window in degrees (0-360).
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.IsRotationSupported">
            <summary>
            Gets whether the window manager supports window rotation or not.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.AavailableRotations">
            <summary>
            Sets or gets the available rotation degree.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.AvailableRotations">
            <summary>
            Sets or gets the available rotation degree.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.AutoDeletion">
            <summary>
            Sets or gets whether the auto deletion function is enabled.
            </summary>
            <remarks>
            If you enable auto deletion, the window is automatically destroyed after the signal is emitted.
            If auto deletion is disabled, the window is not destroyed and the program has to handle it.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Alpha">
            <summary>
            Sets or gets the alpha channel state of the window.
            </summary>
            <remarks>
            true if the window alpha channel is enabled, false otherwise.
            If alpha is true, the alpha channel of the canvas will be enabled possibly making parts of the window completely or partially transparent.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Role">
            <summary>
            Sets or gets the role of the window.
            </summary>
            <remarks>
            The Role will be invalid if a new role is set or if the window is destroyed.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.StatusBarMode">
            <summary>
            Sets or gets the mode of the status bar.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Iconified">
            <summary>
            Sets or gets the iconified state of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.IndicatorMode">
            <summary>
            Gets or sets the window's indicator mode.
            </summary>
            <value>The indicator mode.</value>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Aspect">
            <summary>
            Gets or sets the aspect ratio of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.AutoHide">
            <summary>
            Window's autohide state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Borderless">
            <summary>
            Gets the borderless state of the window.
            This function requests the Window Manager to not draw any decoration around the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.DemandAttention">
            <summary>
            Gets or sets the demand attention state of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.FloatingMode">
            <summary>
            Gets or sets the floating mode of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.FocusHighlightAnimation">
            <summary>
            Gets or sets the animate status for the focus highlight for this window.
            This function will enable or disable the animation of focus highlight only for the given window, regardless of the global setting for it.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.FocusHighlightEnabled">
            <summary>
            Gets or sets the enabled status for the focus highlight in the window.
            This function will enable or disable the focus highlight only for the given window, regardless of the global setting for it.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.FocusHighlightStyle">
            <summary>
            Gets or sets the style for the focus highlight on this window.
            Sets the style to use for theming the highlight of focused objects on the given window. If style is NULL, the default will be used.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.KeyboardMode">
            <summary>
            Gets the keyboard mode of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Layer">
            <summary>
            Gets or sets the layer of the window.
            What this means exactly will depend on the underlying engine used.
            In the case of X11 backed engines, the value in layer has the following meanings:
            less than 3 means that the window will be placed below all others,
            more than 5 means that the window will be placed above all others,
            and anything else means that the window will be placed in the default layer.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Modal">
            <summary>
            Gets or sets the modal state of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.NoBlank">
            <summary>
            Gets or sets the noblank property of the window.
            This is a way to request the display on which the window is shown is not blank, screensave, or otherwise hidden or obscure. It is intended for use such as media playback on a television where a user may not want to be interrupted by an idle screen.
            The noblank property may have no effect if the window is iconified/minimized or hidden.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Profile">
            <summary>
            Gets the profile of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.ScreenConstrain">
            <summary>
            Gets the constraints on the maximum width and height of the window relative to the width and height of its screen.
            When this function returns true, object will never resize larger than the screen.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.BaseSize">
            <summary>
            Gets or sets the base size of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.StepSize">
            <summary>
            Gets or sets the step size of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.ScreenPositionX">
            <summary>
            Gets the screen position X of a window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.ScreenPositionY">
            <summary>
            Gets the screen position Y of a window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Urgent">
            <summary>
            Gets or sets the urgent state of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Withdrawn">
            <summary>
            Gets or sets the withdrawn state of the window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.NotificationLevel">
            <summary>
            Gets or sets the priority level for the specified notification window.
            </summary>
            <privilege>
            http://tizen.org/privilege/window.priority.set
            </privilege>
            /// <remarks>
            This can be used for a notification type window only.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.ScreenMode">
            <summary>
            Gets or sets the window's screen mode.
            This API is useful when the application need to keep the display turned on.
            If the application set the mode to ScreenMode.AlwaysOn to its window and the window is shown wholly or partially,
            the window manager requests the display system to keep the display on as long as the window is shown.
            If the window is no longer shown, then the window manger request the display system to go back to normal operation.
            Default screen mode of window is ScreenMode.Default.
            </summary>
            <privilege>
            http://tizen.org/privilege/display
            </privilege>
            <remarks>
            This needs the privilege. If the application which is not get the privilege use this API, the window manager generates the permission deny error.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="P:ElmSharp.Window.Brightness">
            <summary>
            Gets or sets the user's preferred brightness of the specified window.
            This is useful when the application need to change the brightness of the screen when it is appeared on the screen.
            If the application sets the brightness 0 to 100 to its window and the application window is shown wholly or partially,
            the window manager requests the display system to change the brightness of the screen using user's preferred brightness.
            If the window is no longer shown, then the window manger request the display system to go back to default brightness.
            If the brightness is less than 0, this means to use the default screen brightness.
            </summary>
            <privilege>
            http://tizen.org/privilege/display
            </privilege>
            <remarks>
            This needs the privilege. If the application which is not get the privilege use this API, the window manager generates the permission deny error.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.CreateServiceSocket(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a socket to provide the service for the Plug widget.
            </summary>
            <param name="name">A service name.</param>
            <param name="number">A number (any value, 0 being the common default) to differentiate multiple instances of services with the same name.</param>
            <param name="systemWide">A boolean that if true, specifies to create a system-wide service all users can connect to, otherwise the service is private to the user ID that created the service.</param>
            <returns>If true creates successful, otherwise false.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.SetRotation(System.Int32,System.Boolean)">
            <summary>
            Sets the rotation of the window.
            </summary>
            <param name="degree">The rotation of the window, in degrees (0-360), counter-clockwise.</param>
            <param name="resize">Resizes the window's contents so that they fit inside the current window geometry.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.SetOpaqueState">
            <summary>
            Sets the alpha window's visual state to opaque state.
            This sets the alpha window's visual state to opaque state.
            If the alpha window sets the visual state to the opaque,
            then the window manager could handle it as the opaque window while calculating visibility.
            This will have no effect when used by a non-alpha window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.UnsetOpaqueState">
            <summary>
            Unsets the alpha window's visual state to opaque state.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.FocusSkip(System.Boolean)">
            <summary>
            Sets the window to be skipped by focus.
            This sets the window to be skipped by normal input.
            This means the Windows Manager will be asked to not focus this window as well as omit it from things like the taskbar, pager etc.
            Call this and enable it on the window BEFORE you show it for the first time, otherwise it may have no effect.
            Use this for windows that have only output information or might only be interacted with by the mouse or fingers, and never for typing input.
            Be careful that this may have side-effects like making the window non-accessible in some cases unless the window is specially handled. Use this with care.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.PullUp">
            <summary>
            Pulls up the window object.
            Places the window pointed by object at the top of the stack, so that it's not covered by any other window.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.BringDown">
            <summary>
            Brings down the window object.
            Places the window pointed by object at the bottom of the stack, so that no other window is covered by it.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.Active">
            <summary>
            This function sends a request to the Windows Manager to activate the window.
            If honored by the Windows Manager, the window receives the keyboard focus.
            </summary>
            <remarks>
            This is just a request that the Windows Manager may ignore, so calling this function does not ensure
            in any way that the window is going to be the active one after it.
            </remarks>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.DeleteResizeObject(ElmSharp.EvasObject)">
            <summary>
            Deletes the subobj as a resize object of the window object.
            This function removes the object subobj from the resize objects of the window object.
            It will not delete the object itself, which will be left unmanaged and should be deleted by the developer, manually handled, or set as child of some other container.
            </summary>
            <param name="obj">Resize object.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.AddResizeObject(ElmSharp.EvasObject)">
            <summary>
            Adds an object as a resize object of the window.
            </summary>
            <remarks>
            Setting an object as a resize object of the window means that the object child's size and
            position is controlled by the window directly. That is, the object is resized to match the window size
            and should never be moved or resized manually by the developer. In addition,
            resize objects of the window control the minimum size of it as well as whether it can or cannot be resized by the user.
            </remarks>
            <param name="obj">
            Resize object.
            </param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.WinKeyGrab(System.String,ElmSharp.KeyGrabMode)">
            <summary>
            Sets the keygrab value of the window.
            This function grabs the key of the window using grab_mode.
            </summary>
            <param name="keyname">The keyname to grab.</param>
            <param name="mode">According to the grabmode, it can grab key differently.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.WinKeyUngrab(System.String)">
            <summary>
            Unsets the keygrab value of the window.
            This function unsets keygrab value. Ungrab key of the window.
            </summary>
            <param name="keyname">The keyname to grab.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.KeyGrabEx(System.String)">
            <summary>
            Sets the keygrab of the window.
            </summary>
            <param name="keyname">The keyname string to set keygrab.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.KeyUngrabEx(System.String)">
            <summary>
            Unsets the keygrab of the window.
            </summary>
            <param name="keyname">The keyname string to unset keygrab.</param>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.AddAuxiliaryHint(System.String,System.String)">
            <summary>
            Creates an auxiliary hint of the window.
            </summary>
            <remarks>
            Support for this depends on the underlying windowing system. 
            </remarks>
            <param name="hint">The auxiliary hint string</param>
            <param name="value">The value string</param>
            <returns>The ID of the created auxiliary hint, otherwise -1 on failure</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.DeleteAuxiliaryHint(System.Int32)">
            <summary>
            Deletes an auxiliary hint of the window.
            </summary>
            <remarks>
            Support for this depends on the underlying windowing system. 
            </remarks>
            <param name="id">The ID of the auxiliary hint</param>
            <returns>If true deletes successful, otherwise false.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.SetAuxiliaryHintValue(System.Int32,System.String)">
            <summary>
            Changes a value of the auxiliary hint.
            </summary>
            <remarks>
            Support for this depends on the underlying windowing system. 
            </remarks>
            <param name="id">The auxiliary hint ID</param>
            <param name="value">The value string to be set</param>
            <returns>If true changes successful, otherwise false.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.GetAuxiliaryHintValue(System.Int32)">
            <summary>
            Gets a value of the auxiliary hint.
            </summary>
            <remarks>
            Support for this depends on the underlying windowing system. 
            </remarks>
            <param name="id">The auxiliary hint ID</param>
            <returns>The string value of the auxiliary hint ID</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.GetAuxiliaryHintId(System.String)">
            <summary>
            Gets an ID of the auxiliary hint string.
            </summary>
            <remarks>
            Support for this depends on the underlying windowing system. 
            </remarks>
            <param name="hint">The auxiliary hint string</param>
            <returns>The ID of the auxiliary hint, otherwise -1 on failure</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.CreateHandle(ElmSharp.EvasObject)">
            <summary>
            Creates a widget handle.
            </summary>
            <param name="parent">Parent EvasObject.</param>
            <returns>Handle IntPtr.</returns>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="M:ElmSharp.Window.CreateWindow(System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:ElmSharp.WrapType">
            <summary>
            Enumeration for the wrap types.
            </summary>
            <since_tizen> preview </since_tizen>
        </member>
        <member name="F:ElmSharp.WrapType.None">
            <summary>
            No wrap.
            </summary>
        </member>
        <member name="F:ElmSharp.WrapType.Char">
            <summary>
            Char wrap - wrap between characters.
            </summary>
        </member>
        <member name="F:ElmSharp.WrapType.Word">
            <summary>
            Word wrap - wrap within the allowed wrapping points.
            (as defined in the unicode standard).
            </summary>
        </member>
        <member name="F:ElmSharp.WrapType.Mixed">
            <summary>
            Mixed wrap - word wrap, if that fails, char wrap.
            </summary>
        </member>
        <member name="T:Interop.Elementary.ReturnKeyType">
            <summary>
            Types of "Enter" keys available for different keyboard layouts.
            </summary>
        </member>
    </members>
</doc>
