<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.NUI.Components</name>
    </assembly>
    <members>
        <member name="T:Tizen.NUI.Components.AlertDialog">
            <summary>
            AlertDialog class shows a dialog with title, message and action buttons.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.#ctor">
            <summary>
            Creates a new instance of AlertDialog.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.#ctor(System.String)">
            <summary>
            Creates a new instance of AlertDialog.
            </summary>
            <param name="style">Creates AlertDialog by special style defined in UX.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.#ctor(Tizen.NUI.Components.AlertDialogStyle)">
            <summary>
            Creates a new instance of AlertDialog.
            </summary>
            <param name="alertDialogStyle">Creates AlertDialog by style customized by user.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Applies style to AlertDialog.
            </summary>
            <param name="viewStyle">The style to apply.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.Title">
            <summary>
            Title text of AlertDialog.
            Title text is set to TitleContent's Text if TitleContent is TextLabel.
            If TitleContent's Text is set manually by user, then it is not guaranteed that TitleContent's Text is the same with Title text.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.TitleContent">
            <summary>
            Title content of AlertDialog.
            TitleContent is added as a child of AlertDialog automatically.
            Title text is set to TitleContent's Text if TitleContent is TextLabel.
            If TitleContent's Text is set manually by user, then it is not guaranteed that TitleContent's Text is the same with Title text.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.Message">
            <summary>
            Message text of AlertDialog.
            Message text is set to Content's Text if Content is TextLabel.
            If Content's Text is set manually by user, then it is not guaranteed that Content's Text is the same with Message text.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.Content">
            <summary>
            Content of AlertDialog.
            Content is added as a child of AlertDialog automatically.
            Message text is set to Content's Text if Content is TextLabel.
            If Content's Text is set manually by user, then it is not guaranteed that Content's Text is the same with Message text.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.Actions">
            <summary>
            Action views of AlertDialog.
            Action views are added as children of ActionContent.
            When Actions are set, previous Actions are removed from ActionContent.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.ActionContent">
            <summary>
            Action content of AlertDialog.
            ActionContent is added as a child of AlertDialog automatically.
            Actions are added as children of ActionContent.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.AccessibilityGetName">
            <summary>
            AccessibilityGetName.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialog.AccessibilityCalculateStates">
            <summary>
            Informs AT-SPI bridge about the set of AT-SPI states associated with this object.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.DefaultTitleContent">
            <summary>
            Default title content of AlertDialog.
            If Title is set, then default title content is automatically displayed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.DefaultContent">
            <summary>
            Default content of AlertDialog.
            If Message is set, then default content is automatically displayed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialog.DefaultActionContent">
            <summary>
            Default action content of AlertDialog.
            If Actions are set, then default action content is automatically displayed.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.ClickedEventArgs">
            <summary>
            ClickedEventArgs is a class to record button click event arguments which will sent to user.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.SelectedChangedEventArgs">
            <summary>
            SelectedChangedEventArgs is a class to record item selected arguments which will sent to user.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SelectedChangedEventArgs.IsSelected">
            <summary> Selected state </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Button">
            <summary>
            Button is one kind of common component, a button clearly describes what action will occur when the user selects it.
            Button may contain text or an icon.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Button.IconRelativeOrientationProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Button.IsEnabledProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Button.IsSelectedProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Button.IsSelectableProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Button.IconPaddingProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Button.TextPaddingProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Button.ItemAlignmentProperty">
            <summary> The bindable property of ItemAlignment. </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Button.ItemSpacingProperty">
            <summary> The bindable property of ItemSpacing. </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Button.#ctor">
            <summary>
            Creates a new instance of a Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.#ctor(System.String)">
            <summary>
            Creates a new instance of a Button with style.
            </summary>
            <param name="style">Create Button by special style defined in UX.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.#ctor(Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Creates a new instance of a Button with style.
            </summary>
            <param name="buttonStyle">Create Button by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.AccessibilityCalculateStates">
            <summary>
            Calculates current states for the button<br />
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.Button.ClickEvent">
            <summary>
            An event for the button clicked signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Button.Clicked">
            <summary>
            An event for the button clicked signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Button.StateChangedEvent">
            <summary>
            An event for the button state changed signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Button.IconOrientation">
            <summary>
            Icon orientation.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Button.IconOrientation.Top">
            <summary>
            Top.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Button.IconOrientation.Bottom">
            <summary>
            Bottom.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Button.IconOrientation.Left">
            <summary>
            Left.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Button.IconOrientation.Right">
            <summary>
            Right.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.Icon">
            <summary>
            Button's icon part.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.OverlayImage">
            <summary>
            Button's overlay image part.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TextLabel">
            <summary>
            Button's text part.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.Style">
            <summary>
            The last applied style object copy.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.Text">
            <summary>
            The text of Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IsSelectable">
            <summary>
            Flag to decide Button can be selected or not.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TranslatableText">
            <summary>
            Translate text string in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.PointSize">
            <summary>
            Text point size in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.FontFamily">
            <summary>
            Text font family in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TextColor">
            <summary>
            Text color in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TextAlignment">
            <summary>
            Text horizontal alignment in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IconURL">
            <summary>
            Icon image's resource url in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IconSize">
            <summary>
            Icon image's size in Button.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TextSelector">
            <summary>
            Text string selector in Button.
            Getter returns copied selector value if exist, null otherwise.
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TranslatableTextSelector">
            <summary>
            Translatable text string selector in Button.
            Getter returns copied selector value if exist, null otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TextColorSelector">
            <summary>
            Text color selector in Button.
            Getter returns copied selector value if exist, null otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.PointSizeSelector">
            <summary>
            Text font size selector in Button.
            Getter returns copied selector value if exist, null otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IconURLSelector">
            <summary>
            Icon image's resource url selector in Button.
            Getter returns copied selector value if exist, null otherwise.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IsSelected">
            <summary>
            Flag to decide selected state in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IsEnabled">
            <summary>
            Flag to decide enable or disable in Button.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IconRelativeOrientation">
            <summary>
            Icon relative orientation in Button, work only when show icon and text.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.IconPadding">
            <summary>
            Icon padding in Button. It is shortcut of Icon.Padding.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.TextPadding">
            <summary>
            Text padding in Button. It is shortcut of TextLabel.Padding.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.ItemAlignment">
            <summary>
            The item (text or icon or both) alignment.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Button.ItemSpacing">
            <summary>
            The space between icon and text.
            The value is applied when there exist icon and text both.
            The width value is used when the items are arranged horizontally. Otherwise, the height value is used.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the key event should be consumed.</returns>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnFocusGained">
            <summary>
            Called when the control gain key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is gained.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnFocusLost">
            <summary>
            Called when the control loses key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is lost.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnTouch(Tizen.NUI.Touch)">
            <summary>
            Called after a touch event is received by the owning view.<br />
            CustomViewBehaviour.REQUIRES_TOUCH_EVENTS must be enabled during construction. See CustomView(ViewWrapperImpl.CustomViewBehaviour behaviour).<br />
            </summary>
            <param name="touch">The touch event.</param>
            <returns>True if the event should be consumed.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to button.
            </summary>
            <param name="viewStyle">The style to apply.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Button.ClickEventArgs">
            <summary>
            ClickEventArgs is a class to record button click event arguments which will sent to user.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Button.StateChangedEventArgs">
            <summary>
            StateChangeEventArgs is a class to record button state change event arguments which will sent to user.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Button.StateChangedEventArgs.PreviousState">
            <summary> previous state of Button </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="F:Tizen.NUI.Components.Button.StateChangedEventArgs.CurrentState">
            <summary> current state of Button </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="M:Tizen.NUI.Components.Button.AccessibilityGetName">
            <summary>
            Get accessibility name.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Button.AccessibilityShouldReportZeroChildren">
            <summary>
            Prevents from showing child widgets in AT-SPI tree.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Button.Extension">
            <summary>
            The ButtonExtension instance that is injected by ButtonStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Button.CreateText">
            <summary>
            Creates Button's text part.
            </summary>
            <return>The created Button's text part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Button.CreateIcon">
            <summary>
            Creates Button's icon part.
            </summary>
            <return>The created Button's icon part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Button.CreateOverlayImage">
            <summary>
            Creates Button's overlay image part.
            </summary>
            <return>The created Button's overlay image part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnClicked(Tizen.NUI.Components.ClickedEventArgs)">
            <summary>
            Called when the Button is Clicked by a user
            </summary>
            <param name="eventArgs">The click information.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Button.CreateViewStyle">
            <summary>
            Get Button style.
            </summary>
            <returns>The default button style.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnUpdate">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Button.HandleControlStateOnTouch(Tizen.NUI.Touch)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Button.UpdateState">
            <summary>
            Update Button State.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Button.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Button and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnInitialize">
            <summary>
            Initializes AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Button.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Button.LayoutItems">
            <summary>
            Put sub items (e.g. buttonText, buttonIcon) to the right place.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.ButtonGroup">
            <summary>
            ButtonGroup is a group of buttons which can be set common property<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemheightProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemPointSizeProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemFontFamilyProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemTextColorProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemTextAlignmentProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.OverLayBackgroundColorSelectorProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemBackgroundImageUrlProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemBackgroundBorderProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonGroup.ItemImageShadowProperty">
            This will be public opened in tizen_5.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.#ctor(Tizen.NUI.BaseComponents.View)">
            <summary>
            Construct an button group.
            </summary>
            <param name="view">root view</param>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.Count">
            <summary>
            Get group item number.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.Contains(Tizen.NUI.Components.Button)">
            <summary>
            Check if the button exists.
            </summary>
            <param name="bt">button item</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.GetIndex(Tizen.NUI.Components.Button)">
            <summary>
            Get button item index.
            </summary>
            <param name="bt">button item</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.GetItem(System.Int32)">
            <summary>
            Get item by index.
            </summary>
            <param name="index">item index.</param>
            <returns></returns>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.AddItem(Tizen.NUI.Components.Button)">
            <summary>
            Add item into group.
            </summary>
            <param name="bt">button item.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.RemoveItem(Tizen.NUI.Components.Button)">
            <summary>
            The item to removed.
            </summary>
            <param name="bt">button item.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.RemoveItem(System.Int32)">
            <summary>
            Remove item by index.
            </summary>
            <param name="index">item index.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.RemoveAll">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.UpdateButton(Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Update button by style.
            </summary>
            <param name="btStyle">button style.</param>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.Itemheight">
            <summary>
            Common height for all of the Items
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemPointSize">
            <summary>
            Get or set point size of item.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemFontFamily">
            <summary>
            Get or set font family of item.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemTextColor">
            <summary>
            Get or set text color of item.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemTextAlignment">
            <summary>
            Get or set text alignment of item.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.OverLayBackgroundColorSelector">
            <summary>
            Get or set background color of item.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemBackgroundImageUrl">
            <summary>
            The mutually exclusive with "backgroundColor" and "background" type Map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemBackgroundBorder">
            <summary>
            Get or set background border of item.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonGroup.ItemImageShadow">
            <summary>
            Get or set shadow resource of item.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonGroup.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.CheckBox">
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CheckBox.#ctor">
            <summary>
            Creates a new instance of a CheckBox.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CheckBox.#ctor(System.String)">
            <summary>
            Creates a new instance of a CheckBox with style.
            </summary>
            <param name="style"></param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CheckBox.#ctor(Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Creates a new instance of a CheckBox with style.
            </summary>
            <param name="buttonStyle"></param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CheckBox.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.CheckBox.ItemGroup">
            <summary>
            Get CheckBoxGroup to which this CheckBox belong.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.CheckBoxGroup">
            <summary>
            The CheckboxGroup class is used to group together a set of CheckBox control
            </summary>
            <code>
            CheckBoxGroup checkGroup = new CheckBoxGroup();
            CheckBox check1 = new CheckBox();
            CheckBox check2 = new CheckBox();
            checkGroup.Add(check1);
            checkGroup.Add(check2);
            </code>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.#ctor">
            <summary>
            Construct CheckBoxGroup
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.Add(Tizen.NUI.Components.CheckBox)">
            <summary>
            Add CheckBox to the end of CheckBoxGroup.
            </summary>
            <param name="check">The CheckBox to be added to the CheckBoxGroup</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.Remove(Tizen.NUI.Components.CheckBox)">
            <summary>
            Remove CheckBox from the CheckBoxGroup.
            </summary>
            <param name="check">The CheckBox to remove from the CheckBoxGroup</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.GetItem(System.Int32)">
            <summary>
            Get the CheckBox object at the specified index.
            </summary>
            <param name="index">The item index</param>
            <returns>CheckBox</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.GetCheckedIndices">
            <summary>
            Get the index array of checked items.
            </summary>
            <returns>The array of index</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.GetCheckedItems">
            <summary>
            Get the CheckBox array of checked items.
            </summary>
            <returns>The array of CheckBox</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.IsCheckedAll">
            <summary>
            Determines whether every checkboxes in the CheckBoxGroup are checked
            </summary>
            <returns>If all of CheckBoxes are checked, return true. otherwise false</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.CheckBoxGroup.CheckAll(System.Boolean)">
            <summary>
            Check or Uncheck all of child checkboxes by the specified value
            </summary>
            <param name="state">The boolean state of the check box</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Control">
            <summary>
            The control component is base class of tv nui components. It's abstract class, so can't instantiate and can only be inherited.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Control.CommandProperty">
            Internal used.
        </member>
        <member name="F:Tizen.NUI.Components.Control.CommandParameterProperty">
            Internal used.
        </member>
        <member name="M:Tizen.NUI.Components.Control.Preload">
            <summary>
            This is used to improve theme performance.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Control.#ctor">
            <summary>
            Construct an empty Control.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.#ctor(Tizen.NUI.Components.ControlStyle)">
            <summary>
            Construct with style.
            </summary>
            <param name="style">Create control with style.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.#ctor(System.String)">
            <summary>
            Construct with style name
            </summary>
            <param name="styleName">The name of style in the current theme to be applied</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Control.Feedback">
            <summary>
            Enable/Disable a sound feedback when tap gesture detected.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Control.Command">
            Internal used.
        </member>
        <member name="P:Tizen.NUI.Components.Control.CommandParameter">
            Internal used.
        </member>
        <member name="P:Tizen.NUI.Components.Control.StateFocusableOnTouchMode">
            <summary>
            Whether focusable when touch
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Control.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Control and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the key event should be consumed.</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <summary>
            Called after the size negotiation has been finished for this control.<br />
            The control is expected to assign this given size to itself or its children.<br />
            Should be overridden by derived classes if they need to layout views differently after certain operations like add or remove views, resize, or after changing specific properties.<br />
            As this function is called from inside the size negotiation algorithm, you cannot call RequestRelayout (the call would just be ignored).<br />
            </summary>
            <param name="size">The allocated size.</param>
            <param name="container">The control should add views to this container that it is not able to allocate a size for.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnFocusGained">
            <summary>
            Called when the control gain key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is gained.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnFocusLost">
            <summary>
            Called when the control loses key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is lost.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnUpdate">
            <summary>
            Update by style.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnThemeChangedEvent(System.Object,Tizen.NUI.Components.StyleManager.ThemeChangeEventArgs)">
            <summary>
            Theme change callback when theme is changed, this callback will be trigger.
            Note that it is deprecated API.Please use OnThemeChanged instead.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The event data</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.CreateViewStyle">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Control.OnThemeChanged(System.Object,Tizen.NUI.ThemeChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.DateChangedEventArgs">
            <summary>
            DateChangedEventArgs is a class to notify changed DatePicker value argument which will sent to user.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DateChangedEventArgs.#ctor(System.DateTime)">
            <summary>
            DateChangedEventArgs default constructor.
            <param name="date">date value of DatePicker.</param>
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DateChangedEventArgs.Date">
            <summary>
            DateChangedEventArgs default constructor.
            <returns>The current date value of DatePicker.</returns>
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.DatePicker">
            <summary>
            DatePicker is a class which provides a function that allows the user to select 
            a date through a scrolling motion by expressing the specified value as a list.
            DatePicker expresses the current date using the locale information of the system.
            Year range is 1970~2038 (glibc time_t struct min, max value)
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePicker.#ctor">
            <summary>
            Creates a new instance of DatePicker.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePicker.#ctor(System.String)">
            <summary>
            Creates a new instance of DatePicker.
            </summary>
            <param name="style">Creates DatePicker by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DatePicker.#ctor(Tizen.NUI.Components.DatePickerStyle)">
            <summary>
            Creates a new instance of DatePicker.
            </summary>
            <param name="datePickerStyle">Creates DatePicker by style customized by user.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DatePicker.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose DatePicker and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="E:Tizen.NUI.Components.DatePicker.DateChanged">
            <summary>
            An event emitted when DatePicker value changed, user can subscribe or unsubscribe to this event handler.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DatePicker.Date">
            <summary>
            The Date value of DatePicker.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePicker.OnInitialize">
            <summary>
            Initialize TimePicker object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePicker.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Dialog">
            <summary>
            Dialog class shows a dialog with content.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Dialog.#ctor">
            <summary>
            Creates a new instance of Dialog.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Dialog.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="P:Tizen.NUI.Components.Dialog.Content">
            <summary>
            Popup content of Dialog.
            Content is added as a child of Dialog automatically.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Dialog.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Dialog.AccessibilityCalculateStates">
            <summary>
            Informs AT-SPI bridge about the set of AT-SPI states associated with this object.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.ButtonExtension">
            <summary>
            The ButtonExtension class allows developers to access the Button's components and extend their behavior in various states.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.ButtonExtension.TouchInfo">
            <summary>
            The Touch info to get current touch position.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnCreateText(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.TextLabel)">
            <summary>
            Called immediately after the Button creates the text part.
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
            <param name="text">The created Button's text part.</param>
            <return>The refined button text.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnCreateIcon(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.ImageView)">
            <summary>
            Called immediately after the Button creates the icon part.
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
            <param name="icon">The created Button's icon part.</param>
            <return>The refined button icon.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnCreateOverlayImage(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.ImageView)">
            <summary>
            Called immediately after the Button creates the overlay image part.
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
            <param name="overlayImage">The created Button's overlayImage part.</param>
            <return>The refined button overlayImage.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnControlStateChanged(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <summary>
            Describes actions on Button's ControlStates changed.
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
            <param name="args">The control state changed information.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnClicked(Tizen.NUI.Components.Button,Tizen.NUI.Components.ClickedEventArgs)">
            <summary>
            Called when the Button is Clicked by a user
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
            <param name="eventArgs">The click event information.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnRelayout(Tizen.NUI.Components.Button)">
            <summary>
            Called after the size negotiation has been finished for the attached Control.
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.OnDispose(Tizen.NUI.Components.Button)">
            <summary>
            Called when the attached Button is explicitly disposing.
            </summary>
            <param name="button">The Button instance that the extension currently applied to.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.ButtonExtension.SetTouchInfo(Tizen.NUI.Touch)">
            <summary>
            Set the Touch Info.
            </summary>
            <param name="touch">The Touch Info.</param>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.LottieButtonExtension">
            <summary>
            LottieButtonExtension is a ButtonExtension class that uses Lottie image for a Button icon.
            <remark>
            This extension must be used within a class implementing LottieButtonStyle.
            </remark>
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonExtension.#ctor">
            <summary>
            A constructor that creates LottieButtonExtension with a specified Lottie resource URL
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.LottieButtonExtension.LottieView">
            <summary>
            The Lottie view that will be used as an icon part in a Button.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonExtension.OnCreateIcon(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.ImageView)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonExtension.OnControlStateChanged(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.LottieSwitchExtension">
            <summary>
            LottieSwitchExtension is a SwitchExtension class that uses Lottie image for a Switch icon.
            <remark>
            This extension must be used within a class implementing LottieSwitchStyle.
            </remark>
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchExtension.#ctor">
            <summary>
            A constructor that creates LottieButtonExtension with a specified Lottie resource URL
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.LottieSwitchExtension.LottieView">
            <summary>
            The Lottie view that will be used as an icon part in a Button.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchExtension.OnCreateIcon(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.ImageView)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchExtension.OnControlStateChanged(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.SlidingSwitchExtension">
            <summary>
            The SlidingSwitchExtension class makes attached Switch to animate thumb when selected/unselected.
            <remark>
            This extension must be used within a class implementing SwitchStyle.
            </remark>
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.SlidingSwitchExtension.OnSelectedChanged(Tizen.NUI.Components.Switch)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.SwitchExtension">
            <summary>
            The SwitchExtension class allows developers to access the Switch's components and extend their behavior in various states.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.SwitchExtension.OnCreateTrack(Tizen.NUI.Components.Switch,Tizen.NUI.BaseComponents.ImageView)">
            <summary>
            Called immediately after the Switch creates the track part.
            </summary>
            <param name="switchButton">The Switch instance that the extension currently applied to.</param>
            <param name="track">The created Switch's track part.</param>
            <return>The refined switch track.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.SwitchExtension.OnCreateThumb(Tizen.NUI.Components.Switch,Tizen.NUI.BaseComponents.ImageView)">
            <summary>
            Called immediately after the Switch creates the thumb part.
            </summary>
            <param name="switchButton">The Switch instance that the extension currently applied to.</param>
            <param name="thumb">The created Switch's thumb part.</param>
            <return>The refined switch thumb.</return>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.SwitchExtension.OnSelectedChanged(Tizen.NUI.Components.Switch)">
            <summary>
            Called when the Switch's selection has changed.
            </summary>
            <param name="switchButton">The Switch instance that the extension currently applied to.</param>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.ILottieButtonStyle">
            <summary>
            Interface that provides style properties for Lottie playing in Button.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.ILottieButtonStyle.LottieUrl">
            <summary>
            Get/Set Lottie resource url.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.ILottieButtonStyle.PlayRange">
            <summary>
            Get/Set LottieFrameInfo for playing on various states of attached Button.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.LottieButtonStyle">
            <summary>
            LottieButtonStyle implements ILottieButtonStyle interface to support extended ButtonStyle using Lottie.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonStyle.#ctor">
            <summary>
            Create new instance of a LottieButtonStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonStyle.#ctor(Tizen.NUI.Components.Extension.LottieButtonStyle)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.LottieButtonStyle.LottieUrl">
            <inheritdoc/>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.LottieButtonStyle.PlayRange">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieButtonStyle.CreateExtension">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Extension.LottieSwitchStyle">
            <summary>
            LottieSwitchStyle implements ILottieButtonStyle interface to support extended ButtonStyle using Lottie.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchStyle.#ctor">
            <summary>
            Create new instance of a LottieButtonStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchStyle.#ctor(Tizen.NUI.Components.Extension.LottieSwitchStyle)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.LottieSwitchStyle.LottieUrl">
            <inheritdoc/>
        </member>
        <member name="P:Tizen.NUI.Components.Extension.LottieSwitchStyle.PlayRange">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Extension.LottieSwitchStyle.CreateExtension">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewItemClickedEventArgs">
            <summary>
            FlexibleView ItemClick Event Arguments.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewItemClickedEventArgs.ClickedView">
            <summary>
            The clicked FlexibleViewViewHolder.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewItemTouchEventArgs">
            <summary>
            FlexibleView ItemTouch Event Arguments.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewItemTouchEventArgs.TouchedView">
            <summary>
            The touched FlexibleViewViewHolder.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleView">
            <summary>
            A flexible view for providing a limited window into a large data set.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleView.NO_POSITION">
            <summary>
            Constant value: -1.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleView.INVALID_TYPE">
            <summary>
            Constant value: -1.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.#ctor">
            <summary>
            Creates a FlexibleView instance.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="E:Tizen.NUI.Components.FlexibleView.ItemClicked">
            <summary>
            Item click event.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="E:Tizen.NUI.Components.FlexibleView.ItemTouch">
            <summary>
            Item touch event.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="E:Tizen.NUI.Components.FlexibleView.StyleChanged">
            <summary>
            Style changed, for example default font size.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleView.Padding">
            <summary>
            overwrite the Padding.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleView.FocusedItemIndex">
            <summary>
            Gets or sets the focused item index(adapter position).
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.SetAdapter(Tizen.NUI.Components.FlexibleViewAdapter)">
            <summary>
            Set a new adapter to provide child views on demand.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.GetAdapter">
            <summary>
            Retrieves the previously set adapter or null if no adapter is set.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.SetLayoutManager(Tizen.NUI.Components.FlexibleViewLayoutManager)">
            <summary>
            Set the FlexibleViewLayoutManager that this FlexibleView will use.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.GetLayoutManager">
            <summary>
            Return the FlexibleViewLayoutManager currently responsible for layout policy for this FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.ScrollToPositionWithOffset(System.Int32,System.Int32)">
            <summary>
            Convenience method to scroll to a certain position
            </summary>
            <param name="position">Adapter position</param>
            <param name="offset">The distance (in pixels) between the start edge of the item view and start edge of the FlexibleView.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.MoveFocus(Tizen.NUI.Components.FlexibleViewLayoutManager.Direction)">
            <summary>
            Move focus by direction.
            </summary>
            <param name="direction">Direction. Should be "Left", "Right", "Up" or "Down" </param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.AttachScrollBar(Tizen.NUI.Components.ScrollBar)">
            <summary>
            Attach a scrollbar to this FlexibleView.
            </summary>
            <param name="scrollBar">ScrollBar</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.DetachScrollBar">
            <summary>
            Detach the scrollbar from this FlexibleView.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.FindViewHolderForLayoutPosition(System.Int32)">
            <summary>
            Return the FlexibleViewViewHolder for the item in the given position of the data set as of the latest layout pass.
            This method checks only the children of FlexibleViewRecyclerView. If the item at the given position is not laid out, it will not create a new one.
            </summary>
            <param name="position">The position of the item in the data set of the adapter</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.FindViewHolderForAdapterPosition(System.Int32)">
            <summary>
            Return the FlexibleViewViewHolder for the item in the given position of the data set.
            This method checks only the children of FlexibleViewRecyclerView. If the item at the given position is not laid out, it will not create a new one.
            </summary>
            <param name="position">The position of the item in the data set of the adapter</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.GetRecycler">
            <summary>
            Return the recycler instance.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.CreateViewStyle">
            <summary>
            you can override it to create your own default style.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <summary>
            you can override it to relayout elements.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.AdapterHelper.OnItemRangeInserted(System.Int32,System.Int32)">
            @return True if updates should be processed.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleView.AdapterHelper.OnItemRangeRemoved(System.Int32,System.Int32)">
            @return True if updates should be processed.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleView.UpdateOp">
            Queued operation to happen when child views are updated.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewAdapter">
            <summary>
            FlexibleViewAdapters provide a binding from an app-specific data set to views that are displayed within a FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnCreateViewHolder(System.Int32)">
            <summary>
            Called when FlexibleView needs a new FlexibleViewViewHolder of the given type to represent an item.
            </summary>
            <param name="viewType">The view type of the new View</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnBindViewHolder(Tizen.NUI.Components.FlexibleViewViewHolder,System.Int32)">
            <summary>
            Called by FlexibleView to display the data at the specified position.
            </summary>
            <param name="holder">The FlexibleViewViewHolder which should be updated to represent the contents of the item at the given position in the data set.</param>
            <param name="position">The position of the item within the adapter's data set.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnDestroyViewHolder(Tizen.NUI.Components.FlexibleViewViewHolder)">
            <summary>
            Called when a FlexibleViewViewHolder is never used.
            </summary>
            <param name="holder">The FlexibleViewViewHolder which need to be disposed</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.GetItemCount">
            <summary>
            Returns the total number of items in the data set held by the adapter.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.GetItemViewType(System.Int32)">
            <summary>
            Return the view type of the item at position for the purposes of view recycling.
            </summary>
            <param name="position">The position of the item within the adapter's data set.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnAttachedToRecyclerView(Tizen.NUI.Components.FlexibleView)">
            <summary>
            Called by FlexibleView when it starts observing this FlexibleViewAdapter.
            Keep in mind that same adapter may be observed by multiple FlexibleView.
            </summary>
            <param name="flexibleView">The FlexibleView instance which started observing this adapter.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnDetachedFromRecyclerView(Tizen.NUI.Components.FlexibleView)">
            <summary>
            Called by FlexibleView when it stops observing this FlexibleViewAdapter.
            </summary>
            <param name="flexibleView">The FlexibleView instance which stopped observing this adapter.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnFocusChange(Tizen.NUI.Components.FlexibleView,System.Int32,System.Int32)">
            <summary>
            Called when FlexibleView focus changed.
            </summary>
            <param name="flexibleView">The FlexibleView into which the focus FlexibleViewViewHolder changed.</param>
            <param name="previousFocus">The position of previous focus</param>
            <param name="currentFocus">The position of current focus</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnViewRecycled(Tizen.NUI.Components.FlexibleViewViewHolder)">
            <summary>
            Called when a view created by this adapter has been recycled.
            If an item view has large or expensive data bound to it such as large bitmaps, this may be a good place to release those resources
            </summary>
            <param name="holder">The FlexibleViewViewHolder will be recycled.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnViewAttachedToWindow(Tizen.NUI.Components.FlexibleViewViewHolder)">
            <summary>
            Called when a view created by this adapter has been attached to a window.
            This can be used as a reasonable signal that the view is about to be seen by the user.
            </summary>
            <param name="holder">Holder of the view being attached.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.OnViewDetachedFromWindow(Tizen.NUI.Components.FlexibleViewViewHolder)">
            <summary>
            Called when a view created by this adapter has been detached from its window.
            </summary>
            <param name="holder">Holder of the view being detached.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyDataSetChanged">
            <summary>
            Notify any registered observers that the data set has changed.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemChanged(System.Int32)">
            <summary>
            Notify any registered observers that the data set has changed.
            It indicates that any reflection of the data at position is out of date and should be updated.
            </summary>
            <param name="position">Position of the item that has changed</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemRangeChanged(System.Int32,System.Int32)">
            <summary>
            Notify any registered observers that the itemCount items starting at position positionStart have changed.
            An optional payload can be passed to each changed item.
            </summary>
            <param name="positionStart">Position of the first item that has changed</param>
            <param name="itemCount">Number of items that have changed</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemInserted(System.Int32)">
            <summary>
            Notify any registered observers that the data set has been newly inserted.
            It indicates that any reflection of the data at position is out of date and should be updated.
            </summary>
            <param name="position">Position of the item that has been newly inserted</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemRangeInserted(System.Int32,System.Int32)">
            <summary>
            Notify any registered observers that the itemCount items starting at position positionStart have been newly inserted.
            </summary>
            <param name="positionStart">Position of the first item that was inserted</param>
            <param name="itemCount">Number of items inserted</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemRemoved(System.Int32)">
            <summary>
            Notify any registered observers that the item previously located at position has been removed from the data set. 
            </summary>
            <param name="position">Previous position of the first item that was removed</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemRangeRemoved(System.Int32,System.Int32)">
            <summary>
            Notify any registered observers that the itemCount items previously located at positionStart have been removed from the data set.
            </summary>
            <param name="positionStart">Previous position of the first item that was removed</param>
            <param name="itemCount">Number of items removed from the data set </param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewAdapter.NotifyItemMoved(System.Int32,System.Int32)">
            <summary>
            Notify any registered observers that the item reflected at fromPosition has been moved to toPosition.
            </summary>
            <param name="fromPosition">Previous position of the item</param>
            <param name="toPosition">New position of the item. </param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleViewAdapter.ItemEventArgs.param">
            <summary>
            Data change event parameters.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewAdapter.ItemEventArgs.EventType">
            <summary>
            Data changed event type.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewLayoutManager">
            <summary>
            A FlexibleViewLayoutManager is responsible for measuring and positioning item views within a FlexibleView
            as well as determining the policy for when to recycle item views that are no longer visible to the user.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewLayoutManager.Direction">
            <summary>
            Direction
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleViewLayoutManager.Direction.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleViewLayoutManager.Direction.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleViewLayoutManager.Direction.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.FlexibleViewLayoutManager.Direction.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.OnLayoutChildren(Tizen.NUI.Components.FlexibleViewRecycler)">
            <summary>
            Layout all relevant child views from the given adapter.
            </summary>
            <param name="recycler">Recycler to use for fetching potentially cached views for a position</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.OnLayoutCompleted">
            <summary>
            Called after a full layout calculation is finished.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.FocusPosition">
            <summary>
            Gets the current focus position in adapter.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.ItemCount">
            <summary>
            Gets the datas count in data sets.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.CanScrollHorizontally">
            <summary>
            Query if horizontal scrolling is currently supported. The default implementation returns false.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.CanScrollVertically">
            <summary>
            Query if vertical scrolling is currently supported. The default implementation returns false.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ScrollHorizontallyBy(System.Single,Tizen.NUI.Components.FlexibleViewRecycler,System.Boolean)">
            <summary>
            Scroll horizontally by dy pixels in screen coordinates.
            </summary>
            <param name="dy">distance to scroll in pixels. Y increases as scroll position approaches the top.</param>
            <param name="recycler">Recycler to use for fetching potentially cached views for a position</param>
            <param name="immediate">Specify if the scroll need animation</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ScrollVerticallyBy(System.Single,Tizen.NUI.Components.FlexibleViewRecycler,System.Boolean)">
            <summary>
            Scroll vertically by dy pixels in screen coordinates.
            </summary>
            <param name="dy">distance to scroll in pixels. Y increases as scroll position approaches the top.</param>
            <param name="recycler">Recycler to use for fetching potentially cached views for a position</param>
            <param name="immediate">Specify if the scroll need animation</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ComputeScrollExtent">
            <summary>
            Compute the extent of the scrollbar's thumb within the range.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ComputeScrollOffset">
            <summary>
            Compute the offset of the scrollbar's thumb within the range.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ComputeScrollRange">
            <summary>
            Compute the range that the scrollbar represents.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ScrollToPosition(System.Int32)">
            <summary>
            Scroll the FlexibleView to make the position visible.
            </summary>
            <param name="position">Scroll to this adapter position</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ScrollToPositionWithOffset(System.Int32,System.Int32)">
            <summary>
            Scroll to the specified adapter position with the given offset from resolved layout start.
            </summary>
            <param name="position">Scroll to this adapter position</param>
            <param name="offset">The distance (in pixels) between the start edge of the item view and start edge of the FlexibleView.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.RelayoutRequest">
            <summary>
            Calls {@code FlexibleView#RelayoutRequest} on the underlying FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.LayoutChild(Tizen.NUI.Components.FlexibleViewViewHolder,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Lay out the given child view within the FlexibleView using coordinates that include view margins.
            </summary>
            <param name="child">Child to lay out</param>
            <param name="left">Left edge, with item view left margin included</param>
            <param name="top">Top edge, with item view top margin included</param>
            <param name="width">Width, with item view left and right margin included</param>
            <param name="height">Height, with item view top and bottom margin included</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ChangeFocus(System.Int32)">
            <summary>
            Change the FlexibleViewViewHolder with focusPosition to focus.
            </summary>
            <param name="focusPosition">the newly focus position</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.ChildCount">
            <summary>
            Return the current number of child views attached to the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.GetChildAt(System.Int32)">
            <summary>
            Return the child view at the given index.
            </summary>
            <param name="index">child index</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.FindItemViewByPosition(System.Int32)">
            <summary>
            Finds the view which represents the given adapter position.
            </summary>
            <param name="position">adapter position</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.OffsetChildrenHorizontal(System.Single,System.Boolean)">
            <summary>
            Offset all child views attached to the parent FlexibleView by dx pixels along the horizontal axis.
            </summary>
            <param name="dx">Pixels to offset by </param>
            <param name="immediate">specify if the offset need animation</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.OffsetChildrenVertical(System.Single,System.Boolean)">
            <summary>
            Offset all child views attached to the parent FlexibleView by dy pixels along the vertical axis.
            </summary>
            <param name="dy">Pixels to offset by </param>
            <param name="immediate">specify if the offset need animation</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.Width">
            <summary>
            Return the width of the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.Height">
            <summary>
            Return the height of the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.PaddingLeft">
            <summary>
            Return the left padding of the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.PaddingTop">
            <summary>
            Return the top padding of the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.PaddingRight">
            <summary>
            Return the right padding of the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewLayoutManager.PaddingBottom">
            <summary>
            Return the bottom padding of the parent FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.AddView(Tizen.NUI.Components.FlexibleViewViewHolder)">
            <summary>
            Add a view to the currently attached FlexibleView if needed.<br />
            FlexibleViewLayoutManagers should use this method to add views obtained from a FlexibleViewRecycler using getViewForPosition(int).<br />
            </summary>
            <param name="holder">view to add</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.AddView(Tizen.NUI.Components.FlexibleViewViewHolder,System.Int32)">
            <summary>
            Add a view to the currently attached FlexibleView if needed.<br />
            FlexibleViewLayoutManagers should use this method to add views obtained from a FlexibleViewRecycler using getViewForPosition(int).<br />
            </summary>
            <param name="holder">view to add</param>
            <param name="index">index to add child at</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.ScrapAttachedViews(Tizen.NUI.Components.FlexibleViewRecycler)">
            <summary>
            Temporarily detach and scrap all currently attached child views.
            Views will be scrapped into the given FlexibleViewRecycler.
            The FlexibleViewRecycler may prefer to reuse scrap views before other views that were previously recycled.
            </summary>
            <param name="recycler">Recycler to scrap views into</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.RemoveAndRecycleViewAt(System.Int32,Tizen.NUI.Components.FlexibleViewRecycler)">
             Remove a child view and recycle it using the given FlexibleViewRecycler.
            
             @param index Index of child to remove and recycle
             @param recycler FlexibleViewRecycler to use to recycle child
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.RecycleChildren(Tizen.NUI.Components.FlexibleViewRecycler,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Recycles children between given indices..
            </summary>
            <param name="recycler">Recycler to recycle views into</param>
            <param name="startIndex">inclusive</param>
            <param name="endIndex">exclusive</param>
            <param name="immediate">recycle immediately or add to pending list and recycle later.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.GetNextPosition(System.Int32,Tizen.NUI.Components.FlexibleViewLayoutManager.Direction)">
            <summary>
            Retrieves a position that neighbor to current position by direction.
            </summary>
            <param name="position">The anchor adapter position</param>
            <param name="direction">The direction.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.FindFirstVisibleItemView">
            <summary>
            Retrieves the first visible item view.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.FindLastVisibleItemView">
            <summary>
            Retrieves the last visible item view.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose FlexibleView and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewLayoutManager.GetRectOfVisibleChildScrollAmount(Tizen.NUI.Components.FlexibleView,Tizen.NUI.Components.FlexibleViewViewHolder)">
            Returns the scroll amount that brings the given rect in child's coordinate system within
            the padded area of FlexibleViewRecyclerView.
            @param parent The parent FlexibleViewRecyclerView.
            @param child The direct child making the request.
            @param rect The rectangle in the child's coordinates the child
                        wishes to be on the screen.
            @param immediate True to forbid animated or delayed scrolling,
                             false otherwise
            @return The array containing the scroll amount in x and y directions that brings the
            given rect into RV's padded area.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewRecycler">
            <summary>
            A FlexibleViewRecycler is responsible for managing scrapped or detached item views for reuse.
            A "scrapped" view is a view that is still attached to its parent FlexibleView but that has been marked for removal or reuse.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.#ctor(Tizen.NUI.Components.FlexibleView)">
            <summary>
            FlexibleViewRecycler constructor.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.SetViewCacheSize(System.Int32)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.GetViewForPosition(System.Int32)">
            <summary>
            Obtain a view initialized for the given position.
            </summary>
            <param name="position">Position to obtain a view for</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.RecycleView(Tizen.NUI.Components.FlexibleViewViewHolder)">
            <summary>
            Recycle a detached view.
            </summary>
            <param name="itemView">Removed holder for recycling</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.GetScrapCount">
            <summary>
            Returns the count in scrap list.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.GetScrapViewAt(System.Int32)">
            <summary>
            Gets the scrap view at index.
            </summary>
            <param name="index">index</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewRecycler.Clear">
            <summary>
            Clear scrap views out of this recycler. Detached views contained within a recycled view pool will remain.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.FlexibleViewViewHolder">
            <summary>
            A FlexibleViewViewHolder describes an item view and metadata about its place within the FlexibleView.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FlexibleViewViewHolder.#ctor(Tizen.NUI.BaseComponents.View)">
            <summary>
            FlexibleViewViewHolder constructor.
            </summary>
            <param name="itemView">View</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.ItemView">
            <summary>
            Returns the view.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.Left">
            <summary>
            Returns the left edge includes the view left margin.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.Right">
            <summary>
            Returns the right edge includes the view right margin.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.Top">
            <summary>
            Returns the top edge includes the view top margin.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.Bottom">
            <summary>
            Returns the bottom edge includes the view bottom margin.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.LayoutPosition">
            <summary>
            Returns the position of the FlexibleViewViewHolder in terms of the latest layout pass.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.AdapterPosition">
            <summary>
            Returns the FlexibleViewAdapter position of the item represented by this FlexibleViewViewHolder.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.OldPosition">
            <summary>
            Get old position of item view.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.FlexibleViewViewHolder.ItemViewType">
            <summary>
            Gets or sets item view type.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.GridLayoutManager">
            <summary>
            Layout collection of views in a grid.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.GridLayoutManager.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a GridLayoutManager with orientation. 
            </summary>
            <param name="spanCount">The number of columns or rows in the grid</param>
            <param name="orientation">Layout orientation.Should be HORIZONTAL or VERTICAL</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.GridLayoutManager.GetNextPosition(System.Int32,Tizen.NUI.Components.FlexibleViewLayoutManager.Direction)">
            <summary>
            Retrieves a position that neighbor to current position by direction. 
            </summary>
            <param name="position">The anchor adapter position</param>
            <param name="direction">The direction.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.LinearLayoutManager">
            <summary>
            Layout collection of views horizontally/vertically.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.LinearLayoutManager.HORIZONTAL">
            <summary>
            Constant value: 0.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.LinearLayoutManager.VERTICAL">
            <summary>
            Constant value: 1.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.LinearLayoutManager.NO_POSITION">
            <summary>
            Constant value: -1.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.LinearLayoutManager.INVALID_OFFSET">
            <summary>
            Constant value: -2^31.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.#ctor(System.Int32)">
            <summary>
            Creates a LinearLayoutManager with orientation.
            </summary>
            <param name="orientation">Layout orientation.Should be HORIZONTAL or VERTICAL</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.LinearLayoutManager.Orientation">
            <summary>
            Current orientation.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.LinearLayoutManager.FirstVisibleItemPosition">
            <summary>
            Retrieves the first visible item position.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.LinearLayoutManager.FirstCompleteVisibleItemPosition">
            <summary>
            Retrieves the first complete visible item position.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.LinearLayoutManager.LastVisibleItemPosition">
            <summary>
            Retrieves the last visible item position.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.LinearLayoutManager.LastCompleteVisibleItemPosition">
            <summary>
            Retrieves the last complete visible item position.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.CanScrollHorizontally">
            <summary>
            Query if horizontal scrolling is currently supported. The default implementation returns false.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.CanScrollVertically">
            <summary>
            Query if vertical scrolling is currently supported. The default implementation returns false.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.OnLayoutChildren(Tizen.NUI.Components.FlexibleViewRecycler)">
            <summary>
            Lay out all relevant child views from the given adapter.
            </summary>
            <param name="recycler">Recycler to use for fetching potentially cached views for a position</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ScrollHorizontallyBy(System.Single,Tizen.NUI.Components.FlexibleViewRecycler,System.Boolean)">
            <summary>
            Scroll horizontally by dy pixels in screen coordinates.
            </summary>
            <param name="dx">distance to scroll in pixels. Y increases as scroll position approaches the top.</param>
            <param name="recycler">Recycler to use for fetching potentially cached views for a position</param>
            <param name="immediate">Specify if the scroll need animation</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ScrollVerticallyBy(System.Single,Tizen.NUI.Components.FlexibleViewRecycler,System.Boolean)">
            <summary>
            Scroll vertically by dy pixels in screen coordinates.
            </summary>
            <param name="dy">distance to scroll in pixels. Y increases as scroll position approaches the top.</param>
            <param name="recycler">Recycler to use for fetching potentially cached views for a position</param>
            <param name="immediate">Specify if the scroll need animation</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ComputeScrollOffset">
            <summary>
            Compute the offset of the scrollbar's thumb within the range.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ComputeScrollExtent">
            <summary>
            Compute the extent of the scrollbar's thumb within the range.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ComputeScrollRange">
            <summary>
            Compute the range that the scrollbar represents.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ScrollToPosition(System.Int32)">
            <summary>
            Scroll the FlexibleView to make the position visible.
            </summary>
            <param name="position">Scroll to this adapter position</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.ScrollToPositionWithOffset(System.Int32,System.Int32)">
            <summary>
            Scroll to the specified adapter position with the given offset from resolved layout start.
            </summary>
            <param name="position">Scroll to this adapter position</param>
            <param name="offset">The distance (in pixels) between the start edge of the item view and start edge of the FlexibleView.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.OnLayoutCompleted">
            <summary>
            Called after a full layout calculation is finished.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.GetNextPosition(System.Int32,Tizen.NUI.Components.FlexibleViewLayoutManager.Direction)">
            <summary>
            Retrieves a position that neighbor to current position by direction.
            </summary>
            <param name="position">The anchor adapter position</param>
            <param name="direction">The direction.</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.FindFirstVisibleItemView">
            <summary>
            Retrieves the first visible item view.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayoutManager.FindLastVisibleItemView">
            <summary>
            Retrieves the last visible item view.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.ScrollBar">
            <summary>
            The ScrollBar class of nui component. It allows users to recognize the direction and the range of lists/content.
            </summary>
            <remarks>
            Please note that this class will be replaced with Scrollbar class in the near future.
            </remarks>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.DirectionProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.MaxValueProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.MinValueProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.CurrentValueProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.DurationProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.#ctor">
            <summary>
            The constructor of ScrollBar.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.#ctor(System.String)">
            <summary>
            The constructor of ScrollBar with specific style.
            </summary>
            <param name="style">style name</param>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.#ctor(Tizen.NUI.Components.ScrollBarStyle)">
            <summary>
            The constructor of ScrollBar with specific style.
            </summary>
            <param name="scrollBarStyle">The style object to initialize the ScrollBar.</param>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollBar.DirectionType">
            <summary>
            The direction type of the Scroll.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.DirectionType.Horizontal">
            <summary>
            The Horizontal type.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="F:Tizen.NUI.Components.ScrollBar.DirectionType.Vertical">
            <summary>
            The Vertical type.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.Direction">
            <summary>
            The property to get/set the direction of the ScrollBar.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.ThumbSize">
            <summary>
            The property to get/set the size of the thumb object.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throw when ThumbSize is null.</exception>
            <example>
            <code>
            ScrollBar scroll;
            try
            {
                scroll.ThumbSize = new Size(500, 10, 0);
            }
            catch(InvalidOperationException e)
            {
                Tizen.Log.Error(LogTag, "Failed to set ThumbSize value : " + e.Message);
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.TrackImageURL">
            <summary>
            The property to get/set the image URL of the track object.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.TrackColor">
            <summary>
            The property to get/set the color of the track object.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.ThumbColor">
            <summary>
            The property to get/set the color of the thumb object.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.MaxValue">
            <summary>
            The property to get/set the max value of the ScrollBar.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.MinValue">
            <summary>
            The property to get/set the min value of the ScrollBar.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.CurrentValue">
            <summary>
            The property to get/set the current value of the ScrollBar.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when Current value is less than Min value, or greater than Max value.</exception>
            <example>
            <code>
            ScrollBar scroll;
            scroll.MaxValue = 100;
            scroll.MinValue = 0;
            try
            {
                scroll.CurrentValue = 50;
            }
            catch(ArgumentOutOfRangeException e)
            {
                Tizen.Log.Error(LogTag, "Failed to set Current value : " + e.Message);
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBar.Duration">
            <summary>
            Property to set/get animation duration.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.SetCurrentValue(System.Int32,System.Boolean)">
            <summary>
            Method to set current value. The thumb object would move to the corresponding position with animation or not.
            </summary>
            <param name="currentValue">The special current value.</param>
            <param name="enableAnimation">Enable move with animation or not, the default value is true.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw when current size is less than the min value, or greater than the max value.</exception>
            <example>
            <code>
            ScrollBar scroll;
            scroll.MinValue = 0;
            scroll.MaxValue = 100;
            try
            {
                scroll.SetCurrentValue(50);
            }
            catch(ArgumentOutOfRangeException e)
            {
                Tizen.Log.Error(LogTag, "Failed to set current value : " + e.Message);
            }
            </code>
            </example>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose ScrollBar.
            </summary>
            <param name="type">The DisposeTypes value.</param>
            <since_tizen> 6 </since_tizen>
            This will be deprecated
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.CreateViewStyle">
            <summary>
            Get Scrollbar style.
            </summary>
            <returns>The default scrollbar style.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBar.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Loading">
            <summary>
            The Loading class of nui component. It's used to indicate informs users of the ongoing operation.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Loading.ImageListProperty">
            <summary>The ImageList bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Loading.SizeProperty">
            <summary>The Size bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Loading.FrameRateProperty">
            <summary>The FrameRate bindable property.</summary>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.#ctor">
            <summary>
            The constructor of Loading.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.#ctor(System.String)">
            <summary>
            Constructor of the Loading class with special style.
            </summary>
            <param name="style">The string to initialize the Loading.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.#ctor(Tizen.NUI.Components.LoadingStyle)">
            <summary>
            The constructor of the Loading class with specific style.
            </summary>
            <param name="loadingStyle">The style object to initialize the Loading.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Loading.Style">
            <summary>
            Return currently applied style.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Loading.ImageArray">
            <summary>
            Gets or sets loading image resource array.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Loading.ImageList">
            <summary>
            Gets loading image resource array.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Loading.Size">
            <summary>
            Gets or sets loading size.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Loading.FrameRate">
            <summary>
            Gets or sets frame rate of loading.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.CreateViewStyle">
            <summary>
            Get Loading style.
            </summary>
            <returns>The default loading style.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Loading.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Loading.Play">
            <summary>
            Play Loading Animation.
            </summary>
            This may be public opened in tizen_6.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Loading.Pause">
            <summary>
            Pause Loading Animation.
            </summary>
            This may be public opened in tizen_6.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Loading.Stop">
            <summary>
            Stop Loading Animation.
            </summary>
            This may be public opened in tizen_6.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Menu">
            <summary>
            Menu is a class which contains a set of MenuItems and has one of them selected.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Menu.#ctor">
            <summary>
            Creates a new instance of Menu.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Menu.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Menu.RelativePosition">
            <summary>The Menu's relative position to Anchor.</summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Menu.RelativePosition.Start">
             <summary>
             At the start of the Anchor.
             If this is used with <see cref="P:Tizen.NUI.Components.Menu.HorizontalPositionToAnchor"/>, then Menu is positioned to the left (LTR) of the Anchor or right (RTL) of the Anchor.
             If this is used with <see cref="P:Tizen.NUI.Components.Menu.VerticalPositionToAnchor"/>, then Menu is positioned to the top of the Anchor.
            </summary>
             <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Menu.RelativePosition.Center">
            <summary>
            At the center of the Anchor.
            If this is used with <see cref="P:Tizen.NUI.Components.Menu.HorizontalPositionToAnchor"/> or <see cref="P:Tizen.NUI.Components.Menu.VerticalPositionToAnchor"/>, then Menu is positioned to the middle of the Anchor.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Menu.RelativePosition.End">
            <summary>
            At the end of the Anchor.
            If this is used with <see cref="P:Tizen.NUI.Components.Menu.HorizontalPositionToAnchor"/>, then Menu is positioned to the right (LTR) of the Anchor or left (RTL) of the Anchor.
            If this is used with <see cref="P:Tizen.NUI.Components.Menu.VerticalPositionToAnchor"/>, then Menu is positioned to the bottom of the Anchor.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Menu.Items">
            <summary>
            Menu items in Menu.
            Menu items are not automatically disposed when Menu is disposed.
            Therefore, please dispose Menu items when you dispose Menu.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Menu.Anchor">
            <summary>
            Anchor of Menu.
            Menu is displayed at the anchor's position.
            If there is not enough space to display menu at the anchor's position,
            then menu is displayed at the proper position near anchor's position.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Menu.HorizontalPositionToAnchor">
            <summary>
            The horizontal position of Menu relative to Anchor.
            If Anchor is not set, then RelativePosition does not work.
            If RelativePosition is Start, then Menu is displayed at the start of Anchor.
            If RelativePosition is Center, then Menu is displayed at the center of Anchor.
            If RelativePosition is End, then Menu is displayed at the end of Anchor.
            If there is not enough space to display menu at the anchor's position,
            then menu is displayed at the proper position near anchor's position.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Menu.VerticalPositionToAnchor">
            <summary>
            The vertical position of Menu relative to Anchor.
            If Anchor is not set, then RelativePosition does not work.
            If RelativePosition is Start, then Menu is displayed at the start of Anchor.
            If RelativePosition is Center, then Menu is displayed at the center of Anchor.
            If RelativePosition is End, then Menu is displayed at the end of Anchor.
            If there is not enough space to display menu at the anchor's position,
            then menu is displayed at the proper position near anchor's position.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Menu.Content">
            <summary>
            Content of Menu.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Menu.Scrim">
            <summary>
            Scrim of Menu.
            Scrim is the screen region outside Menu.
            If Scrim is touched, then Menu is dismissed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Menu.Post(Tizen.NUI.Window)">
            <summary>
            Post the Menu.
            The Menu is displayed.
            </summary>
            <param name="window">The Window where Menu is displayed.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Menu.Dismiss">
            <summary>
            Dismiss the Menu.
            The Menu becomes hidden and disposed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Menu.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.MenuItem">
            <summary>
            MenuItem is a class which is used to show a list of items in Menu.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.#ctor">
            <summary>
            Creates a new instance of MenuItem.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.#ctor(System.String)">
            <summary>
            Creates a new instance of MenuItem.
            </summary>
            <param name="style">Creates MenuItem by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Applies style to MenuItem.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.OnKey(Tizen.NUI.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.HandleControlStateOnTouch(Tizen.NUI.Touch)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItem.LayoutItems">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.MenuItemGroup">
            <summary>
            MenuItemGroup class is used to group together a set of MenuItems.
            It enables a user to select exclusively single MenuItem of a group.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItemGroup.#ctor">
            <summary>
            Constructs MenuItemGroup
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItemGroup.Add(Tizen.NUI.Components.MenuItem)">
            <summary>
            Adds a menu item to the end of MenuItemGroup.
            </summary>
            <param name="menuItem">A menu item to be added to the group.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument menuItem is null.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.MenuItemGroup.Remove(Tizen.NUI.Components.MenuItem)">
            <summary>
            Removes a menu item from MenuItemGroup.
            </summary>
            <param name="menuItem">A menu item to be removed from the group.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument menuItem is null.</exception>
        </member>
        <member name="T:Tizen.NUI.Components.AppBar">
            <summary>
            The AppBar class is a class which shows title text and provides navigation
            and action functions on Page.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.#ctor">
            <summary>
            Creates a new instance of AppBar.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.#ctor(System.String)">
            <summary>
            Creates a new instance of AppBar.
            </summary>
            <param name="style">Creates AppBar by special style defined in UX.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.#ctor(Tizen.NUI.Components.AppBarStyle)">
            <summary>
            Creates a new instance of AppBar.
            </summary>
            <param name="appBarStyle">Creates AppBar by style customized by user.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Disposes AppBar and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.NavigationContent">
            <summary>
            Navigation content of AppBar.
            NavigationContent is added as a child of AppBar automatically.
            If AutoNavigationContent is set to be true and NavigationContent is not set,
            then default navigation content is automatically displayed.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.Title">
            <summary>
            Title text of AppBar.
            Title sets title text to the default title content.
            If TitleContent is not TextLabel, then Title does not set title text of the TitleContent.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.TitleContent">
            <summary>
            Title content of AppBar.
            TitleContent is added as a child of AppBar automatically.
            If TitleContent is not TextLabel, then Title does not set title text of the TitleContent.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.Actions">
            <summary>
            Action views of AppBar.
            Action views are added to ActionContent of AppBar.
            If action views and action buttons are set to Actions, then proper style look for action views and action buttons are automatically applied to action views and action buttons.
            e.g. size, button icon color, etc.
            If you do not want to apply framework's style look for action views and action buttons, then please use ActionContent.Add(actionView) instead of setting Actions.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.ActionContent">
            <summary>
            Action content of AppBar.
            ActionContent is added as a child of AppBar automatically.
            Action content contains action views and action buttons by Actions.
            The Action and ActionButton styles of AppBarStyle are applied to actions only by setting Actions.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.AutoNavigationContent">
            <summary>
            Flag to indicate if default navigation content is automatically set or not.
            The default value is true.
            If AutoNavigationContent is set to be true and NavigationContent is not set,
            then default navigation content is automatically displayed.
            If default navigation content is clicked, it calls navigator pop operation.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.DefaultNavigationContent">
            <summary>
            Default navigation content of AppBar set automatically by default.
            If AutoNavigationContent is set to be true and NavigationContent is not set,
            then default navigation content is automatically displayed.
            If default navigation content is clicked, it calls navigator pop operation.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.DefaultTitleContent">
            <summary>
            Default title content of AppBar set automatically by default.
            If TitleContent is not set by user, then default title content is
            automatically displayed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AppBar.DefaultActionContent">
            <summary>
            Default action content of AppBar set automatically by default.
            If ActionContent is not set by user, then default action content is
            automatically displayed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Applies style to AppBar.
            </summary>
            <param name="viewStyle">The style to apply.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBar.CreateViewStyle">
            <summary>
            Gets AppBar style.
            </summary>
            <returns>The default AppBar style.</returns>
        </member>
        <member name="T:Tizen.NUI.Components.ContentPage">
            <summary>
            The ContentPage class is a class which is a formatted full screen page.
            ContentPage contains title app bar and content.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ContentPage.#ctor">
            <summary>
            Creates a new instance of a ContentPage.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ContentPage.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose ContentPage and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="P:Tizen.NUI.Components.ContentPage.AppBar">
            <summary>
            AppBar of ContentPage.
            AppBar is added as a child of ContentPage automatically.
            AppBar is positioned at the top of the Page.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ContentPage.Content">
            <summary>
            Content of ContentPage.
            Content is added as a child of ContentPage automatically.
            Content is positioned below AppBar.
            Content is resized to fill the full screen except AppBar.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ContentPage.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.DialogPage">
            <summary>
            The DialogPage class is a class which shows a dialog on the page.
            DialogPage contains dialog and dimmed scrim behind the dialog.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.DialogPage.#ctor">
            <summary>
            Creates a new instance of a DialogPage.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.DialogPage.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose DialogPage and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DialogPage.Content">
            <summary>
            Content of DialogPage.
            Content is used as dialog, so Content is displayed above the dimmed scrim.
            Content is added as a child of DialogPage automatically.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.DialogPage.Scrim">
            <summary>
            Scrim of DialogPage.
            Scrim is the dimmed screen region behind dialog.
            Scrim is added as a child of DialogPage automatically.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.DialogPage.EnableScrim">
            <summary>
            Indicates to show scrim behind dialog.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.DialogPage.EnableDismissOnScrim">
            <summary>
            Indicates to dismiss dialog by touching on scrim.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.DialogPage.ScrimColor">
            <summary>
            The color of scrim.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.DialogPage.ShowDialog(Tizen.NUI.BaseComponents.View)">
            <summary>
            Shows a dialog by pushing a dialog page containing dialog to default navigator.
            </summary>
            <param name="content">The content of Dialog.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.DialogPage.ShowAlertDialog(System.String,System.String,Tizen.NUI.BaseComponents.View[])">
            <summary>
            Shows an alert dialog by pushing a page containing the alert dialog
            to default navigator.
            </summary>
            <param name="title">The title of AlertDialog.</param>
            <param name="message">The message of AlertDialog.</param>
            <param name="actions">The action views of AlertDialog.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Navigator">
             <summary>
             The Navigator is a class which navigates pages with stack methods such as Push and Pop.
             </summary>
             <remarks>
             With Transition class, Navigator supports smooth transition of View pair between two Pages
             by using <see cref="M:Tizen.NUI.Components.Navigator.PushWithTransition(Tizen.NUI.Components.Page)"/> and <see cref="M:Tizen.NUI.Components.Navigator.PopWithTransition"/> methods.
             If current top Page and next top Page have <see cref="T:Tizen.NUI.BaseComponents.View"/>s those have same TransitionTag,
             Navigator creates smooth transition motion for them.
             Navigator.Transition property can be used to set properties of the Transition such as TimePeriod and AlphaFunction.
             When all transitions are finished, Navigator calls a callback methods those connected on the "TransitionFinished" event.
             </remarks>
             <example>
             <code>
             Navigator navigator = new Navigator()
             {
                 TimePeriod = new TimePeriod(500),
                 AlphaFunction = new AlphaFunction(AlphaFunction.BuiltinFunctions.EaseInOutSine)
             };
            
             View view = new View()
             {
                 TransitionOptions = new TransitionOptions()
                 {
                     /* Set properties for the transition of this View */
                 }
             };
            
             ContentPage newPage = new ContentPage()
             {
                 Content = view,
             };
            
             Navigator.PushWithTransition(newPage);
             </code>
             </example>
             <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.#ctor">
            <summary>
            Creates a new instance of a Navigator.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Navigator.TransitionFinished">
            <summary>
            An event fired when Transition has been finished.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Navigator.PageCount">
            <summary>
            Returns the count of pages in Navigator.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Navigator.Transition">
            <summary>
            Transition properties for the transition of View pair having same transition tag.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.PushWithTransition(Tizen.NUI.Components.Page)">
            <summary>
            Pushes a page to Navigator.
            If the page is already in Navigator, then it is not pushed.
            </summary>
            <param name="page">The page to push to Navigator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument page is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.PopWithTransition">
            <summary>
            Pops the top page from Navigator.
            </summary>
            <returns>The popped page.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when there is no page in Navigator.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.Push(Tizen.NUI.Components.Page)">
            <summary>
            Pushes a page to Navigator.
            If the page is already in Navigator, then it is not pushed.
            </summary>
            <param name="page">The page to push to Navigator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument page is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.Pop">
            <summary>
            Pops the top page from Navigator.
            </summary>
            <returns>The popped page.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when there is no page in Navigator.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.GetPage(System.Int32)">
            <summary>
            Returns the page of the given index in Navigator.
            The indices of pages in Navigator are basically the order of pushing or inserting to Navigator.
            So a page's index in Navigator can be changed whenever push/insert or pop/remove occurs.
            </summary>
            <param name="index">The index of a page in Navigator.</param>
            <returns>The page of the given index in Navigator.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the argument index is less than 0, or greater than the number of pages.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.IndexOf(Tizen.NUI.Components.Page)">
            <summary>
            Returns the current index of the given page in Navigator.
            The indices of pages in Navigator are basically the order of pushing or inserting to Navigator.
            So a page's index in Navigator can be changed whenever push/insert or pop/remove occurs.
            </summary>
            <param name="page">The page in Navigator.</param>
            <returns>The index of the given page in Navigator. If the given page is not in the Navigator, then -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument page is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.Insert(System.Int32,Tizen.NUI.Components.Page)">
            <summary>
            Inserts a page at the specified index of Navigator.
            The indices of pages in Navigator are basically the order of pushing or inserting to Navigator.
            So a page's index in Navigator can be changed whenever push/insert or pop/remove occurs.
            To find the current index of a page in Navigator, please use IndexOf(page).
            If the page is already in Navigator, then it is not inserted.
            </summary>
            <param name="index">The index of a page in Navigator where the page will be inserted.</param>
            <param name="page">The page to insert to Navigator.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the argument index is less than 0, or greater than the number of pages.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument page is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.InsertBefore(Tizen.NUI.Components.Page,Tizen.NUI.Components.Page)">
            <summary>
            Inserts a page to Navigator before an existing page.
            If the page is already in Navigator, then it is not inserted.
            </summary>
            <param name="before">The existing page, before which a page will be inserted.</param>
            <param name="page">The page to insert to Navigator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument before is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument page is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the argument before does not exist in Navigator.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.Remove(Tizen.NUI.Components.Page)">
            <summary>
            Removes a page from Navigator.
            </summary>
            <param name="page">The page to remove from Navigator.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument page is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.RemoveAt(System.Int32)">
            <summary>
            Removes a page at the specified index of Navigator.
            The indices of pages in Navigator are basically the order of pushing or inserting to Navigator.
            So a page's index in Navigator can be changed whenever push/insert or pop/remove occurs.
            To find the current index of a page in Navigator, please use IndexOf(page).
            </summary>
            <param name="index">The index of a page in Navigator where the page will be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0, or greater than or equal to the number of pages.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.Peek">
            <summary>
            Returns the page at the top of Navigator.
            </summary>
            <returns>The page at the top of Navigator.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Disposes Navigator and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.GetDefaultNavigator(Tizen.NUI.Window)">
            <summary>
            Returns the default navigator of the given window.
            </summary>
            <returns>The default navigator of the given window.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument window is null.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.CreateTransition(Tizen.NUI.Components.Page,Tizen.NUI.Components.Page,System.Boolean)">
            <summary>
            Create Transition between currentTopPage and newTopPage
            </summary>
            <param name="currentTopPage">The top page of Navigator.</param>
            <param name="newTopPage">The new top page after transition.</param>
            <param name="pushTransition">True if this transition is for push new page</param>
        </member>
        <member name="M:Tizen.NUI.Components.Navigator.RetrieveTaggedViews(System.Collections.Generic.List{Tizen.NUI.BaseComponents.View},Tizen.NUI.BaseComponents.View,System.Boolean)">
            <summary>
            Retrieve Tagged Views in the view tree.
            </summary>
            <param name="taggedViews">Returned tagged view list..</param>
            <param name="view">Root View to get tagged child View.</param>
            <param name="isPage">Flag to check current View is page or not</param>
        </member>
        <member name="T:Tizen.NUI.Components.PageAppearingEventArgs">
            <summary>
            PageAppearingEventArgs is a class to record page appearing event arguments which will be sent to user.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.PageDisappearingEventArgs">
            <summary>
            PageDisappearingEventArgs is a class to record page disappearing event arguments which will be sent to user.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.PageAppearedEventArgs">
            <summary>
            PageAppearedEventArgs is a class to record page appeared event arguments which will be sent to user.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.PageDisappearedEventArgs">
            <summary>
            PageDisappearedEventArgs is a class to record page disappeared event arguments which will be sent to user.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Page">
            <summary>
            The Page class is a class which is an element of navigation.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Page.#ctor">
            <summary>
            Creates a new instance of a Page.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Page.Navigator">
            <summary>
            Navigator which has pushed the Page into its stack.
            If this Page has not been pushed into any Navigator, then Navigator is null.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Page.AppearingTransition">
            <summary>
            Transition properties for the transition of Views in this page during this page is pushed to Navigator.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Page.DisappearingTransition">
            <summary>
            Transition properties for the transition of Views in this page during this page is popped from Navigator.
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.Page.Appearing">
            <summary>
            An event for the page appearing signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.Page.Disappearing">
            <summary>
            An event for the page disappearing signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.Page.Appeared">
            <summary>
            An event for the page appeared signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.Page.Disappeared">
            <summary>
            An event for the page disappeared signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Notification">
            <summary>
            Notification helps to raise a notification window with a content View.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Notification.ToastTop">
            <summary>
            Toast will appear at the top of the screen.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Notification.ToastCenter">
            <summary>
            Toast will appear at the center of the screen.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Notification.ToastBottom">
            <summary>
            Toast will appear at the bottom of the screen.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Notification.ToastShort">
            <summary>
            Show the notification for a short period of time.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Notification.ToastLong">
            <summary>
            Show the notification for a long period of time.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.#ctor(Tizen.NUI.BaseComponents.View)">
            <summary>
            Create a notification with a content View.
            </summary>
            <param name="contentView">The content view instance to display in the notification window.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the device does not support a notification feature.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when a given contentView is null.</exception>
            <remark>Since the notification creates a new window, the system should support a multi-window feature. Otherwise it will throw a NotSupportedException.</remark>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Notification.ContentView">
            <summary>
            The content view received in a constructor.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.MakeToast(System.String,Tizen.NUI.Position)">
            <summary>
            Create a simple text notification called toast.
            </summary>
            <param name="text">The string content.</param>
            <param name="gravity">The location at which the toast should appear. It's one of the notification constants: ToastTop, ToastCenter and ToastBottom.</param>
            <returns>The created Notification instance.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the device does not support a notification feature.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the given text or gravity is null.</exception>
            <remark>Application need to set http://tizen.org/privilege/window.priority.set to post a notification.</remark>
            <remark>Since the notification creates a new window, the system should support a multi-window feature. Otherwise it will throw a NotSupportedException.</remark>
            <example>
            The following example demonstrates how to make a toast at the bottom and show it for a short period time.
            <code>
            Notification.MakeToast("Hello World!", Notification.ToastBottom).Post(Notification.ToastShort);
            </code>
            </example>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.Post(System.UInt32)">
            <summary>
            Post a notification window with the content view.
            </summary>
            <param name="duration">Dismiss the notification window after given time in millisecond. The value 0 won't dismiss the notification.</param>
            <returns>The current Notification instance.</returns>
            <privilege>http://tizen.org/privilege/window.priority.set</privilege>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have proper privilege.</exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.SetLevel(Tizen.NUI.NotificationLevel)">
            <summary>
            Sets a priority level for the specified notification window.
            The default level is NotificationLevel.Base.
            </summary>
            <param name="level">The notification window level.</param>
            <returns>The current Notification instance.</returns>
            <privilege>http://tizen.org/privilege/window.priority.set</privilege>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when the application does not have proper privilege.</exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.SetPositionSize(Tizen.NUI.Rectangle)">
            <summary>
            Sets position and size of the notification window.
            </summary>
            <param name="positionSize">The position and size information in rectangle.</param>
            <returns>The current Notification instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a given positionSize is invalid.</exception>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.SetDismissOnTouch(System.Boolean)">
            <summary>
            Sets whether listen to touch event to dismiss notification window.
            </summary>
            <param name="dismissOnTouch">Dismiss notification window on touch if the value is true.</param>
            <returns>The current Notification instance.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.SetAnimationOnPost(Tizen.NUI.Animation)">
            <summary>
            Sets a user-defined animation to play when posting the notification.
            The Notification will play the given animation right after the notification window pops up.
            </summary>
            <param name="animation">The animation to play.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.SetAnimationOnDismiss(Tizen.NUI.Animation)">
            <summary>
            Sets a user-defined animation to play when dismiss the notification.
            On dismiss, the given animation is played, and after the playback is completed the notification window is undisplayed.
            </summary>
            <param name="animation">The animation to play.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.Dismiss">
            <summary>
            Dismiss the notification window.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.ForceQuit">
            <summary>
            Dismiss the notification window directly without waiting the onDismissAnimation finished.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Notification.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Pagination">
            <summary>
            Pagination shows the number of pages available and the currently active page.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Pagination.IndicatorSizeProperty">
            <summary>The IndicatorSize bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Pagination.IndicatorImageUrlProperty">
            <summary>The IndicatorImageUrlSelector bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Pagination.IndicatorSpacingProperty">
            <summary>The IndicatorSpacing bindable property.</summary>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.#ctor">
            <summary>
            Creates a new instance of a Pagination.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.#ctor(System.String)">
            <summary>
            Creates a new instance of a Pagination using style.
            </summary>
            <param name="style">The string to initialize the Pagination</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.#ctor(Tizen.NUI.Components.PaginationStyle)">
            <summary>
            Creates a new instance of a Pagination using style.
            </summary>
            <param name="paginationStyle">The style object to initialize the Pagination</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.Style">
            <summary>
            Return currently applied style.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.IndicatorSize">
            <summary>
            Gets or sets the size of the indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.IndicatorImageUrl">
            <summary>
            Gets or sets the background resource of indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.LastIndicatorImageUrl">
            <summary>
            This is experimental API.
            Make the last indicator has exceptional image, not common image in the Pagination.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.IndicatorSpacing">
            <summary>
            Gets or sets the space of the indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.IndicatorCount">
            <summary>
            Gets or sets the count of the pages/indicators.
            </summary>
            <since_tizen> 8 </since_tizen>
            <exception cref="T:System.ArgumentException">Thrown when the given value is negative.</exception>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.IndicatorColor">
            <summary>
            Color of the indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.SelectedIndicatorColor">
            <summary>
            Color of the selected indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Pagination.SelectedIndex">
            <summary>
            Gets or sets the index of the select indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.GetIndicatorPosition(System.Int32)">
            <summary>
            Retrieves the position of a indicator by index.
            </summary>
            <param name="index">Indicator index</param>
            <returns>The position of a indicator by index.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.AccessibilityGetMinimum">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.AccessibilityGetCurrent">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.AccessibilityGetMaximum">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.AccessibilitySetCurrent(System.Double)">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.AccessibilityGetMinimumIncrement">
            <summary>
            Minimum increment.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.SelectOut(Tizen.NUI.VisualMap)">
            <summary>
            You can override it to do your select out operation.
            </summary>
            <param name="selectOutIndicator">The indicator will be selected out</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.SelectIn(Tizen.NUI.VisualMap)">
            <summary>
            You can override it to do your select in operation.
            </summary>
            <param name="selectInIndicator">The indicator will be selected in</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.CreateViewStyle">
            <summary>
            you can override it to create your own default style.
            </summary>
            <returns>The default pagination style.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Pagination.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.ValueChangedEventArgs">
            <summary>
            ValueChangedEventArgs is a class to notify changed Picker value argument which will sent to user.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ValueChangedEventArgs.#ctor(System.Int32)">
            <summary>
            ValueChangedEventArgs default constructor.
            <param name="value">value of Picker.</param>
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ValueChangedEventArgs.Value">
            <summary>
            ValueChangedEventArgs default constructor.
            <returns>The current value of Picker.</returns>
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Picker">
            <summary>
            Picker is a class which provides a function that allows the user to select 
            a value through a scrolling motion by expressing the specified value as a list.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.#ctor">
            <summary>
            Creates a new instance of Picker.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.#ctor(System.String)">
            <summary>
            Creates a new instance of Picker.
            </summary>
            <param name="style">Creates Picker by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.#ctor(Tizen.NUI.Components.PickerStyle)">
            <summary>
            Creates a new instance of Picker.
            </summary>
            <param name="pickerStyle">Creates Picker by style customized by user.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Picker and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="E:Tizen.NUI.Components.Picker.ValueChanged">
            <summary>
            An event emitted when Picker value changed, user can subscribe or unsubscribe to this event handler.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Picker.DisplayedValues">
            <summary>
            The values to be displayed instead of numbers.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Picker.CurrentValue">
            <summary>
            The Current value of Picker.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Picker.MaxValue">
            <summary>
            The max value of Picker.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Picker.MinValue">
            <summary>
            The min value of Picker.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Applies style to Picker.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Picker.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Popup">
            <summary>
            Popup is one kind of common component, it can be used as popup window.
            User can handle Popup button count, head title and content area.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonHeightProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonTextPointSizeProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonFontFamilyProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonTextColorProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonOverLayBackgroundColorSelectorProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonTextAlignmentProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonBackgroundProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonBackgroundBorderProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonImageShadowProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.#ctor">
            <summary>
            Creates a new instance of a Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.#ctor(System.String)">
            <summary>
            Creates a new instance of a Popup with style.
            </summary>
            <param name="style">Create Popup by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.#ctor(Tizen.NUI.Components.PopupStyle)">
            <summary>
            Creates a new instance of a Popup with style.
            </summary>
            <param name="popupStyle">Create Popup by style customized by user.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.Post(Tizen.NUI.Window)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.Dismiss">
            <summary>
            Dismiss the dialog
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.AddButton(System.String)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.AddButton(System.String,System.String)">
            <summary>
            Add button by style's name.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.AddButton(System.String,Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Add button by style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.GetButton(System.Int32)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.RemoveButton(System.Int32)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.AddContentText(Tizen.NUI.BaseComponents.View)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="E:Tizen.NUI.Components.Popup.PopupButtonClickEvent">
            <summary>
            An event for the button clicked signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.Title">
            <summary>
            Popup Title.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.TitleText">
            <summary>
            Title text string in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.TitlePointSize">
            <summary>
            Title text point size in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.TitleTextColor">
            <summary>
            Title text color in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.TitleTextHorizontalAlignment">
            <summary>
            Title text horizontal alignment in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.TitleTextPosition">
            <summary>
            Title text's position in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.TitleHeight">
            <summary>
            Title text's height in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ContentView">
            <summary>
            Content view in Popup, only can be gotten.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonCount">
            <summary>
            Button count in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonHeight">
            <summary>
            Button height in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonTextPointSize">
            <summary>
            Button text point size in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonFontFamily">
            <summary>
            Button text font family in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonTextColor">
            <summary>
            Button text color in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonOverLayBackgroundColorSelector">
            <summary>
            Button overlay background color selector in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonTextAlignment">
            <summary>
            Button text horizontal alignment in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonBackground">
            <summary>
            Button background image's resource url in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonBackgroundBorder">
            <summary>
            Button background image's border in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Popup.ButtonImageShadow">
            <summary>
            Button's image shadow in Popup.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.SetButtonText(System.Int32,System.String)">
            <summary>
            Set button text by index.
            </summary>
            <param name="index">Button index.</param>
            <param name="text">Button text string.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Popup and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.OnFocusGained">
            <summary>
            Focus gained callback.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.OnFocusLost">
            <summary>
            Focus lost callback.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Popup.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to popup.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.CreateViewStyle">
            <summary>
            Get Popup style.
            </summary>
            <returns>The default popup style.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.OnUpdate">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Popup.AccessibilityCalculateStates">
            <summary>
            Informs AT-SPI bridge about the set of AT-SPI states associated with this object.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Popup.ButtonClickEventArgs">
            <summary>
            ButtonClickEventArgs is a class to record button click event arguments which will sent to user.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Popup.ButtonClickEventArgs.ButtonIndex">
            <summary> Button index which is clicked in Popup </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="T:Tizen.NUI.Components.Progress">
            <summary>
            The Progress class is used to show the ongoing status with a long narrow bar.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.MaxValueProperty">
            <summary>
            MaxValueProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.MinValueProperty">
            <summary>
            MinValueProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.CurrentValueProperty">
            <summary>
            CurrentValueProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.BufferValueProperty">
            <summary>
            BufferValueProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.ProgressStateProperty">
            <summary>
            ProgressStateProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.state">
            This needs to be considered more if public-open is necessary.
        </member>
        <member name="M:Tizen.NUI.Components.Progress.#ctor">
            <summary>
            The constructor of Progress
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.#ctor(System.String)">
            <summary>
            The constructor of the Progress class with specific style.
            </summary>
            <param name="style">style name</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.#ctor(Tizen.NUI.Components.ProgressStyle)">
            <summary>
            The constructor of the Progress class with specific style.
            </summary>
            <param name="progressStyle">The style object to initialize the Progress.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.AccessibilityShouldReportZeroChildren">
            <summary>
            Prevents from showing child widgets in AT-SPI tree.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.AccessibilityGetMinimum">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.AccessibilityGetCurrent">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.AccessibilityGetMaximum">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.Progress.ProgressStatusType">
            <summary>
            The status type of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.ProgressStatusType.Buffering">
            <summary>
            Show BufferImage
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.ProgressStatusType.Determinate">
            <summary>
            Show ProgressImage and BufferImage
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Progress.ProgressStatusType.Indeterminate">
            <summary>
            Show TrackImage
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.Style">
            <summary>
            Return currently applied style.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.TrackImageURL">
            <summary>
            The property to get/set Track image object URL of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.ProgressImageURL">
            <summary>
            The property to get/set Progress object image URL of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.BufferImageURL">
            <summary>
            The property to get/set Buffer object image resource URL of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.IndeterminateImageUrl">
            <summary>
            The property to get/set the indeterminate image.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.TrackColor">
            <summary>
            The property to get/set Track object color of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.ProgressColor">
            <summary>
            The property to get/set Progress object color of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.BufferColor">
            <summary>
            The property to get/set Buffer object color of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.MaxValue">
            <summary>
            The property to get/set the maximum value of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.MinValue">
            <summary>
            The property to get/set the minim value of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.CurrentValue">
            <summary>
            The property to get/set the current value of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.BufferValue">
            <summary>
            The property to get/set the buffer value of the Progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Progress.ProgressState">
            <summary>
            Gets or sets state of progress.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Progress and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.UpdateStates">
            <summary>
            Change Image status. It can be override.
            </summary>
            This needs to be considered more if public-open is necessary.
        </member>
        <member name="M:Tizen.NUI.Components.Progress.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.UpdateValue">
            <summary>
            Update progress value
            </summary>
            This needs to be considered more if public-open is necessary.
        </member>
        <member name="M:Tizen.NUI.Components.Progress.UpdateIndeterminateAnimation">
            <summary>
            Update Animation for Indeterminate mode.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Progress.CreateViewStyle">
            <summary>
            Get Progress style.
            </summary>
            <returns>The default progress style.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Progress.ChangeImageState(Tizen.NUI.Components.Progress.ProgressStatusType)">
            <summary>
            Change Image status
            </summary>
            <since_tizen> 6 </since_tizen>
            <param name="statusType">New status type</param>
        </member>
        <member name="T:Tizen.NUI.Components.RadioButton">
            <summary>
            RadioButton is the Class that describe the control which can be checked, but not cleared by a user.
            </summary>
            <code>
            RadioButton radio = new RadioButton("C_RadioButton_WhiteText");
            radio.Size = new Size(200, 64, 0);
            radio.Position = new Position(500, posY, 0);
            radio.Text = "RadioButton";
            radio.Focusable = true;
            </code>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.#ctor">
            <summary>
            Creates a new instance of a RadioButton.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.#ctor(System.String)">
            <summary>
            Creates a new instance of a RadioButton with style.
            </summary>
            <param name="style"></param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.#ctor(Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Creates a new instance of a RadioButton with style.
            </summary>
            <param name="buttonStyle"></param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RadioButton.ItemGroup">
            <summary>
            Get RadioButtonGroup to which this selections belong.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.OnKey(Tizen.NUI.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.HandleControlStateOnTouch(Tizen.NUI.Touch)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButton.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.RadioButtonGroup">
            <summary>
            The RadioButtonGroup class is used to group together a set of RadioButton control
            It enables the user to select exclusively single radio button of group.
            </summary>
            <code>
            RadioButtonGroup radioGroup = new RadioButtonGroup();
            RadioButton radio1 = new RadioButton();
            RadioButton radio2 = new RadioButton();
            radioGroup.Add(radio1);
            radioGroup.Add(radio2);
            </code>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.RadioButtonGroup.IsGroupHolderProperty">
            <summary>
            IsGroupHolderProperty
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.#ctor">
            <summary>
            Construct RadioButtonGroup
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.GetIsGroupHolder(Tizen.NUI.BaseComponents.View)">
            <summary>
            Gets a RadioButtonGroup.IsGroupHolder property of a view.
            </summary>
            <param name="view">The group holder.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.SetIsGroupHolder(Tizen.NUI.BaseComponents.View,System.Boolean)">
            <summary>
            Sets a RadioButtonGroup.IsGroupHolder property for a view.
            </summary>
            <param name="view">The group holder.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.GetRadioButtonGroup(Tizen.NUI.BaseComponents.View)">
            <summary>
            Gets a attached RadioButtonGroup for a view.
            </summary>
            <param name="view">The group holder.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.GetItem(System.Int32)">
            <summary>
            Get the RadioButton object at the specified index.
            </summary>
            <param name="index">item index</param>
            <returns>RadioButton</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.GetSelectedItem">
            <summary>
            Get the RadioButton object at the currently selected. If no item selected, returns null.
            </summary>
            <returns>Currently selected radio button</returns>
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.Add(Tizen.NUI.Components.RadioButton)">
            <summary>
            Add RadioButton to the end of RadioButtonGroup.
            </summary>
            <param name="radio">The RadioButton to be added to the RadioButtonGroup</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.RadioButtonGroup.Remove(Tizen.NUI.Components.RadioButton)">
            <summary>
            Remove RadioButton from the RadioButtonGroup.
            </summary>
            <param name="radio">The RadioButton to remove from the RadioButtonGroup</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.CollectionView">
            <summary>
            Selectable RecyclerView that presenting a collection of items with variable layouters.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.SelectedItemProperty">
            <summary>
            Binding Property of selected item in single selection.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.SelectedItemsProperty">
            <summary>
            Binding Property of selected items list in multiple selection.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.SelectionModeProperty">
            <summary>
            Binding Property of selected items list in multiple selection.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.ItemsSourceProperty">
            <summary>
            Binding Property of items data source.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.#ctor">
            <summary>
            Base constructor.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Base constructor with ItemsSource
            </summary>
            <param name="itemsSource">item's data source</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.#ctor(System.Collections.IEnumerable,Tizen.NUI.Components.ItemsLayouter,Tizen.NUI.Binding.DataTemplate)">
            <summary>
            Base constructor with ItemsSource, ItemsLayouter and ItemTemplate
            </summary>
            <param name="itemsSource">item's data source</param>
            <param name="layouter">item's layout manager</param>
            <param name="template">item's view template with data bindings</param>
        </member>
        <member name="E:Tizen.NUI.Components.CollectionView.SelectionChanged">
            <summary>
            Event of Selection changed.
            previous selection list and current selection will be provided.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.CollectionView.ItemScrollTo">
            <summary>
            Align item in the viewport when ScrollTo() calls.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.ItemScrollTo.Nearest">
            <summary>
            Scroll to show item in nearest viewport on scroll direction.
            item is above the scroll viewport, item will be came into front,
            item is under the scroll viewport, item will be came into end,
            item is in the scroll viewport, no scroll.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.ItemScrollTo.Start">
            <summary>
            Scroll to show item in start of the viewport.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.ItemScrollTo.Center">
            <summary>
            Scroll to show item in center of the viewport.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.CollectionView.ItemScrollTo.End">
            <summary>
            Scroll to show item in end of the viewport.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.ItemsSource">
            <summary>
            Item's source data in IEnumerable.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.ItemTemplate">
            <summary>
            DataTemplate for items.
            Create visual contents and binding properties.
            return object type is restricted RecyclerViewItem.
            <seealso cref="T:Tizen.NUI.Binding.DataTemplate" />
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.ItemsLayouter">
            <summary>
            Items Layouter.
            Layouting items on the scroll ContentContainer.
            <seealso cref="P:Tizen.NUI.Components.CollectionView.ItemsLayouter" />
            <seealso cref="T:Tizen.NUI.Components.LinearLayouter" />
            <seealso cref="T:Tizen.NUI.Components.GridLayouter" />
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.ScrollingDirection">
            <summary>
            Scrolling direction to display items layout.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.SelectedItem">
            <summary>
            Selected item in single selection.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.SelectedItems">
            <summary>
            Selected items list in multiple selection.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.SelectionMode">
            <summary>
            Selection mode to handle items selection. See ItemSelectionMode for details.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.SelectionChangedCommand">
            <summary>
            Command of selection changed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.SelectionChangedCommandParameter">
            <summary>
            Command parameter of selection changed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.Header">
            <summary>
            Header item placed in top-most position.
            </summary>
            <remarks>Please note that, internal index will be increased by header.</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.Footer">
            <summary>
            Footer item placed in bottom-most position.
            </summary>
            <remarks>Please note that, internal index will be increased by footer.</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.IsGrouped">
            <summary>
            Enable groupable view.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.GroupHeaderTemplate">
            <summary>
             DataTemplate of group header.
            </summary>
            <remarks>Please note that, internal index will be increased by group header.
            GroupHeaderTemplate is essential for groupable view.</remarks>        
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.GroupFooterTemplate">
            <summary>
            DataTemplate of group footer. Group feature is not supported yet.
            </summary>
            <remarks>Please note that, internal index will be increased by group footer.</remarks>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.InternalItemSource">
            <summary>
            Internal encapsulated items data source.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.CollectionView.SizingStrategy">
            <summary>
            Size strategy of measuring scroll content. see details in ItemSizingStrategy.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.NotifyDataSetChanged">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.GetNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.UpdateSelectedItems(System.Collections.Generic.IList{System.Object})">
            <summary>
            Update selected items list in multiple selection.
            </summary>
            <param name="newSelection">updated selection list by user</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.ScrollTo(System.Single,System.Boolean)">
            <summary>
            Scroll to specific position with or without animation.
            </summary>
            <param name="position">Destination.</param>
            <param name="animate">Scroll with or without animation</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.ScrollToIndex(System.Int32)">
            <summary>
            Scrolls to the item at the specified index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.ScrollTo(System.Int32,System.Boolean,Tizen.NUI.Components.CollectionView.ItemScrollTo)">
            <summary>
            Scroll to specific item's aligned position with or without animation.
            </summary>
            <param name="index">Target item index of dataset.</param>
            <param name="animate">Boolean flag of animation.</param>
            <param name="align">Align state of item. See details in <see cref="T:Tizen.NUI.Components.CollectionView.ItemScrollTo"/>.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to CollectionView
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.AccessibilityScrollToChild(Tizen.NUI.BaseComponents.View)">
            <summary>
            Scroll to specified item
            </summary>
            <remarks>
            Make sure that the item that is about to receive the accessibility highlight is visible.
            </remarks>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.OnSelectionChanged(Tizen.NUI.Components.SelectionChangedEventArgs)">
            <summary>
            Internal selection callback.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.AdjustTargetPositionOfScrollAnimation(System.Single)">
            <summary>
            Adjust scrolling position by own scrolling rules.
            Override this function when developer wants to change destination of flicking.(e.g. always snap to center of item)
            </summary>
            <param name="position">Scroll position which is calculated by ScrollableBase</param>
            <returns>Adjusted scroll destination</returns>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.ClearCache">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.OnScrolling(System.Object,Tizen.NUI.Components.ScrollEventArgs)">
            <summary>
            OnScroll event callback. Requesting layout to the layouter with given scrollPosition.
            </summary>
            <param name="source">Scroll source object</param>
            <param name="args">Scroll event argument</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.CollectionView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose ItemsView and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.ICollectionChangedNotifier">
            <summary>
            Notify observers about dataset changes of observable items.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyDataSetChanged">
            <summary>
            Notify the dataset is Changed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemChanged(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item in startIndex is changed.
            </summary>
            <param name="source">dataset source</param>
            <param name="startIndex">changed item index</param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemInserted(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item is inserted in dataset.
            </summary>
            <param name="source">dataset source</param>
            <param name="startIndex">Inserted item index</param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the observable item is moved from fromPosition to ToPosition.
            </summary>
            <param name="source"></param>
            <param name="fromPosition"></param>
            <param name="toPosition"></param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemRangeMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notify the range of the observable items are moved from fromPosition to ToPosition.
            </summary>
            <param name="source"></param>
            <param name="fromPosition"></param>
            <param name="toPosition"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemRangeChanged(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the range of observable items from start to end are changed.
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemRangeInserted(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the count range of observable items are inserted in startIndex.
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemRangeRemoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the count range of observable items from the startIndex are removed.
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tizen.NUI.Components.ICollectionChangedNotifier.NotifyItemRemoved(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item in startIndex is removed.
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultGridItem">
            <summary>
            DefaultGridItem is one kind of common component, a DefaultGridItem clearly describes what action will occur when the user selects it.
            DefaultGridItem may contain text or an icon.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.#ctor">
            <summary>
            Creates a new instance of DefaultGridItem.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.#ctor(System.String)">
            <summary>
            Creates a new instance of DefaultGridItem with style
            </summary>
            <param name="style==">Create DefaultGridItem by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.#ctor(Tizen.NUI.Components.DefaultGridItemStyle)">
            <summary>
            Creates a new instance of DefaultGridItem with style
            </summary>
            <param name="itemStyle==">Create DefaultGridItem by style customized by user.</param>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultGridItem.LabelOrientation">
            <summary>
            Label orientation.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.DefaultGridItem.LabelOrientation.OutsideBottom">
            <summary>
            Outside of image bottom edge.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.DefaultGridItem.LabelOrientation.OutsideTop">
            <summary>
            Outside of image top edge.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.DefaultGridItem.LabelOrientation.InsideBottom">
            <summary>
            inside of image bottom edge.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.DefaultGridItem.LabelOrientation.InsideTop">
            <summary>
            inside of image top edge.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItem.Image">
            <summary>
            DefaultGridItem's icon part.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItem.Badge">
            <summary>
            DefaultGridItem's badge object. will be placed in right-top edge.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItem.Label">
            <summary>
            DefaultGridItem's text part.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItem.Text">
            <summary>
            The text of DefaultGridItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItem.LabelOrientationType">
            <summary>
            Label relative orientation with image in DefaultGridItem.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to DefaultLinearItemStyle.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.CreateLabel(Tizen.NUI.BaseComponents.TextLabelStyle)">
            <summary>
            Creates Item's text part.
            </summary>
            <return>The created Item's text part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.CreateImage(Tizen.NUI.BaseComponents.ImageViewStyle)">
            <summary>
            Creates Item's icon part.
            </summary>
            <return>The created Item's icon part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.MeasureChild">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.LayoutChild">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.OnInitialize">
            <summary>
            Initializes AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItem.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Item and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultLinearItem">
            <summary>
            DefaultLinearItem is one kind of common component, a DefaultLinearItem clearly describes what action will occur when the user selects it.
            DefaultLinearItem may contain text or an icon.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.#ctor">
            <summary>
            Creates a new instance of DefaultLinearItem.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.#ctor(System.String)">
            <summary>
            Creates a new instance of a DefaultLinearItem with style.
            </summary>
            <param name="style">Create DefaultLinearItem by style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.#ctor(Tizen.NUI.Components.DefaultLinearItemStyle)">
            <summary>
            Creates a new instance of a DefaultLinearItem with style.
            </summary>
            <param name="itemStyle">Create DefaultLinearItem by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.Icon">
            <summary>
            Icon part of DefaultLinearItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.Label">
            <summary>
            DefaultLinearItem's text part of DefaultLinearItem
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.Text">
            <summary>
            The text of DefaultLinearItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.SubLabel">
            <summary>
            DefaultLinearItem's secondary text part of DefaultLinearItem
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.SubText">
            <summary>
            The text of DefaultLinearItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.Extra">
            <summary>
            Extra icon part of DefaultLinearItem. it will place next of label.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItem.Seperator">
            <summary>
            Seperator divider of DefaultLinearItem. it will place at the end of item.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to DefaultLinearItemStyle.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc />
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.CreateLabel(Tizen.NUI.BaseComponents.TextLabelStyle)">
            <summary>
            Creates Item's text part.
            </summary>
            <return>The created Item's text part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.CreateIcon(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Creates Item's icon part.
            </summary>
            <return>The created Item's icon part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.MeasureChild">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.LayoutChild">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Item and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.CreateViewStyle">
            <summary>
            Get DefaultLinearItem style.
            </summary>
            <returns>The default DefaultLinearItem style.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItem.OnInitialize">
            <summary>
            Initializes AT-SPI object.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultTitleItem">
            <summary>
            DefaultTitleItem is one kind of common component, a DefaultTitleItem clearly describes what action will occur when the user selects it.
            DefaultTitleItem may contain text or an icon.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.#ctor">
            <summary>
            Creates a new instance of DefaultTitleItem.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.#ctor(System.String)">
            <summary>
            Creates a new instance of a DefaultTitleItem with style.
            </summary>
            <param name="style">Create DefaultTitleItem by style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.#ctor(Tizen.NUI.Components.DefaultTitleItemStyle)">
            <summary>
            Creates a new instance of a DefaultTitleItem with style.
            </summary>
            <param name="itemStyle">Create DefaultTitleItem by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItem.Icon">
            <summary>
            Icon part of DefaultTitleItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItem.Label">
            <summary>
            DefaultTitleItem's text part of DefaultTitleItem
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItem.Text">
            <summary>
            The text of DefaultTitleItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItem.Seperator">
            <summary>
            Seperator divider of DefaultTitleItem. it will place at the end of item.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to DefaultTitleItemStyle.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc />
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.CreateLabel(Tizen.NUI.BaseComponents.TextLabelStyle)">
            <summary>
            Creates Item's text part.
            </summary>
            <return>The created Item's text part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.CreateIcon(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Creates Item's icon part.
            </summary>
            <return>The created Item's icon part.</return>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.MeasureChild">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.LayoutChild">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Item and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.CreateViewStyle">
            <summary>
            Get DefaultTitleItem style.
            </summary>
            <returns>The default DefaultTitleItem style.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItem.OnInitialize">
            <summary>
            Initializes AT-SPI object.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.RecyclerViewItem">
            <summary>
            This class provides a basic item for CollectionView.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.RecyclerViewItem.IsEnabledProperty">
            <summary>
            Property of boolean Enable flag.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.RecyclerViewItem.IsSelectedProperty">
            <summary>
            Property of boolean Selected flag.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.RecyclerViewItem.IsSelectableProperty">
            <summary>
            Property of boolean Selectable flag.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.#ctor">
            <summary>
            Creates a new instance of RecyclerViewItem.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.#ctor(System.String)">
            <summary>
            Creates a new instance of RecyclerViewItem with style.
            </summary>
            <param name="style">Create RecyclerViewItem by special style defined in UX.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.#ctor(Tizen.NUI.Components.RecyclerViewItemStyle)">
            <summary>
            Creates a new instance of a RecyclerViewItem with style.
            </summary>
            <param name="itemStyle">Create RecyclerViewItem by style customized by user.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.RecyclerViewItem.Clicked">
            <summary>
            An event for the RecyclerViewItem clicked signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItem.IsSelectable">
            <summary>
            Flag to decide RecyclerViewItem can be selected or not.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItem.IsSelected">
            <summary>
            Flag to decide selected state in RecyclerViewItem.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItem.IsEnabled">
            <summary>
            Flag to decide enabled state in RecyclerViewItem.
            Set enabled state false makes item untouchable and unfocusable.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItem.Index">
            <summary>
            Data index which is binded to item.
            Can access to data using this index.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItem.Template">
            <summary>
            DataTemplate of this view object
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItem.IsRealized">
            <summary>
            State of Realization
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the key event should be consumed.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnFocusGained">
            <summary>
            Called when the control gain key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is gained.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnFocusLost">
            <summary>
            Called when the control loses key input focus. 
            Should be overridden by derived classes if they need to customize
            what happens when the focus is lost.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to RecyclerViewItem.
            </summary>
            <param name="viewStyle">The style to apply.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.CreateViewStyle">
            <summary>
            Get ViewItem style.
            </summary>
            <returns>The default ViewItem style.</returns>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnClicked(Tizen.NUI.Components.ClickedEventArgs)">
            <summary>
            Called when the ViewItem is Clicked by a user
            </summary>
            <param name="eventArgs">The click information.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.UpdateState">
            <summary>
            Update ViewItem State.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnUpdate">
            <summary>
            Called when the ViewItem need to be updated
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.HandleControlStateOnTouch(Tizen.NUI.Touch)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.MeasureChild">
            <summary>
            Measure child, it can be override.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.LayoutChild">
            <summary>
            Layout child, it can be override.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnInitialize">
            <summary>
            Initializes AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.UpdateContent">
            <summary>
            Update the Content. it can be override.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItem.OnBindingContextChanged">
            FIXME!! This has to be done in Element or View class.
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.ItemSelectionMode">
            <summary>
            Selection mode of CollecitonView.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ItemSelectionMode.None">
            <summary>
            None of the items can be selected.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ItemSelectionMode.Single">
            <summary>
            Single selection. Select item exclusively so previous selected item will be unselected.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ItemSelectionMode.SingleAlways">
            <summary>
            Single selection always. It's not possible to unselect all, so after user selects an item,
            there is always exactly one item selected. To deselect item, clear selection forcely.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ItemSelectionMode.Multiple">
            <summary>
            Multiple selections. Select multiple items and previous selected item still remains selected.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.ItemSizingStrategy">
            <summary>
            Size calculation strategy for CollectionView.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ItemSizingStrategy.MeasureFirst">
            <summary>
            Measure first item and deligate size for all items.
            if template is selector, the size of first item from each template will be deligated.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ItemSizingStrategy.MeasureAll">
            <summary>
            Measure all items in advanced.
            Estimate first item size for all, and when scroll reached position,
            measure strictly. Note : This will make scroll bar trembling.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.IItemSource">
            <summary>
            Base interface for encapsulated data source in RecyclerView.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.IItemSource.Count">
            <summary>
            Count of data source.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.IItemSource.GetPosition(System.Object)">
            <summary>
            Position integer value of data object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.IItemSource.GetItem(System.Int32)">
            <summary>
            Item object in position.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.IItemSource.HasHeader">
            <summary>
            Flag of header existence.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.IItemSource.HasFooter">
            <summary>
            Flag of Footer existence.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.IItemSource.IsHeader(System.Int32)">
            <summary>
            Boolean checker for position is header or not.
            0 index will be header if header exist.
            warning: if header exist, all item index will be increased.
            </summary>
            <param name="position">The position for checking header.</param>
        </member>
        <member name="M:Tizen.NUI.Components.IItemSource.IsFooter(System.Int32)">
            <summary>
            Boolean checker for position is footer or not.
            last index will be footer if footer exist.
            warning: footer will be place original data count or data count + 1.
            </summary>
            <param name="position">The position for checking footer.</param>
        </member>
        <member name="T:Tizen.NUI.Components.IGroupableItemSource">
            <summary>
            Base interface for encapsulated data source with group structure in CollectionView.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.IGroupableItemSource.IsGroupHeader(System.Int32)">
            <summary>
            Boolean checker for position is group header or not
            </summary>
            <param name="position">The position for checking group header.</param>
        </member>
        <member name="M:Tizen.NUI.Components.IGroupableItemSource.IsGroupFooter(System.Int32)">
            <summary>
            Boolean checker for position is group footer or not
            </summary>
            <param name="position">The position for checking group footer.</param>
        </member>
        <member name="M:Tizen.NUI.Components.IGroupableItemSource.GetGroupParent(System.Int32)">
            <summary>
            Boolean checker for position is group footer or not
            </summary>
            <param name="position">The position for checking group footer.</param>
        </member>
        <member name="T:Tizen.NUI.Components.GridLayouter">
            <summary>
            Layouter for CollectionView to display items in grid layout.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.Initialize(Tizen.NUI.Components.RecyclerView)">
            <summary>
            Clean up ItemsLayouter.
            </summary>
            <param name="view"> CollectionView of layouter. </param>
            <remarks>please note that, view must be type of CollectionView</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.RequestLayout(System.Single,System.Boolean)">
            <summary>
            This is called to find out where items are lain out according to current scroll position.
            </summary>
            <param name="scrollPosition">Scroll position which is calculated by ScrollableBase</param>
            <param name="force">boolean force flag to layouting forcely.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.Clear">
            <summary>
            Clear the current screen and all properties.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemSizeChanged(Tizen.NUI.Components.RecyclerViewItem)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemInserted(Tizen.NUI.Components.IItemSource,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemRangeInserted(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemRemoved(Tizen.NUI.Components.IItemSource,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemRangeRemoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.NotifyItemRangeMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.CalculateLayoutOrientationSize">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.CalculateCandidateScrollPosition(System.Single)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.RequestNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection,System.Boolean)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.GridLayouter.FindVisibleItems(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.ItemsLayouter">
            <summary>
            Default layout manager for RecyclerView.
            Layouting RecyclerViewItem on the scroll ContentContainer
            which need to be visible on the view by scroll position.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.Padding">
            <summary>
            Padding for ContentContainer of RecyclerView.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.Container">
            <summary>
            Container which contains ViewItems.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.ItemsView">
            <summary>
            Parent ItemsView.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.PrevScrollPosition">
            <summary>
            The last scrolled position which is calculated by ScrollableBase. The value should be updated in the Recycle() method.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.FirstVisible">
            <summary>
            First index of visible items.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.LastVisible">
            <summary>
            Last index of visible items.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.VisibleItems">
            <summary>
            Visible ViewItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.IsInitialized">
            <summary>
            Flag of layouter initialization.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.StepCandidate">
            <summary>
            Candidate item step size for scroll size measure.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.CandidateMargin">
            <summary>
            Candidate item's Margin for scroll size measure.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.ScrollContentSize">
            <summary>
            Content size of scrollable.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ItemsLayouter.IsHorizontal">
            <summary>
            boolean flag of scrollable horizontal direction.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.Initialize(Tizen.NUI.Components.RecyclerView)">
            <summary>
            Clean up ItemsLayouter.
            </summary>
            <param name="view"> ItemsView of layouter.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.RequestLayout(System.Single,System.Boolean)">
            <summary>
            This is called to find out where items are lain out according to current scroll position.
            </summary>
            <param name="scrollPosition">Scroll position which is calculated by ScrollableBase</param>
            <param name="force">boolean force flag to layouting forcely.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.Clear">
            <summary>
            Clear the current screen and all properties.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.CalculateLayoutOrientationSize">
            <summary>
            This is called to find out how much container size can be.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.CalculateCandidateScrollPosition(System.Single)">
            <summary>
            Adjust scrolling position by own scrolling rules.
            </summary>
            <param name="scrollPosition">Scroll position which is calculated by ScrollableBase</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemSizeChanged(Tizen.NUI.Components.RecyclerViewItem)">
            <summary>
            Notify the relayout of ViewItem.
            </summary>
            <param name="item">updated ViewItem.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyDataSetChanged">
            <summary>
            Notify the dataset is Changed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemChanged(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item in startIndex is changed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Changed item index.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemInserted(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item is inserted in dataset.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Inserted item index.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the observable item is moved from fromPosition to ToPosition.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="fromPosition">Previous item position.</param>
            <param name="toPosition">Moved item position.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemRangeMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notify the range of the observable items are moved from fromPosition to ToPosition.
            </summary>
            <param name="source"></param>
            <param name="fromPosition"></param>
            <param name="toPosition"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemRangeChanged(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the range of observable items from start to end are changed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startRange">Start index of changed items range.</param>
            <param name="endRange">End index of changed items range.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemRangeInserted(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the count range of observable items are inserted in startIndex.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Start index of inserted items range.</param>
            <param name="count">The number of inserted items.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemRangeRemoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the count range of observable items from the startIndex are removed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Start index of removed items range.</param>
            <param name="count">The number of removed items</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.NotifyItemRemoved(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item in startIndex is removed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Index of removed item.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.RequestNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection,System.Boolean)">
            <summary>
            Gets the next keyboard focusable view in this control towards the given direction.<br />
            A control needs to override this function in order to support two dimensional keyboard navigation.<br />
            </summary>
            <param name="currentFocusedView">The current focused view.</param>
            <param name="direction">The direction to move the focus towards.</param>
            <param name="loopEnabled">Whether the focus movement should be looped within the control.</param>
            <returns>The next keyboard focusable view in this control or an empty handle if no view can be focused.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.Dispose">
            <summary>
            Dispose ItemsLayouter and all children on it.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.MeasureChild(Tizen.NUI.Components.RecyclerView,Tizen.NUI.Components.RecyclerViewItem)">
            <summary>
            Measure the size of child ViewItem manually.
            </summary>
            <param name="parent">Parent ItemsView.</param>
            <param name="child">Child ViewItem to Measure()</param>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.FindVisibleItems(System.ValueTuple{System.Single,System.Single})">
            <summary>
            Find consecutive visible items index.
            </summary>
            <param name="visibleArea">float turple of visible area start position to end position. </param>
            <return>int turple of start index to end index</return>
        </member>
        <member name="M:Tizen.NUI.Components.ItemsLayouter.Dispose(System.Boolean)">
            <summary>
            Dispose ItemsLayouter and all children on it.
            </summary>
            <param name="disposing">true when it disposed by Dispose(). </param>
        </member>
        <member name="T:Tizen.NUI.Components.LinearLayouter">
            <summary>
            layouter for CollectionView to display items in linear layout.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.Initialize(Tizen.NUI.Components.RecyclerView)">
            <summary>
            Clean up ItemsLayouter.
            </summary>
            <param name="view"> CollectionView of layouter.</param>
            <remarks>please note that, view must be type of CollectionView</remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.RequestLayout(System.Single,System.Boolean)">
            <summary>
            This is called to find out where items are lain out according to current scroll position.
            </summary>
            <param name="scrollPosition">Scroll position which is calculated by ScrollableBase</param>
            <param name="force">boolean force flag to layouting forcely.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.Clear">
            <summary>
            Clear the current screen and all properties.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemSizeChanged(Tizen.NUI.Components.RecyclerViewItem)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemInserted(Tizen.NUI.Components.IItemSource,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemRangeInserted(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemRemoved(Tizen.NUI.Components.IItemSource,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemRangeRemoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemRangeMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.NotifyItemRangeChanged(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.CalculateLayoutOrientationSize">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.CalculateCandidateScrollPosition(System.Single)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.RequestNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection,System.Boolean)">
            <Inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.LinearLayouter.FindVisibleItems(System.ValueTuple{System.Single,System.Single})">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.RecyclerView">
            <summary>
            A View that serves as a base class for views that contain a templated list of items.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.#ctor">
            <summary>
            Base Constructor
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerView.ItemsSource">
            <summary>
            Item's source data.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerView.ItemTemplate">
            <summary>
            DataTemplate for items.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerView.InternalItemSource">
            <summary>
            Internal encapsulated items data source.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerView.RecycleCache">
            <summary>
            RecycleCache of ViewItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerView.InternalItemsLayouter">
            <summary>
            Internal Items Layouter.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerView.CacheMax">
            <summary>
            Max size of RecycleCache. Default is 50.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyDataSetChanged">
            <summary>
            Notify Dataset is Changed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemChanged(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify observable item is changed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Changed item index.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemRangeChanged(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify range of observable items from start to end are changed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startRange">Start index of changed items range.</param>
            <param name="endRange">End index of changed items range.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemInserted(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify observable item is inserted in dataset.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Inserted item index.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemRangeInserted(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify count range of observable count items are inserted in startIndex.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Start index of inserted items range.</param>
            <param name="count">The number of inserted items.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify observable item is moved from fromPosition to ToPosition.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="fromPosition">Previous item position.</param>
            <param name="toPosition">Moved item position.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemRangeMoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notify the observable item is moved from fromPosition to ToPosition.
            </summary>
            <param name="source"></param>
            <param name="fromPosition"></param>
            <param name="toPosition"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemRemoved(Tizen.NUI.Components.IItemSource,System.Int32)">
            <summary>
            Notify the observable item in startIndex is removed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Index of removed item.</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.NotifyItemRangeRemoved(Tizen.NUI.Components.IItemSource,System.Int32,System.Int32)">
            <summary>
            Notify the count range of observable items from the startIndex are removed.
            </summary>
            <param name="source">Dataset source.</param>
            <param name="startIndex">Start index of removed items range.</param>
            <param name="count">The number of removed items</param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.RealizeItem(System.Int32)">
            <summary>
            Realize indexed item.
            </summary>
            <param name="index"> Index position of realizing item </param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.UnrealizeItem(Tizen.NUI.Components.RecyclerViewItem,System.Boolean)">
            <summary>
            Unrealize indexed item.
            </summary>
            <param name="item"> Target item for unrealizing </param>
            <param name="recycle"> Allow recycle. default is true </param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.AdjustTargetPositionOfScrollAnimation(System.Single)">
            <summary>
            Adjust scrolling position by own scrolling rules.
            Override this function when developer wants to change destination of flicking.(e.g. always snap to center of item)
            </summary>
            <param name="position">Scroll position which is calculated by ScrollableBase.</param>
            <returns>Adjusted scroll destination</returns>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.PushRecycleCache(Tizen.NUI.Components.RecyclerViewItem)">
            <summary>
            Push the item into the recycle cache. this item will be reused in view update.
            </summary>
            <param name="item"> Target item to push into recycle cache. </param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.PopRecycleCache(Tizen.NUI.Binding.DataTemplate)">
            <summary>
            Pop the item from the recycle cache.
            </summary>
            <param name="Template"> Template of wanted item. </param>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.ClearCache">
            <summary>
            Clear all remaining caches.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.OnScrolling(System.Object,Tizen.NUI.Components.ScrollEventArgs)">
            <summary>
            On scroll event callback.
            </summary>        
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose ItemsView and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="T:Tizen.NUI.Components.SelectionChangedEventArgs">
            <summary>
            Selection changed event in RecyclerView items.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SelectionChangedEventArgs.PreviousSelection">
            <summary>
            Previous selection list.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SelectionChangedEventArgs.CurrentSelection">
            <summary>
            Current selection list.    
             </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollEventArgs">
            <summary>
            ScrollEventArgs is a class to record scroll event arguments which will sent to user.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollEventArgs.#ctor(Tizen.NUI.Position)">
            <summary>
            Default constructor.
            </summary>
            <param name="position">Current container position</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollEventArgs.Position">
            <summary>
            Current position of ContentContainer.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollEventArgs.ScrollPosition">
            <summary>
            Current scroll position of scrollableBase pan.
            This is the position in the opposite direction to the current position of ContentContainer.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollOutOfBoundEventArgs">
            <summary>
            ScrollOutofBoundEventArgs is to record scroll out-of-bound event arguments which will be sent to user.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Direction">
            <summary>
            The direction to be touched.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Direction.Up">
            <summary>
            Upwards.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Direction.Down">
            <summary>
            Downwards.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Direction.Left">
            <summary>
            Left bound.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Direction.Right">
            <summary>
            Right bound.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.#ctor(Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Direction,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="direction">Current pan direction</param>
            <param name="displacement">Current total displacement</param>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.PanDirection">
            <summary>
            Current pan direction of ContentContainer.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollOutOfBoundEventArgs.Displacement">
            <summary>
            Current total displacement of ContentContainer.
            if its value is greater than 0, it is at the top/left;
            if less than 0, it is at the bottom/right.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollableBase">
            <summary>
            This class provides a View that can scroll a single View with a layout. This View can be a nest of Views.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollableBase.Direction">
            <summary>
            The direction axis to scroll.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollableBase.Direction.Horizontal">
            <summary>
            Horizontal axis.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollableBase.Direction.Vertical">
            <summary>
            Vertical axis.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollingDirection">
            <summary>
            Scrolling direction mode.
            Default is Vertical scrolling.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollEnabled">
            <summary>
            Enable or disable scrolling.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.AccessibilityIsScrollable">
            <summary>
            Gets scrollable status.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.SnapToPage">
            <summary>
            Pages mode, enables moving to the next or return to current page depending on pan displacement.
            Default is false.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.CurrentPage">
            <summary>
            Get current page.
            Working property with SnapToPage property.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollDuration">
            <summary>
            Duration of scroll animation.
            Default value is 125ms.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollAvailableArea">
            <summary>
            Scroll Available area.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.ScrollableBase.ScrollDragStarted">
            <summary>
            An event emitted when user starts dragging ScrollableBase, user can subscribe or unsubscribe to this event handler.<br />
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.ScrollableBase.ScrollDragEnded">
            <summary>
            An event emitted when user stops dragging ScrollableBase, user can subscribe or unsubscribe to this event handler.<br />
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.ScrollableBase.ScrollAnimationStarted">
            <summary>
            An event emitted when the scrolling slide animation starts, user can subscribe or unsubscribe to this event handler.<br />
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.ScrollableBase.ScrollAnimationEnded">
            <summary>
            An event emitted when the scrolling slide animation ends, user can subscribe or unsubscribe to this event handler.<br />
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.ScrollableBase.Scrolling">
            <summary>
            An event emitted when scrolling, user can subscribe or unsubscribe to this event handler.<br />
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.ScrollableBase.ScrollOutOfBound">
            <summary>
            An event emitted when scrolling out of bound, user can subscribe or unsubscribe to this event handler.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.Scrollbar">
            <summary>
            Scrollbar for ScrollableBase.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.HideScrollbar">
            <summary>
            Always hide Scrollbar.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ContentContainer">
            <summary>
            Container which has content of ScrollableBase.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.Layout">
            <summary>
            Set the layout on this View. Replaces any existing Layout.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.Children">
            <summary>
            List of children of Container.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.DecelerationRate">
            <summary>
            Deceleration rate of scrolling by finger.
            Rate should be bigger than 0 and smaller than 1.
            Default value is 0.998f;
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.DecelerationThreshold">
            <summary>
            Threshold not to go infinite at the end of scrolling animation.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollingEventThreshold">
            <summary>
            Scrolling event will be thrown when this amount of scroll position is changed.
            If this threshold becomes smaller, the tracking detail increases but the scrolling range that can be tracked becomes smaller.
            If large sized ContentContainer is required, please use larger threshold value.
            Default ScrollingEventThreshold value is 0.001f.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.PageFlickThreshold">
            <summary>
            Page will be changed when velocity of panning is over threshold.
            The unit of threshold is pixel per millisecond.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.Padding">
            <summary>
            Padding for the ScrollableBase
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollAlphaFunction">
            <summary>
            Alphafunction for scroll animation.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.NoticeAnimationEndBeforePosition">
            <summary>
            Notice before animation is finished.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.#ctor">
            <summary>
            Default Constructor
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.Add(Tizen.NUI.BaseComponents.View)">
            <summary>
            Called after a child has been added to the owning view.
            </summary>
            <param name="view">The child which has been added.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.Remove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Called after a child has been removed from the owning view.
            </summary>
            <param name="view">The child which has been removed.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.SetScrollbar">
            <summary>
            The composition of a Scrollbar can vary depending on how you use ScrollableBase.
            Set the composition that will go into the ScrollableBase according to your ScrollableBase.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.UpdateScrollbar">
            Update scrollbar position and size.
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.ScrollToIndex(System.Int32)">
            <summary>
            Scrolls to the item at the specified index.
            </summary>
            <param name="index">Index of item.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.OnPreReachedTargetPosition(System.Single)">
            <summary>
            This helps developer who wants to know before scroll is reaching target position.
            </summary>
            <param name="targetPosition">Index of item.</param>
            This may be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.ScrollTo(System.Single,System.Boolean)">
            <summary>
            Scroll to specific position with or without animation.
            </summary>
            <param name="position">Destination.</param>
            <param name="animate">Scroll with or without animation</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.EnableOverShootingEffect">
            <summary>
            Enable/Disable overshooting effect. default is disabled.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.Decelerating(System.Single,Tizen.NUI.Animation)">
            <summary>
            you can override it to custom your decelerating
            </summary>
            <param name="velocity">Velocity of current pan.</param>
            <param name="animation">Scroll animation.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.AdjustTargetPositionOfScrollAnimation(System.Single)">
            <summary>
            Adjust scrolling position by own scrolling rules.
            Override this function when developer wants to change destination of flicking.(e.g. always snap to center of item)
            </summary>
            This may be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollPosition">
            <summary>
            Scroll position given to ScrollTo.
            This is the position in the opposite direction to the position of ContentContainer.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollableBase.ScrollCurrentPosition">
            <summary>
            Current scroll position in the middle of ScrollTo animation.
            This is the position in the opposite direction to the current position of ContentContainer.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollableBase.RemoveAllChildren(System.Boolean)">
            <summary>
            Remove all children in ContentContainer.
            </summary>
            <param name="dispose">If true, removed child is disposed.</param>
        </member>
        <member name="T:Tizen.NUI.Components.Scrollbar">
            <summary>
            The Scrollbar is a component that contains track and thumb to indicate the current scrolled position of a scrollable object.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.TrackThicknessProperty">
            <summary>Bindable property of TrackThickness</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.ThumbThicknessProperty">
            <summary>Bindable property of ThumbThickness</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.TrackColorProperty">
            <summary>Bindable property of TrackColor</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.ThumbColorProperty">
            <summary>Bindable property of ThumbColor</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.TrackPaddingProperty">
            <summary>Bindable property of TrackPadding</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.ThumbVerticalImageUrlProperty">
            <summary>Bindable property of ThumbVerticalImageUrl</summary>
        </member>
        <member name="F:Tizen.NUI.Components.Scrollbar.ThumbHorizontalImageUrlProperty">
            <summary>Bindable property of ThumbHorizontalImageUrl</summary>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.#ctor">
            <summary>
            Create an empty Scrollbar.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Create a Scrollbar and initialize with properties.
            </summary>
            <param name="contentLength">The length of the scrollable content area.</param>
            <param name="viewportLength">The length of the viewport representing the amount of visible content.</param>
            <param name="currentPosition">The current position of the viewport in scrollable content area. This is the viewport's top position if the scroller is vertical, otherwise, left.</param>
            <param name="isHorizontal">Whether the direction of scrolling is horizontal or not. It is vertical by default.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.#ctor(Tizen.NUI.Components.ScrollbarStyle)">
            <summary>
            Create an empty Scrollbar with a ScrollbarStyle instance to set style properties.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.#cctor">
            <summary>
            Static constructor to initialize bindable properties when loading.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.TrackThickness">
            <summary>
            The thickness of the track.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.ThumbThickness">
            <summary>
            The thickness of the thumb.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.TrackColor">
            <summary>
            The color of the track part.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.ThumbColor">
            <summary>
            The color of the thumb part.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.TrackPadding">
            <summary>
            The padding value of the track.
            Note that when the scrollbar is for vertical direction, Start value is ignored.
            In case of horizontal direction, Top value is ignored.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.ThumbVerticalImageUrl">
            <summary>
            The image url of the vertical thumb.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.ThumbHorizontalImageUrl">
            <summary>
            The image url of the horizontal thumb.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.ScrollPosition">
            <inheritdoc/>
        </member>
        <member name="P:Tizen.NUI.Components.Scrollbar.ScrollCurrentPosition">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.Initialize(System.Single,System.Single,System.Single,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.Update(System.Single,System.Single,System.Single,System.UInt32,Tizen.NUI.AlphaFunction)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Thrown when the scrollabr not yet initialized.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.Update(System.Single,System.Single,System.UInt32,Tizen.NUI.AlphaFunction)">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Thrown when the scrollabr not yet initialized.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.ScrollTo(System.Single,System.UInt32,Tizen.NUI.AlphaFunction)">
            <inheritdoc/>
            <remarks>Please note that, for now, only alpha functions created with BuiltinFunctions are valid when animating. Otherwise, it will be treated as a linear alpha function. </remarks>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.CreateViewStyle">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.UpdateTrackThickness(System.Single)">
            <summary>
            Update TrackThickness property of the scrollbar.
            </summary>
            <param name="thickness">The width of the track.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.UpdateThumbThickness(System.Single)">
            <summary>
            Update ThumbThickness property of the scrollbar.
            </summary>
            <param name="thickness">The width of the track.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Scrollbar.UpdateTrackPadding(Tizen.NUI.Extents)">
            <summary>
            Update TrackPadding property of the scrollbar.
            </summary>
            <param name="padding">The padding of the track.</param>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollbarBase">
            <summary>
            The ScrollbarBase is an abstract class that can be linked to the scrollable objects
            indicating the current scrolled position of the scrollable object.
            This only contains non-graphical functionalities of basic scrollbar.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.#ctor">
            <summary>
            Create an empty ScrollbarBase.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.#ctor(Tizen.NUI.Components.ControlStyle)">
            <summary>
            Create an empty Scrollbar with a ViewStyle instance to set style properties.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.#cctor">
            <summary>
            Static constructor to initialize bindable properties when loading.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.Unparent">
            <summary>
            Removes a view from its parent ScrollableBase. If a view has no parent, this method does nothing.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.Update(System.Single,System.Single,System.Single,System.UInt32,Tizen.NUI.AlphaFunction)">
            <summary>
            Update content length and position at once.
            </summary>
            <param name="contentLength">The total length of the content.</param>
            <param name="viewportLength">The length of the viewport representing the amount of visible content.</param>
            <param name="position">The destination position of the View in content length. This is the View's top position if the scroller is vertical, otherwise, View's left position.</param>
            <param name="durationMs">The time it takes to scroll in milliseconds.</param>
            <param name="alphaFunction">The timing function used in animation. It describes the rate of change of the animation parameter over time. (e.g. EaseOut)</param>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.Update(System.Single,System.Single,System.UInt32,Tizen.NUI.AlphaFunction)">
            <summary>
            Update content length and position at once.
            </summary>
            <param name="contentLength">The total length of the content.</param>
            <param name="position">The destination position of the View in content length. This is the View's top position if the scroller is vertical, otherwise, View's left position.</param>
            <param name="durationMs">The time it takes to scroll in milliseconds.</param>
            <param name="alphaFunction">The timing function used in animation. It describes the rate of change of the animation parameter over time. (e.g. EaseOut)</param>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.ScrollTo(System.Single,System.UInt32,Tizen.NUI.AlphaFunction)">
            <summary>
            Scroll content to a specific position.
            </summary>
            <param name="position">The destination to scroll.</param>
            <param name="durationMs">The time it takes to scroll in milliseconds.</param>
            <param name="alphaFunction">The timing function used in animation. It describes the rate of change of the animation parameter over time. (e.g. EaseOut)</param>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarBase.Initialize(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initialize the scroll bar.
            </summary>
            <param name="contentLength">The length of the scrollable content area.</param>
            <param name="viewportLength">The length of the viewport representing the amount of visible content.</param>
            <param name="currentPosition">The current position of the viewport in scrollable content area. This is the viewport's top position if the scroller is vertical, otherwise, left.</param>
            <param name="isHorizontal">Whether the direction of scrolling is horizontal or not. It is vertical by default.</param>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarBase.ScrollPosition">
            <summary>
            Scroll position given to ScrollTo or Update.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarBase.ScrollCurrentPosition">
            <summary>
            Current scroll position in the middle of ScrollTo or Update animation.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.SelectButton">
            <summary>
            SelectButton is base class of CheckBox and RadioButton.
            It can be used as selector and add into group for single-choice or multiple-choice .
            User can handle Navigation by adding/inserting/deleting NavigationItem.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SelectButton.ItemGroup">
            <summary>
            Item group which is used to manager all SelectButton in it.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.#ctor">
            <summary>
            Creates a new instance of a SelectButton.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.#ctor(System.String)">
            <summary>
            Creates a new instance of a SelectButton with style.
            </summary>
            <param name="style">Create SelectButton by special style defined in UX.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.#ctor(Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Creates a new instance of a SelectButton with style.
            </summary>
            <param name="buttonStyle">Create SelectButton by style customized by user.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="E:Tizen.NUI.Components.SelectButton.SelectedChanged">
            <summary>
            An event for the item selected signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SelectButton.Index">
            <summary>
            Index of selection in selection group. If selection is not in the group, return -1;
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose SelectButton and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the key event should be consumed.</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.OnTouch(Tizen.NUI.Touch)">
            <summary>
            Called after a touch event is received by the owning view.<br />
            CustomViewBehaviour.REQUIRES_TOUCH_EVENTS must be enabled during construction. See CustomView(ViewWrapperImpl.CustomViewBehaviour behaviour).<br />
            </summary>
            <param name="touch">The touch event.</param>
            <returns>True if the event should be consumed.</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.HandleControlStateOnTouch(Tizen.NUI.Touch)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.OnSelectedChanged">
            <summary>
            Overrides this method if want to handle behavior after pressing return key by user.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectButton.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.SelectGroup">
            <summary>
            SelectionGroup is the base class of CheckBoxGroup and RadioButtonGroup.
            It defines a group that is set of selections and enables the user to choose one or multiple selection.
            </summary>
            <code>
            Refer to CheckBoxGroup and RadioButtonGroup
            </code>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SelectGroup.ItemGroup">
            <summary> Selection group composed of items </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="E:Tizen.NUI.Components.SelectGroup.SelectedChanged">
            <summary>
            An event for the item selected changed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.SelectGroup.Count">
            <summary>
            Get the number of items in the SelectionGroup.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SelectGroup.SelectedIndex">
            <summary>
            Get the index of currently or latest selected item.
            If no item is selected, returns -1.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SelectGroup.EnableMultiSelection">
            <summary>
            EnableMultiSelection is used to indicate if SelectGroup can select multiple SelectButtons.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.#ctor">
            <summary>
            Construct SelectionGroup
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.Contains(Tizen.NUI.Components.SelectButton)">
            <summary>
            Determine whether selection is in the SelectionGroup
            </summary>
            <param name="selection">selection in the SelectionGroup</param>
            <returns>true if selection is found in the SelectionGroup; otherwise, false.</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.GetIndex(Tizen.NUI.Components.SelectButton)">
            <summary>
            Get the index of given selection.
            </summary>
            <param name="selection">selection in the SelectionGroup</param>
            <returns>The index of the selection in selection group if found; otherwise, return -1</returns>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.AddAllToView(Tizen.NUI.BaseComponents.View)">
            <summary>
            Adds all existing items in the group to the View.
            </summary>
            <param name="target">The target view.</param>
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.AddSelection(Tizen.NUI.Components.SelectButton)">
            <summary>
            Adds an selection to the end of the SelectionGroup
            </summary>
            <param name="selection">The selection to be added to the end of the SelectionGroup</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.RemoveSelection(Tizen.NUI.Components.SelectButton)">
            <summary>
            Removes an selection to the end of the SelectionGroup
            </summary>
            <param name="selection">The selection to remove from the SelectionGroup</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.SelectGroup.OnSelectedChanged(Tizen.NUI.Components.SelectButton)">
            <summary>
            Called when the state of Selected is changed.
            </summary>
            <param name="selection">The selection selected by user</param>
        </member>
        <member name="T:Tizen.NUI.Components.SliderValueChangedEventArgs">
            <summary>
            Slider value changed event data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderValueChangedEventArgs.CurrentValue">
            <summary>
            Current Slider value
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.SliderSlidingStartedEventArgs">
            <summary>
            Slider sliding started event data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderSlidingStartedEventArgs.CurrentValue">
            <summary>
            Current Slider value
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.SliderSlidingFinishedEventArgs">
            <summary>
            Slider sliding finished event data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderSlidingFinishedEventArgs.CurrentValue">
            <summary>
            Current Slider value
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Slider">
            <summary>
            A slider lets users select a value from a continuous or discrete range of values by moving the slider thumb.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.IndicatorTypeProperty">
            <summary>
            IndicatorTypeProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.SpaceBetweenTrackAndIndicatorProperty">
            <summary>
            SpaceBetweenTrackAndIndicatorProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.TrackThicknessProperty">
            <summary>
            TrackThicknessProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.IsValueShownProperty">
            <summary>
            IsValueShownProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.ValueIndicatorTextProperty">
            <summary>
            ValueIndicatorTextProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.CurrentValueProperty">
            <summary>
            Bindable property of CurrentValue
            <remark>
            Hidden API, used for NUI XAML data binding
            </remark>
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.#ctor">
            <summary>
            The constructor of the Slider class.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.#ctor(System.String)">
            <summary>
            The constructor of the Slider class with specific style.
            </summary>
            <param name="style">The string to initialize the Slider</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.#ctor(Tizen.NUI.Components.SliderStyle)">
            <summary>
            The constructor of the Slider class with specific style.
            </summary>
            <param name="sliderStyle">The style object to initialize the Slider</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Slider.ValueChangedEvent">
            <summary>
            The value changed event handler.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Slider.SlidingFinishedEvent">
            <summary>
            The sliding finished event handler.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Slider.ValueChanged">
            <summary>
            The value changed event handler.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Slider.SlidingStarted">
            <summary>
            The sliding started event handler.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Slider.SlidingFinished">
            <summary>
            The sliding finished event handler.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Slider.StateChangedEvent">
            <summary>
            The state changed event handler.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Slider.DirectionType">
            <summary>
            The direction type of slider.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.DirectionType.Horizontal">
            <summary>
            The Horizontal type.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.DirectionType.Vertical">
            <summary>
            The Vertical type.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Slider.IndicatorType">
            <summary>
            The indicator type of slider.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.IndicatorType.None">
            <summary> Only contains slider bar.</summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.IndicatorType.Image">
            <summary> Contains slider bar, IndicatorImage.</summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.IndicatorType.Text">
            <summary> Contains slider bar, IndicatorText.</summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.Style">
            <summary>
            Return currently applied style.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.Direction">
            <summary>
            Gets or sets the direction type of slider.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.Indicator">
            <summary>
            Gets or sets the indicator type, arrow or sign.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.MinValue">
            <summary>
            Gets or sets the minimum value of slider.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.MaxValue">
            <summary>
            Gets or sets the maximum value of slider.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.CurrentValue">
            <summary>
            Gets or sets the current value of slider.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ThumbSize">
            <summary>
            Gets or sets the size of the thumb image object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ThumbImageURL">
             <summary>
             Gets or sets the resource url of the thumb image object.
            
             Please use ThumbImageUrl property.
             </summary>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ThumbImageURLSelector">
             <summary>
             Gets or sets the resource url selector of the thumb image object.
             Getter returns copied selector value if exist, null otherwise.
            
             Please use ThumbImageUrl property.
             </summary>
             <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
             <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ThumbImageUrl">
            <summary>
            Gets or sets the Url of the thumb image.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ThumbColor">
            <summary>
            Gets or sets the color of the thumb image object.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.BgTrackColor">
            <summary>
            Gets or sets the color of the background track image object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.SlidedTrackColor">
            <summary>
            Gets or sets the color of the slided track image object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.TrackThickness">
            <summary>
            Gets or sets the thickness value of the track.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.WarningStartValue">
            <summary>
            Gets or sets the warning start value between minimum value and maximum value of slider.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Slider.WarningTrackColor">
            <summary>
            Gets or sets the color of the warning track image object.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Slider.WarningSlidedTrackColor">
            <summary>
            Gets or sets the color of the warning slided track image object.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Slider.WarningThumbImageUrl">
            <summary>
            Gets or sets the Url of the warning thumb image.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when setting null value.</exception>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Slider.WarningThumbColor">
            <summary>
            Gets or sets the color of the warning thumb image object.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Slider.LowIndicatorImageURL">
            <summary>
            Gets or sets the resource url of the low indicator image object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.HighIndicatorImageURL">
            <summary>
            Gets or sets the resource url of the high indicator image object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.LowIndicatorTextContent">
            <summary>
            Gets or sets the text content of the low indicator text object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.HighIndicatorTextContent">
            <summary>
            Gets or sets the text content of the high indicator text object.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.LowIndicatorSize">
            <summary>
            Gets or sets the size of the low indicator object(image or text).
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.HighIndicatorSize">
            <summary>
            Gets or sets the size of the high indicator object(image or text).
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.SpaceBetweenTrackAndIndicator">
            <summary>
            Gets or sets the value of the space between track and indicator.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.IsValueShown">
            <summary>
            Flag to decide whether the value indicator is shown
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ValueIndicatorText">
            <summary>
            Gets or sets the text of value indicator.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ValueIndicatorSize">
            <summary>
            Gets or sets the size of the value indicator image object.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.ValueIndicatorUrl">
            <summary>
            Gets or sets the resource url of the value indicator image object.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.IsDiscrete">
             <summary>
             Flag to decide whether the thumb snaps to the nearest discrete value when the user drags the thumb or taps.
            
             The default value is false.
             </summary>
             <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Slider.DiscreteValue">
            <summary>
            Gets or sets the discrete value of slider.
            </summary>
            <remarks>
            The discrete value is evenly spaced between MinValue and MaxValue.
            For example, MinValue is 0, MaxValue is 100, and DiscreteValue is 20.
            Then, the thumb can only go to 0, 20, 40, 60, 80, and 100.
            The default is 0.
            </remarks>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.OnFocusGained">
            <summary>
            Focus gained callback.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.OnFocusLost">
            <summary>
            Focus Lost callback.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to scrollbar.
            </summary>
            <param name="viewStyle">The style to apply.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.AccessibilityShouldReportZeroChildren">
            <summary>
            Prevents from showing child widgets in AT-SPI tree.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.AccessibilityGetMinimum">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.AccessibilityGetCurrent">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.AccessibilityGetMaximum">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.AccessibilitySetCurrent(System.Double)">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.AccessibilityGetMinimumIncrement">
            <summary>
            Minimum increment.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.CreateViewStyle">
            <summary>
            Get Slider style.
            </summary>
            <returns>The default slider style.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Slider.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Slider.OnUpdate">
            <summary>
            Update Slider by style.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Slider.ValueChangedArgs">
            <summary>
            Value Changed event data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.ValueChangedArgs.CurrentValue">
            <summary>
            Current value
            </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="T:Tizen.NUI.Components.Slider.SlidingFinishedArgs">
            <summary>
            Value Changed event data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.SlidingFinishedArgs.CurrentValue">
            <summary>
            Current value
            </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="T:Tizen.NUI.Components.Slider.StateChangedArgs">
            <summary>
            State Changed event data.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Slider.StateChangedArgs.CurrentState">
            <summary>
            Current state
            </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="T:Tizen.NUI.Components.Switch">
            <summary>
            Switch is a kind of <see cref="T:Tizen.NUI.Components.Button"/> component that uses icon part as a toggle shape.
            The icon part consists of track and thumb.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.#ctor">
            <summary>
            Creates a new instance of a Switch.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.#ctor(System.String)">
            <summary>
            Creates a new instance of a Switch with style.
            </summary>
            <param name="style">Create Switch by special style defined in UX.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.#ctor(Tizen.NUI.Components.SwitchStyle)">
            <summary>
            Creates a new instance of a Switch with style.
            </summary>
            <param name="switchStyle">Create Switch by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.OnInitialize">
            <summary>
            Initialize AT-SPI object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.AccessibilityCalculateStates">
            <summary>
            Informs AT-SPI bridge about the set of AT-SPI states associated with this object.
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.Switch.SelectedEvent">
            <summary>
            An event for the item selected signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.Switch.SelectedChanged">
            <summary>
            An event for the item selected signal which can be used to subscribe or unsubscribe the event handler provided by the user.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.Style">
            <summary>
            Return currently applied style.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to switch.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.Track">
            <summary>
            Switch's track part.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.Thumb">
            <summary>
            Switch's thumb part.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.SwitchBackgroundImageURLSelector">
            <summary>
            Switch's track part image url selector.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.SwitchHandlerImageURL">
            <summary>
            Handler image's resource url in Switch.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.SwitchHandlerImageURLSelector">
            <summary>
            Handler image's resource url selector in Switch.
            Getter returns copied selector value if exist, null otherwise.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Switch.SwitchHandlerImageSize">
            <summary>
            Handler image's size in Switch.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Switch and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the key event should be consumed.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.OnTouch(Tizen.NUI.Touch)">
            <summary>
            Called after a touch event is received by the owning view.<br />
            CustomViewBehaviour.REQUIRES_TOUCH_EVENTS must be enabled during construction. See CustomView(ViewWrapperImpl.CustomViewBehaviour behaviour).<br />
            </summary>
            <param name="touch">The touch event.</param>
            <returns>True if the event should be consumed.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.CreateViewStyle">
            <summary>
            Get Switch style.
            </summary>
            <returns>The default switch style.</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.CreateIcon">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Switch.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.Switch.SelectEventArgs">
            <summary>
            SelectEventArgs is a class to record item selected arguments which will sent to user.
            </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="F:Tizen.NUI.Components.Switch.SelectEventArgs.IsSelected">
            <summary> Select state of Switch </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Tab">
            <summary>
            Tab is one kind of common component, it can be used as menu label.
            User can handle Tab by adding/inserting/deleting TabItem.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.#ctor">
            <summary>
            Creates a new instance of a Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.#ctor(System.String)">
            <summary>
            Creates a new instance of a Tab with style.
            </summary>
            <param name="style">Create Tab by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.#ctor(Tizen.NUI.Components.TabStyle)">
            <summary>
            Creates a new instance of a Tab with style.
            </summary>
            <param name="tabStyle">Create Tab by style customized by user.</param>
        </member>
        <member name="E:Tizen.NUI.Components.Tab.ItemChangedEvent">
            <summary>
            An event for the item changed signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.Style">
            <summary>
            Return currently applied style.
            </summary>
            <remarks>
            Modifying contents in style may cause unexpected behaviour.
            </remarks>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.Underline">
            <summary>
            Get underline of Tab.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.SelectedItemIndex">
            <summary>
            Selected item's index in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.UseTextNaturalSize">
            <summary>
            Flag to decide if TabItem is adjusted by text's natural width.
            If true, TabItem's width will be equal as text's natural width, if false, it will be decided by Tab's width and tab item count.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.ItemSpace">
            <summary>
            Gap between items.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.Space">
            <summary>
            Space in Tab. Sequence as Left, Right, Top, Bottom
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.ItemPadding">
            <summary>
            Item paddings in Tab. Sequence as Left, Right, Top, Bottom
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Tab.UnderLineSize">
            <summary>
            UnderLine view's size in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.UnderLineBackgroundColor">
            <summary>
            UnderLine view's background in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.PointSize">
            <summary>
            Text point size in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.FontFamily">
            <summary>
            Text font family in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.TextColor">
            <summary>
            Text color in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.TextColorSelector">
            <summary>
            Text color selector in Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.AddItem(Tizen.NUI.Components.Tab.TabItemData)">
            <summary>
            Add tab item by item data. The added item will be added to end of all items automatically.
            </summary>
            <param name="itemData">Item data which will apply to tab item view.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.InsertItem(Tizen.NUI.Components.Tab.TabItemData,System.Int32)">
            <summary>
            Insert tab item by item data. The inserted item will be added to the special position by index automatically.
            </summary>
            <param name="itemData">Item data which will apply to tab item view.</param>
            <param name="index">Position index where will be inserted.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.DeleteItem(System.Int32)">
            <summary>
            Delete tab item by index.
            </summary>
            <param name="itemIndex">Position index where will be deleted.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to tab.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose Tab and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.OnUpdate">
            <summary>
            Update Tab.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Tab.CreateViewStyle">
            <summary>
            Get Tab style.
            </summary>
            <returns>The default tab style.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.Tab.LayoutChild">
            <summary>
            Layout child in Tab and it can be override by user.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Tab.TabItemData">
            <summary>
            TabItemData is a class to record all data which will be applied to Tab item.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Tab.TabItemData.Text">
            <summary>
            Text string in tab item view.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.Tab.ItemChangedEventArgs">
            <summary>
            ItemChangedEventArgs is a class to record item change event arguments which will sent to user.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Tab.ItemChangedEventArgs.PreviousIndex">
            <summary> Previous selected index of Tab </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="F:Tizen.NUI.Components.Tab.ItemChangedEventArgs.CurrentIndex">
            <summary> Current selected index of Tab </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="T:Tizen.NUI.Components.TabButtonSelectedEventArgs">
            <summary>
            TabButtonSelectedEventArgs is a class to record tab button selected event
            arguments which will be sent to a user.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonSelectedEventArgs.#ctor(System.Int32)">
            <summary>
            Creates a new instance of TabButtonSelectedEventArgs.
            The indices of tab buttons in TabBar are basically the order of adding to TabBar by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So a tab button's index in TabBar can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
            <param name="index">The index of the selected tab button in TabBar.</param>
        </member>
        <member name="P:Tizen.NUI.Components.TabButtonSelectedEventArgs.Index">
            <summary>
            The index of the selected tab button.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.TabBar">
            <summary>
            TabBar is a class which contains a set of TabButtons and has one of them selected.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.#ctor">
            <summary>
            Creates a new instance of TabBar.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Components.TabBar.TabButtonSelected">
            <summary>
            An event for the tab button selected signal which can be used to
            subscribe or unsubscribe the event handler provided by a user.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabBar.SelectedIndex">
            <summary>
            The index of the selected tab button.
            The indices of tab buttons in TabBar are basically the order of adding to TabBar by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So a tab button's index in TabBar can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabBar.TabButtonCount">
            <summary>
            Gets the count of tab buttons.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.AddTabButton(Tizen.NUI.Components.TabButton)">
            <summary>
            Adds a tab button to TabBar.
            </summary>
            <param name="tabButton">A tab button to be added to TabBar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument tabButton is null.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.RemoveTabButton(Tizen.NUI.Components.TabButton)">
            <summary>
            Removes a tab button from TabBar.
            </summary>
            <param name="tabButton">A tab button to be removed from TabBar.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument tabButton is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the argument tabButton does not exist in TabBar.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.GetTabButton(System.Int32)">
            <summary>
            Gets the tab button at the specified index of TabBar.
            The indices of tab buttons in TabBar are basically the order of adding to TabBar by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So a tab button's index in TabBar can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
            <param name="index">The index of tab button in TabBar where the specified tab button exists.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0, or greater than or equal to the number of tab buttons.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabBar.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TabButton">
            <summary>
            TabButton is a class which is used for selecting one content in a TabView.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.#ctor">
            <summary>
            Creates a new instance of TabButton.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.#ctor(System.String)">
            <summary>
            Creates a new instance of TabButton.
            </summary>
            <param name="style">Creates TabButton by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.#ctor(Tizen.NUI.Components.TabButtonStyle)">
            <summary>
            Creates a new instance of TabButton.
            </summary>
            <param name="tabButtonStyle">Creates TabButton by style customized by user.</param>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.OnKey(Tizen.NUI.Key)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.CreateViewStyle">
            <summary>
            Gets TabButton style.
            </summary>
            <returns>The default TabButton style.</returns>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.HandleControlStateOnTouch(Tizen.NUI.Touch)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.OnControlStateChanged(Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabButton.LayoutItems">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TabButtonGroup">
            <summary>
            TabButtonGroup class is used to group together a set of TabButton controls.
            It enables a user to select exclusively single TabButton of a group.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonGroup.#ctor">
            <summary>
            Constructs TabButtonGroup
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonGroup.Add(Tizen.NUI.Components.TabButton)">
            <summary>
            Adds a tab button to the end of TabButtonGroup.
            </summary>
            <param name="tabButton">A tab button to be added to the group.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument tabButton is null.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonGroup.Remove(Tizen.NUI.Components.TabButton)">
            <summary>
            Removes a tab button from TabButtonGroup.
            </summary>
            <param name="tabButton">A tab button to be removed from the group.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument tabButton is null.</exception>
        </member>
        <member name="T:Tizen.NUI.Components.TabContent">
            <summary>
            TabContent is a class which contains a set of Views and has one of them selected.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.#ctor">
            <summary>
            Creates a new instance of TabContent.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.TabContent.SelectedIndex">
            <summary>
            The index of the selected view.
            The indices of views in TabContent are basically the order of adding to TabContent by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So a view's index in TabContent can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabContent.ViewCount">
            <summary>
            Gets the count of views.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.AddView(Tizen.NUI.BaseComponents.View)">
            <summary>
            Adds a view to TabContent.
            </summary>
            <param name="view">A view to be added to TabContent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument view is null.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.RemoveView(Tizen.NUI.BaseComponents.View)">
            <summary>
            Removes a view from TabContent.
            </summary>
            <param name="view">A view to be removed from TabContent.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument view is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the argument view does not exist in TabContent.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.Select(System.Int32)">
            <summary>
            Selects a view at the specified index of TabContent.
            The indices of views in TabContent are basically the order of adding to TabContent by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So a view's index in TabContent can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
            <param name="index">The index of a view in TabContent where the view will be selected.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than -1, or greater than or equal to the number of views.</exception>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.GetView(System.Int32)">
            <summary>
            Gets the view at the specified index of TabContent.
            The indices of views in TabContent are basically the order of adding to TabContent by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So a view's index in TabContent can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
            <param name="index">The index of a view in TabContent where the specified view exists.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0, or greater than or equal to the number of views.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabContent.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TabView">
             <summary>
             TabView is a class which contains a TabBar and TabContent.
             TabView adds TabButtons and Views to TabBar and TabContent in TabView by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
             TabView removes TabButtons and Views from TabBar and TabContent in TabView by <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/>.
             TabView selects a view from the TabContent according to the selected TabButton in the TabBar.
            
             <example>
             <code>
             var tabView = new TabView()
             {
                 WidthSpecification = LayoutParamPolicies.MatchParent,
                 HeightSpecification = LayoutParamPolicies.MatchParent,
             };
            
             var tabButton = new TabButton()
             {
                 Text = "Tab#1"
             };
            
             var content = new View()
             {
                 BackgroundColor = Color.Red,
                 WidthSpecification = LayoutParamPolicies.MatchParent,
                 HeightSpecification = LayoutParamPolicies.MatchParent,
             };
            
             tabView.AddTab(tabButton, content);
            
             var tabButton2 = new TabButton()
             {
                 Text = "Tab#2"
             };
            
             var content2 = new View()
             {
                 BackgroundColor = Color.Green,
                 WidthSpecification = LayoutParamPolicies.MatchParent,
                 HeightSpecification = LayoutParamPolicies.MatchParent,
             };
            
             tabView.AddTab(tabButton2, content2);
            
             var tabButton3 = new TabButton()
             {
                 Text = "Tab#3"
             };
            
             var content3 = new View()
             {
                 BackgroundColor = Color.Blue,
                 WidthSpecification = LayoutParamPolicies.MatchParent,
                 HeightSpecification = LayoutParamPolicies.MatchParent,
             };
            
             tabView.AddTab(tabButton3, content3);
             </code>
             </example>
             </summary>
             <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabView.#ctor">
            <summary>
            Creates a new instance of TabView.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabView.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="P:Tizen.NUI.Components.TabView.TabBar">
            <summary>
            Gets TabBar of TabView.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.TabView.Content">
            <summary>
            Gets TabContent of TabView.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)">
            <summary>
            Adds a tab with tab button and content view.
            </summary>
            <param name="tabButton">A tab button to be added.</param>
            <param name="view">A content view to be added.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)">
            <summary>
            Removes a tab at the specified index of TabView.
            The indices of tabs(tab buttons and views) in TabView are basically the order of adding to TabView by <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/>.
            So the index of a tab(tab button and view) in TabView can be changed whenever <see cref="M:Tizen.NUI.Components.TabView.AddTab(Tizen.NUI.Components.TabButton,Tizen.NUI.BaseComponents.View)"/> or <see cref="M:Tizen.NUI.Components.TabView.RemoveTab(System.Int32)"/> is called.
            </summary>
            <param name="index">The index of a tab(tab button and view) in TabView where the tab will be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is less than 0, or greater than or equal to the number of tabs.</exception>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.TabView.Dispose(Tizen.NUI.DisposeTypes)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TimeChangedEventArgs">
            <summary>
            TimeChangedEventArgs is a class to notify changed TimePicker value argument which will sent to user.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimeChangedEventArgs.#ctor(System.DateTime)">
            <summary>
            TimeChangedEventArgs default constructor.
            <param name="time">time value of TimePicker.</param>
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TimeChangedEventArgs.Time">
            <summary>
            TimeChangedEventArgs default constructor.
            <returns>The current time value of TimePicker.</returns>
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.TimePicker">
            <summary>
            TimePicker is a class which provides a function that allows the user to select 
            a time through a scrolling motion by expressing the specified value as a list.
            TimePicker expresses the current time using the locale information of the system.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePicker.#ctor">
            <summary>
            Creates a new instance of TimePicker.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePicker.#ctor(System.String)">
            <summary>
            Creates a new instance of TimePicker.
            </summary>
            <param name="style">Creates TimePicker by special style defined in UX.</param>
        </member>
        <member name="M:Tizen.NUI.Components.TimePicker.#ctor(Tizen.NUI.Components.TimePickerStyle)">
            <summary>
            Creates a new instance of TimePicker.
            </summary>
            <param name="timePickerStyle">Creates TimePicker by style customized by user.</param>
        </member>
        <member name="M:Tizen.NUI.Components.TimePicker.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose TimePicker and all children on it.
            </summary>
            <param name="type">Dispose type.</param>
        </member>
        <member name="E:Tizen.NUI.Components.TimePicker.TimeChanged">
            <summary>
            An event emitted when TimePicker value changed, user can subscribe or unsubscribe to this event handler.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TimePicker.Time">
            <summary>
            The hour value of TimePicker.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TimePicker.Is24HourView">
            <summary>
            The is24hourview value of TimePicker.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePicker.OnInitialize">
            <summary>
            Initialize TimePicker object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePicker.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Applies style to TimePicker.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="T:Tizen.NUI.Components.Toast">
            <summary>
            Use a toast to provide simple messages when the user does not need to make an additional action or confirmation.
            Unlike other popups, a toast only has the body field as it is just used for providing simple feedback to user actions.
            A toast will automatically disappear after a certain time.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.Toast.MessageProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Toast.DurationProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Toast.FromText(System.String,System.UInt32)">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.Toast.textLabels">
            <summary> text labels </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.#ctor">
            <summary>
            Construct Toast with null.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.#ctor(Tizen.NUI.Components.ToastStyle)">
            <summary>
            The constructor of the Toast class with specific Style.
            </summary>
            <param name="toastStyle">Construct Style</param>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.#ctor(System.String)">
            <summary>
            Constructor of the Toast class with special style.
            </summary>
            <param name="style"> style name </param>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.TextArray">
            <summary>
            Gets or sets the text array of toast.
            </summary>
            <since_tizen> 6 </since_tizen>
            It will be removed in API10
        </member>
        <member name="P:Tizen.NUI.Components.Toast.PointSize">
            <summary>
            Gets or sets text point size in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.FontFamily">
            <summary>
            Gets or sets text font family in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.TextColor">
            <summary>
            Gets or sets text color in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.TextAlignment">
            <summary>
            Gets or sets text horizontal alignment in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.Post(Tizen.NUI.Window)">
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Toast.Message">
            <summary>
            Gets or sets the text toast.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.Toast.TextPadding">
            <summary>
            Gets or sets text padding in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.TextLineHeight">
            <summary>
            Gets or sets text line height in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.TextLineSpace">
            <summary>
            Gets or sets text line space in toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.Toast.Duration">
            <summary>
            Gets or sets duration of toast.
            </summary>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.ApplyStyle(Tizen.NUI.BaseComponents.ViewStyle)">
            <summary>
            Apply style to toast.
            </summary>
            <param name="viewStyle">The style to apply.</param>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose ToastPopup.
            </summary>
            <param name="type">dispose types.</param>
            <since_tizen> 6 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.Toast.CreateViewStyle">
            <summary>
            Get Toast style.
            </summary>
            <returns>The default toast style.</returns>
        </member>
        <member name="T:Tizen.NUI.Components.OverlayAnimationButtonStyle">
            <summary>
            Describes Button Animation used in OneUI_Watch2.X
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.OverlayAnimationButtonStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.OverlayAnimationButtonStyle.CreateExtension">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.OverlayAnimationButtonExtension">
            <summary>
            OverlayAnimationButtonExtension class is a extended ButtonExtension class that make the overlay image blinking on a Button pressed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.OverlayAnimationButtonExtension.#ctor">
            <summary>
            Creates a new instance of a OverlayAnimationButtonExtension.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.OverlayAnimationButtonExtension.OnCreateOverlayImage(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.ImageView)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.OverlayAnimationButtonExtension.OnControlStateChanged(Tizen.NUI.Components.Button,Tizen.NUI.BaseComponents.View.ControlStateChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.OverlayAnimationButtonExtension.OnDispose(Tizen.NUI.Components.Button)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.AlertDialogStyle">
            <summary>
            AlertDialogStyle is a class which saves AlertDialog's UX data.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialogStyle.#ctor">
            <summary>
            Creates a new instance of an AlertDialogStyle.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialogStyle.#ctor(Tizen.NUI.Components.AlertDialogStyle)">
            <summary>
            Creates a new instance of an AlertDialogStyle with style.
            The given style is copied to the new instance.
            </summary>
            <param name="style">Create AlertDialogStyle by style customized by user.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialogStyle.TitleTextLabel">
            <summary>
            Gets or sets the AlertDialog Title TextLabel style.
            This style is applied if AlertDialog TitleContent is a TextLabel.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialogStyle.MessageTextLabel">
            <summary>
            Gets or sets the AlertDialog Message TextLabel style.
            This style is applied if AlertDialog Content is a TextLabel.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AlertDialogStyle.ActionContent">
            <summary>
            Gets or sets the AlertDialog ActionContent style.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AlertDialogStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.ButtonStyle">
            <summary>
            ButtonStyle is a class which saves Button's ux data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.IsSelectableProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.IsSelectedProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.IsEnabledProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.IconRelativeOrientationProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.IconPaddingProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.TextPaddingProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.ItemAlignmentProperty">
            <summary> The bindable property of ItemAlignment. </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ButtonStyle.ItemSpacingProperty">
            <summary> The bindable property of ItemSpacing. </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonStyle.#ctor">
            <summary>
            Creates a new instance of a ButtonStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonStyle.#ctor(Tizen.NUI.Components.ButtonStyle)">
            <summary>
            Creates a new instance of a ButtonStyle with style.
            </summary>
            <param name="style">Create ButtonStyle by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.Overlay">
            <summary>
            Overlay image's Style.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.Text">
            <summary>
            Text's Style.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.Icon">
            <summary>
            Icon's Style.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.IsSelectable">
            <summary>
            Flag to decide Button can be selected or not.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.IsSelected">
            <summary>
            Flag to decide selected state in Button.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.IsEnabled">
            <summary>
            Flag to decide button can be selected or not.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.IconRelativeOrientation">
            <summary>
            Icon relative orientation.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.IconPadding">
            <summary>
            Icon padding in Button. It is shortcut of Icon.Padding.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.TextPadding">
            <summary>
            Text padding in Button. It is shortcut of Text.Padding.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.ItemAlignment">
            <summary>
            The item (text or icon or both) alignment.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ButtonStyle.ItemSpacing">
            <summary>
            The space between icon and text.
            The value is applied when there exist icon and text both.
            The width value is used when the items are arranged horizontally. Otherwise, the height value is used.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonStyle.CreateExtension">
            <summary>
            Create corresponding ButtonExtension.
            This is to be called by a Button.
            You may override this function to customize button's behavior.
            </summary>
            <return>The new ButtonExtension instance.</return>
        </member>
        <member name="M:Tizen.NUI.Components.ButtonStyle.Dispose(System.Boolean)">
            <summary>
            Dispose ButtonStyle and all children on it.
            </summary>
            <param name="disposing">true in order to free managed objects</param>
        </member>
        <member name="T:Tizen.NUI.Components.ControlStyle">
            <summary>
            ControlStyle is a base class of NUI.Components style.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.ControlStyle.#ctor">
            <summary>
            Creates a new instance of a ControlStyle.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.ControlStyle.#ctor(Tizen.NUI.Components.ControlStyle)">
            <summary>
            Creates a new instance of a ControlStyle with style.
            </summary>
            <param name="style">Create ControlStyle by style customized by user.</param>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.DatePickerStyle">
            <summary>
            DatePickerStyle is a class which saves DatePickerStyle's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePickerStyle.#ctor">
            <summary>
            Creates a new instance of a DatePickerStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePickerStyle.#ctor(Tizen.NUI.Components.DatePickerStyle)">
            <summary>
            Creates a new instance of a DatePickerStyle with style.
            </summary>
            <param name="style">Creates DatePickerStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DatePickerStyle.Pickers">
            <summary>
            Gets or sets the DatePickerStyle internal pickers style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DatePickerStyle.CellPadding">
            <summary>
            Gets or sets the DatePickerStyle internal pickers padding.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DatePickerStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultGridItemStyle">
            <summary>
            DefaultGridItemStyle is a class which saves DefaultLinearItem's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItemStyle.#ctor">
            <summary>
            Creates a new instance of a DefaultGridItemStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItemStyle.#ctor(Tizen.NUI.Components.DefaultGridItemStyle)">
            <summary>
            Creates a new instance of a DefaultGridItemStyle with style.
            </summary>
            <param name="style">Create DefaultGridItemStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItemStyle.Label">
            <summary>
            Label Text's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItemStyle.Image">
            <summary>
            Icon's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultGridItemStyle.Badge">
            <summary>
            Extra's style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultGridItemStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultLinearItemStyle">
            <summary>
            DefaultLinearItemStyle is a class which saves DefaultLinearItem's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItemStyle.#ctor">
            <summary>
            Creates a new instance of a DefaultLinearItemStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItemStyle.#ctor(Tizen.NUI.Components.DefaultLinearItemStyle)">
            <summary>
            Creates a new instance of a DefaultLinearItemStyle with style.
            </summary>
            <param name="style">Create DefaultLinearItemStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItemStyle.Label">
            <summary>
            Label Text's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItemStyle.SubLabel">
            <summary>
            Sublabel Text's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItemStyle.Icon">
            <summary>
            Icon's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItemStyle.Extra">
            <summary>
            Extra's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultLinearItemStyle.Seperator">
            <summary>
            Seperator's style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultLinearItemStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.DefaultTitleItemStyle">
            <summary>
            DefaultTitleItemStyle is a class which saves DefaultLinearItem's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItemStyle.#ctor">
            <summary>
            Creates a new instance of a DefaultTitleItemStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItemStyle.#ctor(Tizen.NUI.Components.DefaultTitleItemStyle)">
            <summary>
            Creates a new instance of a DefaultTitleItemStyle with style.
            </summary>
            <param name="style">Create DefaultTitleItemStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItemStyle.Label">
            <summary>
            Label Text's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItemStyle.Icon">
            <summary>
            Icon's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.DefaultTitleItemStyle.Seperator">
            <summary>
            Seperator's style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultTitleItemStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollBarStyle">
            <summary>
            ScrollBarStyle is a class which saves Scrollbar's ux data.
            </summary>
            <remarks>
            Please note that this class will be replaced with ScrollbarStyle class in the near future.
            </remarks>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBarStyle.#ctor">
            <summary>
            Creates a new instance of a ScrollBarStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBarStyle.#ctor(Tizen.NUI.Components.ScrollBarStyle)">
            <summary>
            Creates a new instance of a ScrollBarStyle with style.
            </summary>
            <param name="style">Create ScrollBarStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBarStyle.Track">
            <summary>
            Get or set track image style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBarStyle.Thumb">
            <summary>
            Get or set thumb image style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBarStyle.Direction">
            <summary>
            Get or set direction type.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollBarStyle.Duration">
            <summary>
            Get or set duration.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollBarStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.LoadingStyle">
            <summary>
            LoadingStyle is a class which saves Loading's ux data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.LoadingStyle.FrameRateSelectorProperty">
            <summary>The FrameRateSelector bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.LoadingStyle.LoadingSizeProperty">
            <summary>The LoadingSize bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.LoadingStyle.ImagesProperty">
            <summary>The Images bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.LoadingStyle.ImageListProperty">
            <summary>The Images bindable property.</summary>
        </member>
        <member name="M:Tizen.NUI.Components.LoadingStyle.#ctor">
            <summary>
            Creates a new instance of a LoadingStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.LoadingStyle.#ctor(Tizen.NUI.Components.LoadingStyle)">
            <summary>
            Creates a new instance of a LoadingStyle with style.
            </summary>
            <param name="style">Create LoadingStyle by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.LoadingStyle.Images">
            <summary>
            Gets or sets loading image resources.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.LoadingStyle.ImageList">
            <summary>
            Gets loading image resources.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.LoadingStyle.LoadingSize">
            <summary>
            Gets or sets loading image size.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.LoadingStyle.FrameRate">
            <summary>
            Gets or sets loading frame per second.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.LoadingStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.AppBarStyle">
            <summary>
            AppBarStyle is a class which saves AppBar's ux data.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBarStyle.#ctor">
            <summary>
            Creates a new instance of an AppBarStyle.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.AppBarStyle.#ctor(Tizen.NUI.Components.AppBarStyle)">
            <summary>
            Creates a new instance of an AppBarStyle with style.
            The given style is copied to the new instance.
            </summary>
            <param name="style">Creates AppBarStyle by style customized by user.</param>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.BackButton">
            <summary>
            Gets or sets the AppBar Back Button style.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.TitleTextLabel">
            <summary>
            Gets or sets the AppBar Title TextLabel style.
            This style is applied if AppBar Title is a TextLabel.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.ActionView">
            <summary>
            Gets or sets the AppBar Action View style.
            This style is applied if AppBar ActionContent's child is a View.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.ActionButton">
            <summary>
            Gets or sets the AppBar Action Button style.
            This style is applied if AppBar ActionContent's child is a Button.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.NavigationPadding">
            <summary>
            Navigation padding in AppBar.
            This works only when NavigationContent is visible.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.ActionPadding">
            <summary>
            Action padding in AppBar.
            This works only when ActionContent is visible.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.AppBarStyle.ActionCellPadding">
            <summary>
            Cell padding among Actions in AppBar.
            This works only when ActionContent is visible.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.AppBarStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.PaginationStyle">
            <summary>
            PaginationStyle used to config the pagination represent.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.PaginationStyle.IndicatorSizeProperty">
            <summary>The IndicatorSize bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.PaginationStyle.IndicatorImageUrlSelectorProperty">
            <summary>The IndicatorImageUrlSelector bindable property.</summary>
        </member>
        <member name="F:Tizen.NUI.Components.PaginationStyle.IndicatorSpacingProperty">
            <summary>The IndicatorSpacing bindable property.</summary>
        </member>
        <member name="M:Tizen.NUI.Components.PaginationStyle.#ctor">
            <summary>
            Creates a new instance of a PaginationStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.PaginationStyle.#ctor(Tizen.NUI.Components.PaginationStyle)">
            <summary>
            Creates a new instance of a PaginationStyle using style.
            </summary>
            <param name="style">Create PaginationStyle by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.PaginationStyle.IndicatorSize">
            <summary>
            Gets or sets the size of the indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.PaginationStyle.IndicatorImageUrl">
            <summary>
            Gets or sets the resource of indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.PaginationStyle.IndicatorSpacing">
            <summary>
            Gets or sets the space of the indicator.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.PaginationStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.PickerStyle">
            <summary>
            PickerStyle is a class which saves PickerStyle's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PickerStyle.#ctor">
            <summary>
            Creates a new instance of a PickerStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PickerStyle.#ctor(Tizen.NUI.Components.PickerStyle)">
            <summary>
            Creates a new instance of a PickerStyle with style.
            </summary>
            <param name="style">Creates PickerStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.PickerStyle.ItemTextLabel">
            <summary>
            Gets or sets the PickerStyle Item TextLabel style.
            This style is applied if PickerStyle Item is a TextLabel.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.PickerStyle.Divider">
            <summary>
            Gets or sets the PickerStyle Center line style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.PickerStyle.StartScrollOffset">
            <summary>
            Gets or sets the PickerStyle Item list start offset value.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PickerStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.PopupStyle">
            <summary>
            PopupStyle is a class which saves Popup's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PopupStyle.#ctor">
            <summary>
            Creates a new instance of a PopupStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PopupStyle.#ctor(Tizen.NUI.Components.PopupStyle)">
            <summary>
            Creates a new instance of a PopupStyle with style.
            </summary>
            <param name="style">Create PopupStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.PopupStyle.Title">
            <summary>
            Title Text's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.PopupStyle.Buttons">
            <summary>
            Popup button's style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PopupStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.ProgressStyle">
            <summary>
            ProgressStyle is a class which saves Progress's ux data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ProgressStyle.#ctor">
            <summary>
            Creates a new instance of a ProgressStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ProgressStyle.#ctor(Tizen.NUI.Components.ProgressStyle)">
            <summary>
            Creates a new instance of a ProgressStyle with style.
            </summary>
            <param name="style">Create ProgressStyle by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ProgressStyle.Track">
            <summary>
            Gets or sets track image.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ProgressStyle.Progress">
            <summary>
            Gets or sets progress image.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ProgressStyle.Buffer">
            <summary>
            Gets or sets buffer image.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.ProgressStyle.IndeterminateImageUrl">
            <summary>
            Gets or sets indeterminate progress resource.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.ProgressStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.RecyclerViewItemStyle">
            <summary>
            RecyclerViewItemStyle is a class which saves RecyclerViewItem's UX data.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.RecyclerViewItemStyle.IsSelectableProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.RecyclerViewItemStyle.IsSelectedProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="F:Tizen.NUI.Components.RecyclerViewItemStyle.IsEnabledProperty">
            This will be public opened in tizen_6.0 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItemStyle.#ctor">
            <summary>
            Creates a new instance of a RecyclerViewItemStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItemStyle.#ctor(Tizen.NUI.Components.RecyclerViewItemStyle)">
            <summary>
            Creates a new instance of a RecyclerViewItemStyle with style.
            </summary>
            <param name="style">Create RecyclerViewItemStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItemStyle.IsSelectable">
            <summary>
            Flag to decide RecyclerViewItem can be selected or not.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItemStyle.IsSelected">
            <summary>
            Flag to decide selected state in RecyclerViewItem.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.RecyclerViewItemStyle.IsEnabled">
            <summary>
            Flag to decide RecyclerViewItem can be selected or not.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.RecyclerViewItemStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.ScrollbarStyle">
            <summary>
            ScrollbarStyle is a class which saves Scrollbar's style data.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.TrackThicknessProperty">
            <summary>Bindable property of TrackThickness</summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.ThumbThicknessProperty">
            <summary>Bindable property of ThumbThickness</summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.TrackColorProperty">
            <summary>Bindable property of TrackColor</summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.ThumbColorProperty">
            <summary>Bindable property of ThumbColor</summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.TrackPaddingProperty">
            <summary>Bindable property of TrackPadding</summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.ThumbVerticalImageUrlProperty">
            <summary>Bindable property of ThumbBackgroundImageVertical</summary>
        </member>
        <member name="F:Tizen.NUI.Components.ScrollbarStyle.ThumbHorizontalImageUrlProperty">
            <summary>Bindable property of ThumbBackgroundImageUrl</summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarStyle.#ctor">
            <summary>
            Creates a new instance of a ScrollbarStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarStyle.#ctor(Tizen.NUI.Components.ScrollbarStyle)">
            <summary>
            Copy constructor.
            </summary>
            <param name="style">Create ScrollbarStyle by style customized by user.</param>
        </member>
        <member name="M:Tizen.NUI.Components.ScrollbarStyle.#cctor">
            <summary>
            Static constructor to initialize bindable properties when loading.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.TrackThickness">
            <summary>
            The thickness of the track.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.ThumbThickness">
            <summary>
            The thickness of the thumb.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.TrackColor">
            <summary>
            The color of the track part.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.ThumbColor">
            <summary>
            The color of the thumb part.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.TrackPadding">
            <summary>
            The padding value of the track.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.ThumbVerticalImageUrl">
            <summary>
            The image url of the vertical thumb.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ScrollbarStyle.ThumbHorizontalImageUrl">
            <summary>
            The image url of the horizontal thumb.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.SliderStyle">
            <summary>
            SliderStyle is a class which saves Slider's ux data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Components.SliderStyle.IndicatorTypeProperty">
            <summary>
            IndicatorTypeProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.SliderStyle.SpaceBetweenTrackAndIndicatorProperty">
            <summary>
            SpaceBetweenTrackAndIndicatorProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.SliderStyle.TrackThicknessProperty">
            <summary>
            TrackThicknessProperty
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.SliderStyle.TrackPaddingProperty">
            <summary>
            TrackPaddingProperty
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.SliderStyle.#ctor">
            <summary>
            Creates a new instance of a SliderStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SliderStyle.#ctor(Tizen.NUI.Components.SliderStyle)">
            <summary>
            Creates a new instance of a SliderStyle with style.
            </summary>
            <param name="style">Create SliderStyle by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.Track">
            <summary>
            Get or set background track.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.Progress">
            <summary>
            Get or set slided track.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.Thumb">
            <summary>
            Get or set thumb.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.WarningTrack">
            <summary>
            Get or set background warning track.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.WarningProgress">
            <summary>
            Get or set slided warning track.
            </summary>
            This will be public opened later after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.LowIndicatorImage">
            <summary>
            Get or set low indicator image.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.HighIndicatorImage">
            <summary>
            Get or set high indicator image.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.LowIndicator">
            <summary>
            Get or set low indicator text.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.HighIndicator">
            <summary>
            Get or set high indicator text.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.ValueIndicatorText">
            <summary>
            Get or set the value indicator text.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.ValueIndicatorImage">
            <summary>
            Get or set the value indicator image.
            </summary>
            <since_tizen> 9 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.IndicatorType">
            <summary>
            Get or set Indicator type
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.TrackThickness">
            <summary>
            Get or set track thickness
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.SpaceBetweenTrackAndIndicator">
            <summary>
            Get or set space between track and indicator
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SliderStyle.TrackPadding">
            <summary>
            Get or set space between track and indicator
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SliderStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SliderStyle.Dispose(System.Boolean)">
            <summary>
            Dispose SliderStyle and all children on it.
            </summary>
            <param name="disposing">true in order to free managed objects</param>
        </member>
        <member name="T:Tizen.NUI.Components.SwitchStyle">
            <summary>
            SwitchStyle is a class which saves Switch's ux data.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SwitchStyle.#ctor">
            <summary>
            Creates a new instance of a SwitchStyle.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SwitchStyle.#ctor(Tizen.NUI.Components.SwitchStyle)">
            <summary>
            Creates a new instance of a SwitchStyle with style.
            </summary>
            <param name="style">Create SwitchStyle by style customized by user.</param>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SwitchStyle.Thumb">
            <summary>
            Thumb image's style.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.SwitchStyle.Track">
            <summary>
            Track image's style.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SwitchStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.SwitchStyle.CreateExtension">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TabButtonStyle">
            <summary>
            TabButtonStyle is a class which saves TabButton's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonStyle.#ctor">
            <summary>
            Creates a new instance of a TabButtonStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonStyle.#ctor(Tizen.NUI.Components.TabButtonStyle)">
            <summary>
            Creates a new instance of a TabButtonStyle with style.
            </summary>
            <param name="style">Create TabButtonStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.TabButtonStyle.TopLine">
            <summary>
            Gets or Sets the Line Style at the top of TabButton.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabButtonStyle.BottomLine">
            <summary>
            Gets or Sets the Line Style at the bottom of TabButton.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabButtonStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TabStyle">
            <summary>
            TabStyle is a class which saves Tab's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabStyle.#ctor">
            <summary>
            Creates a new instance of a TabStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabStyle.#ctor(Tizen.NUI.Components.TabStyle)">
            <summary>
            Creates a new instance of a TabStyle with style.
            </summary>
            <param name="style">Create TabStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.TabStyle.UnderLine">
            <summary>
            UnderLine's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabStyle.Text">
            <summary>
            Text's style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabStyle.UseTextNaturalSize">
            <summary>
            Flag to decide if item is fill with item text's natural width.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabStyle.ItemSpace">
            <summary>
            Gap between items.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TabStyle.ItemPadding">
            <summary>
            Space in Tab.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TabStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.TimePickerStyle">
            <summary>
            TimePickerStyle is a class which saves TimePickerStyle's ux data.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePickerStyle.#ctor">
            <summary>
            Creates a new instance of a TimePickerStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePickerStyle.#ctor(Tizen.NUI.Components.TimePickerStyle)">
            <summary>
            Creates a new instance of a TimePickerStyle with style.
            </summary>
            <param name="style">Creates TimePickerStyle by style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.TimePickerStyle.Pickers">
            <summary>
            Gets or sets the TimePickerStyle internal pickers style.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.TimePickerStyle.CellPadding">
            <summary>
            Gets or sets the TimePickerStyle internal pickers padding.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.TimePickerStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="T:Tizen.NUI.Components.ToastStyle">
            <summary>
            ToastStyle is a class which saves Toast's ux data.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Components.ToastStyle.DurationProperty">
            <summary>The Duration bindable property.</summary>
        </member>
        <member name="M:Tizen.NUI.Components.ToastStyle.#ctor">
            <summary>
            Creates a new instance of a ToastStyle.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ToastStyle.#ctor(Tizen.NUI.Components.ToastStyle)">
            <summary>
            Creates a new instance of a ToastStyle with Style.
            </summary>
            <param name="style">Create ToastStyle by Style customized by user.</param>
        </member>
        <member name="P:Tizen.NUI.Components.ToastStyle.Duration">
            <summary>
            Gets or sets toast show duration time.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.ToastStyle.Text">
            <summary>
            Text's Style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ToastStyle.CopyFrom(Tizen.NUI.Binding.BindableObject)">
            <inheritdoc/>
        </member>
        <member name="M:Tizen.NUI.Components.DefaultThemeCreator.Create">
            <summary>
            The base theme description.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Components.NUIWindowExtentions">
            <summary>
            Extension class which provides extension methods of Tizen.NUI.Window to
            use Tizen.NUI.Components classes in Tizen.NUI.Window class' methods.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.NUIWindowExtentions.GetDefaultNavigator(Tizen.NUI.Window)">
            <summary>
            Returns the default navigator of the given window.
            </summary>
            <returns>The default navigator of the given window.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the argument window is null.</exception>
        </member>
        <member name="T:Tizen.NUI.Components.IntSelector">
            <summary>
            Int selector.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.IntSelector.Clone">
            <summary>
            Int selector clone function.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.FloatSelector">
            <summary>
            Float selector.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.FloatSelector.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.FloatSelector.#ctor(Tizen.NUI.BaseComponents.Selector{System.Nullable{System.Single}})">
            <summary>
            Constructor with base class object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.FloatSelector.Clone">
            <summary>
            Float selector clone function.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.BoolSelector">
            <summary>
            Bool selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.BoolSelector.Clone">
            <summary>
            Bool selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.StringSelector">
            <summary>
            String selector.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.StringSelector.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.StringSelector.#ctor(Tizen.NUI.BaseComponents.Selector{System.String})">
            <summary>
            Constructor with base class object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.StringSelector.Clone">
            <summary>
            String selector clone function.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.ColorSelector">
            <summary>
            Color selector.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.ColorSelector.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ColorSelector.#ctor(Tizen.NUI.BaseComponents.Selector{Tizen.NUI.Color})">
            <summary>
            Constructor with base class object.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ColorSelector.Clone">
            <summary>
            Color selector clone function.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Size2DSelector">
            <summary>
            Size2D selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Size2DSelector.Clone">
            <summary>
            Size2D selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Position2DSelector">
            <summary>
            Position2D selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Position2DSelector.Clone">
            <summary>
            Position2D selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.PositionSelector">
            <summary>
            Position selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.PositionSelector.Clone">
            <summary>
            Position selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Vector2Selector">
            <summary>
            Vector2 selector.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.Vector2Selector.Clone">
            <summary>
            Vector selector clone function.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.Vector3Selector">
            <summary>
            Vector3 selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.Vector3Selector.Clone">
            <summary>
            Vector3 selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.RectangleSelector">
            <summary>
            Rectangle selector.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="M:Tizen.NUI.Components.RectangleSelector.Clone">
            <summary>
            Rectangle selector clone function.
            </summary>
            <since_tizen> 6 </since_tizen>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.HorizontalAlignmentSelector">
            <summary>
            Horizontal alignment selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.HorizontalAlignmentSelector.Clone">
            <summary>
            Horizontal alignment selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.VerticalAlignmentSelector">
            <summary>
            Vertical alignment selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.VerticalAlignmentSelector.Clone">
            <summary>
            Vertical alignment selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.AutoScrollStopModeSelector">
            <summary>
            AutoScrollStopMode selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.AutoScrollStopModeSelector.Clone">
            <summary>
            AutoScrollStopMode selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.ResizePolicyTypeSelector">
            <summary>
            ResizePolicyType selector.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.ResizePolicyTypeSelector.Clone">
            <summary>
            ResizePolicyType selector clone function.
            </summary>
            This will be public opened in tizen_5.5 after ACR done. Before ACR, need to be hidden as inhouse API.
        </member>
        <member name="T:Tizen.NUI.Components.StyleBase">
            <summary>
            StyleBase class.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.StyleBase.#ctor">
            <summary>
            StyleBase construct.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Components.StyleBase.Content">
            <summary>
            Content object.
            </summary>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Components.StyleBase.GetViewStyle">
            <summary>
            Get view style.
            </summary>
            <returns>ViewStyle</returns>
            <since_tizen> 8 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Components.StyleManager">
            <summary>
            StyleManager is a class to manager all style.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.StyleManager.#ctor">
            <summary>
            StyleManager construct.
            </summary>
        </member>
        <member name="E:Tizen.NUI.Components.StyleManager.ThemeChangedEvent">
            <summary>
            An event for the theme changed signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.StyleManager.Instance">
            <summary>
            StyleManager static instance.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.StyleManager.Theme">
            <summary>
            Style theme.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.StyleManager.ThemeMap">
            <summary>
            (Theme name, Theme instance)
            </summary>
        </member>
        <member name="M:Tizen.NUI.Components.StyleManager.RegisterStyle(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            Register style in StyleManager.
            </summary>
            <param name="style">Style name.</param>
            <param name="theme">Theme id.</param>
            <param name="styleType">Style type.</param>
            <param name="bDefault">Flag to decide if it is default style.</param>
        </member>
        <member name="M:Tizen.NUI.Components.StyleManager.GetViewStyle(System.String)">
            <summary>
            Get style.
            </summary>
            <param name="style">Style name.</param>
            <returns>The style corresponding to style name .</returns>
        </member>
        <member name="M:Tizen.NUI.Components.StyleManager.RegisterComponentStyle(System.String,System.Type,System.Type)">
            <summary>
            Register a style for a component to theme.
            </summary>
            <param name="targetTheme">The target theme name to register a component style. It theme should be a known one.</param>
            <param name="component">The type of ComponentStyle</param>
            <param name="style">The derived class of StyleBase</param>
        </member>
        <member name="M:Tizen.NUI.Components.StyleManager.GetComponentStyle(System.Type)">
            <summary>
            Get components style in the current theme.
            </summary>
            <param name="component">The type of component</param>
            <returns>The style of the component.</returns>
        </member>
        <member name="T:Tizen.NUI.Components.StyleManager.ThemeChangeEventArgs">
            <summary>
            ThemeChangeEventArgs is a class to record theme change event arguments which will sent to user.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Components.StyleManager.ThemeChangeEventArgs.CurrentTheme">
            <summary>
            CurrentTheme
            </summary>
        </member>
    </members>
</doc>
